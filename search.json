[{"title":"YOLOv3源码理解","url":"/2022/10/08/YOLOv3源码理解/","content":"\n## 0 主干网络\nYOLOv3采用DarkNet-53网络，结构如下图（DarkNet-53预训练于ImageNet，由于是1000类的分类，所以网络最后输出经过全连接层。但是目标检测不需要那个全连接层，因此实际上只使用了“DarkNet-52”，共52层卷积层）：\n\n![YOLOv3 Backbone](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/object%20detection/YOLOv3_Backbone.jpg)\n\nBN为批归一化层，Acti为激活函数，YOLOv3采用LeakyReLU\n\n输入批次经过一个3X3卷积改变通道数为32，然后经过5个降残差块。每个降残差块包含一次步幅为2的3X3卷积加上一系列残差块。每个残差块包含一次1X1卷积降低通道数，再经过一次3X3卷积提升通道数，最后和残差边进行连接。\n\n整体主干网络清晰，每经过一个降残差块，通道数翻倍，特征图宽高减半。\n\n## 1 预测分支网络\n\n下图是YOLOv3的预测分支网络部分，是一个典型的特征金字塔结构。最后的输出通道75是假设采用VOC数据集进行20个类别的检测，因此输出的75代表`3*(4+1+20)`，3代表每个特征点3个先验框；4代表先验框x、y的偏移量以及宽高的伸缩量；1代表该先验框包含目标的置信度；20代表该数据集类别个数。\n\n\n![YOLOv3 Branch](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/object%20detection/YOLOv3_Branch.png)\n\n## 2 数据加载\n- 图片会被进行各种图像增强、添加灰条等操作，最终大小为`(416，416)`，值归一化到`0~1`，形状为`(B, 3, 416, 416)`\n- 标签会被归一化`0~1`（从数据集`[左上右下]`转换为`[中心宽高]`），形状为`list[(GT, 4)...B个]`\n\n## 3 训练网络\n- 网络前向传播会获得一个包含三元素的元组：`((bs,75,13,13),(bs,75,26,26),(bs,75,52,52))`，代表网络三个层的输出\n- 依次计算每个层的损失，相加之后进行反向传播\n\n### 3.1 输出层的解码\n以`(bs,75,13,13)`为例，`view`到`(bs,3,13,13,25)`，随后通过其中包含的信息结合给该层分配的三个先验框的宽高，可以得到预测框的结果。\n- `(..., 0:2)`执行`sigmoid`获得该层先验框的偏移\n- `(..., 2:4)`不执行任何操作，之后用于宽高的缩放\n- `(..., 4)`执行`sigmoid`获得包含物体的置信度\n- `(..., 5:)`执行`sigmoid`获得被认为是每个类别的概率\n\n### 3.2 正负样本\n- 批次里的每个图片都会单独循环处理：将这些真实框与9个先验框做IOU，从而确定每个真实框由哪个大小的先验框负责。确认后，再根据真实框的中心位置，确认属于哪个特征点负责，最终即可确认由哪一个先验框（确定了哪一层）的哪个特征图（该层的哪个格子）负责，正样本既定。\n- 按理说，其他未分配真实框的预测框都是负样本，有`(13*13+26*26+52*52)*3 - 9 = 10647 - 9 = 10638`个负样本。但是作者考虑到，某些本不负责预测目标框的预测框，如果其IOU与该目标比较重合（例如大于0.5），则不能将其作为负样本，应该忽略之。因此实际的负样本应该是小于该值的。\n\n### 3.3 损失函数计算\n- YOLOv3包含三个损失：边框回归损失、目标置信度损失、类别损失\n- 对于正样本，三项损失都要计算：\n  - 其中边框回归损失可以采用`MSELoss`、`BCELoss`、或者各类的`IOU损失`，例如`DIOU, GIOU, CIOU`\n  - 目标置信度损失直接采用`BCELoss`，可以选择和`Focal Loss`形式结合\n  - 类别损失直接采用`BCELoss`\n- 对于负样本，只计算目标置信度损失，直接采用`BCELoss`，可以选择和`Focal Loss`形式结合。注意，当选择`Focal Loss`形式时，该项损失的权重系数要重新配置，一般要增大很多。而且训练结束后的预测的`置信度*类别`可能会降低，因为只学习难的，简单易判的往往损失权值极地，基本不学习，导致这种现象产生。\n\n## 4 预测网络\n- 转RGB、调整形状、添加灰条（可选）、归一化0~1、添加批次通道，最终形状：`(1,3,416,416)`\n- 送入网络得到结果，一个包含三元素的元组：`((1,75,13,13),(1,75,26,26),(1,75,52,52))`\n- 将结果解码：根据预测结果和先验框宽高，得到一个包含三元素的列表：`[(1, 3*13*13, 25), (1, 3*26*26, 25), (1, 3*52*52, 25)]`，最终合并为单个张量：`(1, 10647, 25)`。其中的值都被归一化为0~1了\n- 将数据转换为`(10647, 7)`代表`xmin, ymin, xmax, ymax, conf, class_conf, class_pred`，按照`(..., 4)*(..., 5) > threshold`获得保留的预测框\n- 按照每个类别，分别执行非极大值抑制，最后收集保留的这些预测框\n- 将预测框按照之前图像预处理，进行反向操作（其中为方便操作，将之前的7属性的坐标部分进行颠倒，现在为`ymin, xmin, ymax, xmax, conf, class_conf, class_pred`），可以理解为`top, left, bottom, right`","tags":["目标检测"]},{"title":"C与CPP互相调用","url":"/2022/09/23/C与CPP互相调用/","content":"\n## 0. 说明\n- C++采用g++编译，C采用gcc编译。两者主要不同点是：C++编译考虑到函数重载，会将原函数“改名”（命名倾轧name mangling）；而在C中不存在重载，函数名不会变动。\n- g++和gcc可以兼容C++和C的编译方式，但是默认情况下g++采用C++编译方式；而gcc采用C的编译方式\n- 注意：gcc编译C++文件时不会主动链接C++用到的库stdc++，需要手动指定链接选项`-lstdc++`\n- `__cplusplus`宏定义会在编译cpp文件以及用C++的方式编译时被包含，因此用gcc编译.cpp文件或者g++编译.c、.cpp文件都会有这个宏\n- 之所以用条件判断，因为gcc不认识`extern \"C\"`，直接编译会报错\n\n## 1. C++调用C\n\n只需要声明时包含`extern \"C\"`即可。下面的代码中，func.h可以不动，在main.cpp调用时，直接`extern \"C\" int func(int, int)`也是可以的。只需要让编译器按照C的方式编译，不要改动函数名即可正确链接的函数符号。\n\n```c++\n// func.h 不论.c还是.cpp文件调用，都不会出错\n#ifndef FUNC_H\n#define FUNC_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif // __cplusplus\n\nint func(int, int);\n\n#ifdef __cplusplus\n}\n#endif // __cplusplus\n\n#endif\n```\n\n```c++\n// func.c\n#include \"func.h\"\n\nint func(int a, int b) {\n\treturn a + b;\n}\n```\n\n```c++\n// main.cpp\n#include <iostream>\n#include \"func.h\"\n\nint main() {\n\tstd::cout << func(1, 3) << std::endl;\n}\n```\n\n## 2. C调用C++\n\nC调用C++稍微麻烦点，遇到类函数和重载函数往往需要嵌套一层，详细如下。\n\n### 2.1. 普通函数\n\n```c++\n// func.h\n#ifndef FUNC_H\n#define FUNC_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif // __cplusplus\n\nvoid func();\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n```\n\n```c++\n// func.cpp\n#include \"func.h\"\n#include <iostream>\n\nvoid func() {\n\tstd::cout << \"void func()\" << std::endl;\n}\n```\n\n```c++\n// main.c\n#include \"func.h\"\n\nint main() {\n\tfunc();\n}\n```\n\n\n### 2.2. 重载函数\n\n```c++\n// func.h\n#ifndef ADAPTER_H\n#define ADAPTER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif // __cplusplus\n\nvoid func_();\nvoid func_i(int);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n```\n\n```c++\n// func.cpp\n#include \"func.h\"\n#include <iostream>\n\nvoid func() {\n\tstd::cout << \"void func()\" << std::endl;\n}\n\nvoid func(int a) {\n\tstd::cout << \"void func(int)\" << std::endl;\n}\n\n// adapter\nvoid func_() {\n\tfunc();\n}\n\nvoid func_i(int a) {\n\tfunc(a);\n}\n```\n\n```c++\n// main.c\n#include \"func.h\"\n\nint main() {\n\tfunc_();\n\tfunc_i(1);\n}\n```\n\n### 2.3. 类函数\n\n```c++\n// Circle.h\n#ifndef CIRCLE_H\n#define CIRCLE_H\n\nclass Circle {\n\tdouble radius;\npublic:\n\tCircle(double r) :radius(r) {}\n\tdouble getArea();\n};\n\n#endif\n```\n\n```c++\n// Circle.cpp\n#include \"Circle.h\"\n\ndouble Circle::getArea() {\n\treturn 3.1415926 * radius * radius;\n}\n```\n\n**核心文件（adapter.h），此代码必须在C ++和C文件中都可以编译。**\n\n```c++\n// adapter.h\n#ifndef ADAPTER_H\n#define ADAPTER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif // __cplusplus\n\nvoid* Circle_new(double);\ndouble Circle_getAea(void*);\nvoid Circle_detete(void*);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n```\n\n```c++\n// adapter.cpp\n#include \"adapter.h\"\n#include \"Circle.h\"\n\nvoid* Circle_new(double r) {\n\tCircle *p = new Circle(r);\n\treturn (void*)p;\n}\n\ndouble Circle_getAea(void* p) {\n\treturn ((Circle*)p)->getArea();\n}\n\nvoid Circle_detete(void* p) {\n\tCircle* cp = (Circle*)p;\n\tdelete cp;\n}\n```\n\n```c++\n// main.c\n#include <stdio.h>\n#include \"adapter.h\"\n\nint main() {\n\tvoid* p = Circle_new(1);\n\tprintf(\"%lf\\n\", Circle_getAea(p));\n\tCircle_detete(p);\n}\n```\n\n## 3. 参考\n- [c语言和c++的相互调用](https://blog.csdn.net/qq_29344757/article/details/73332501)\n- [C语言中调用C＋＋](https://blog.csdn.net/qq_37061368/article/details/118929829)\n- [极简式从C调用C++类方法](https://zhuanlan.zhihu.com/p/85663512)\n- [C调用C++和C++调用C](https://blog.csdn.net/qq_34799070/article/details/122118875)\n- [C++与C的相互调用](https://blog.csdn.net/wuguinianjing/article/details/115282307)","tags":["C/C++"]},{"title":"Qt信号与槽","url":"/2022/09/16/Qt信号与槽/","content":"\nQt的信号与槽机制是如何实现的？\n\n## 猜测1：回调函数\n\n- 这里用C11出现的function来封装所有可调用的对象：函数、指针、lambda、bind创建的对象、重载了小括号的仿函数\n- 通过unordered_multimap来记录某个字符串与一个可调用对象的映射（注意unordered_multimap未实现[]和at函数，不能通过这类方式获取value）\n\n```c++\nclass Connection {\n\tunordered_multimap<string, function<void()>> mmap;\npublic:\n\t// 按照名称建立映射关系\n\tvoid connect(const string& name, const function<void()>& callback) {\n\t\t//mmap[name] = callback; ERROR\n\t\tmmap.insert({ name, callback });\n\t}\n\tvoid invok(const string& name) {\n\t\tauto res = mmap.equal_range(name);\n\t\tauto l = res.first, r = res.second;\n\t\twhile (l != r) {\n\t\t\tl->second();\n\t\t\t++l;\n\t\t}\n\t}\n};\n\n// 全局共享的Connection\nstatic Connection con;\n\nclass Tom {\npublic:\n\tvoid miaow() {\n\t\tcout << \"喵\" << endl;\n\t\tcon.invok(\"mouse\");\n\t}\n};\n\nclass Jerry {\npublic:\n\tJerry() {\n\t\t// 普通类函数的第一个参数是this，所以这里绑定this\n\t\tcon.connect(\"mouse\", bind(&Jerry::RunAway, this));\n\t}\n\tvoid RunAway() {\n\t\tcout << \"那只笨又猫来了，快跑！\" << endl;\n\t}\n};\n\nint main() {\n\t// 模拟嵌套层级很深的场景，外部不能直接访问到tom\n\tstruct A {\n\t\tstruct B {\n\t\t\tstruct C {\n\t\t\tprivate:\n\t\t\t\tTom tom;\n\t\t\tpublic:\n\t\t\t\tvoid MiaoMiaoMiao() {\n\t\t\t\t\ttom.miaow();\n\t\t\t\t}\n\t\t\t} c;\n\t\t\tvoid MiaoMiao() {\n\t\t\t\tc.MiaoMiaoMiao();\n\t\t\t}\n\t\t} b;\n\t\tvoid Miao() {\n\t\t\tb.MiaoMiao();\n\t\t}\n\t} a;\n\n\t// 模拟嵌套层级很深的场景，外部不能直接访问到jerry\n\tstruct D {\n\t\tstruct E {\n\t\t\tstruct F {\n\t\t\tprivate:\n\t\t\t\tJerry jerry1, jerry2, jerry3;\n\t\t\t} f;\n\t\t} e;\n\t} d;\n\n\ta.Miao();\n}\n```\n输出结果：\n```c++\n喵\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n```\n\n## 猜测2：观察者模式\n\n- 别名：订阅-发布模式\n- 任意类继承Subject模板类，提供观察者参数，即拥有了订阅-发布模式\n\n```c++\ntemplate<typename ObserverType>\nclass Subject {\n\tvector<ObserverType*> _list;\npublic:\n\t// 订阅\n\tvoid subscribe(ObserverType* obs) {\n\t\tauto itor = std::find(_list.begin(), _list.end(), obs);\n\t\tif (_list.end() == itor) {\n\t\t\t_list.push_back(obs);\n\t\t}\n\t}\n\t\n\t// 取消订阅\n\tvoid unSubscribe(ObserverType* obs) {\n\t\t// erase配合remove\n\t\t_list.erase(std::remove(_list.begin(), _list.end(), obs));\n\t}\n\n\t// 发布\n\ttemplate<typename FuncType>\n\tvoid publish(FuncType func) {\n\t\tfor (auto obs : _list) {\n\t\t\t// 调用回调函数，将obs作为一个参数传入\n\t\t\tfunc(obs);\n\t\t}\n\t}\n};\n\n// CatObserver接口 猫的观察者\nclass CatObserver {\npublic:\n\tvirtual void onMiaow() = 0;\n\tvirtual ~CatObserver() {}\n};\n\n// Tom继承自Subject，模板参数CatObserver\n// 这样Tom就可以订阅、发布对应类型\nclass Tom : public Subject<CatObserver> {\npublic:\n\tvoid miaow() {\n\t\tcout << \"喵\" << endl;\n\t\t// 这里CatObserver的成员函数，所以第一个参数需要this指针，这里悬置->对应publish的object\n\t\tpublish(std::bind(&CatObserver::onMiaow, std::placeholders::_1));\n\t}\n};\n\n// Jerry继承自CatObserver，可以被订阅\nclass Jerry : public CatObserver {\npublic:\n\tvoid onMiaow() override {\n\t\tRunAway();\n\t}\n\tvoid RunAway() {\n\t\tcout << \"那只笨又猫来了，快跑！\" << endl;\n\t}\n};\n\nint main() {\n\tTom tom;\n\tJerry jerry1, jerry2, jerry3;\n\n\t// 拿一堆jerry去订阅tom的 猫叫 事件\n\ttom.subscribe(&jerry1);\n\ttom.subscribe(&jerry2);\n\ttom.subscribe(&jerry3);\n\t\n\ttom.miaow();\n}\n```\n输出结果：\n```c++\n喵\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n```\n\n## 真实的Qt信号与槽\n- 同线程：类似函数调用，比观察者模式多一点性能损失\n- 异线程：发送者线程将槽函数的调用转化为一次“调用事件”加入到事件循环中，接收者线程执行到下一个事件处理时，处理调用事件\n\n信号与槽借助一个工具：元对象编译器MOC（Meta Object Compiler），集成在Qt编译工具链qmake中，在编译Qt工程前会先执行MOC，解析signals、slot、emit等关键字，处理Q_OBJECT、Q_PROPERTY、Q_INVOKABLE等宏，生成一个moc_xxx.cpp的C++文件（黑魔法来实现语法糖）比如信号只要声明不用实现，因为MOC自动生成实现放在moc_xxx.cpp中。之后即可进行常规的C/C++编译、链接流程\n\nMOC的本质：反射\n反射简单来说，就是运行过程中，获取对象的构造函数、成员函数、成员变量，例如：\n\n```c++\nclass Tom {\npublic:\n    Tom() {}\n    const std::string & getName() const {\n        return m_name;\n    }\n    void setName(const std::string &name) {\n        m_name = name;\n    }\nprivate:\n    std::string m_name;\n};\n```\n\n类的使用者看不到类的声明，头文件都拿不到，不能直接调用类的构造函数、成员函数。因此将Tom类的构造函数、成员函数等信息存储起来，还要能够被调用到。这些信息就是“元信息”，使用者通过“元信息”就可以“使用这个类了”，这便是反射。设计模式中的工厂模式就是反射的一种。\n\npython中涉及反射机制的函数有：`getattr(), setattr(), delattr(), exec(), eval(), __import__`等，都可以执行字符串\n\n更具体的实现机制参考[窥探信号槽的实现细节](https://zhuanlan.zhihu.com/p/80539605)，这里仅摘录部分。\n\n## 参考\n- [C++ function](https://blog.csdn.net/thorking01/article/details/120911438)\n- [认清信号槽的本质](https://zhuanlan.zhihu.com/p/75126932)\n- [窥探信号槽的实现细节](https://zhuanlan.zhihu.com/p/80539605)\n- [Qt进阶之路](https://zhuanlan.zhihu.com/p/345452320)","tags":["C/C++","Qt"]},{"title":"拓扑排序和二分图","url":"/2022/09/12/拓扑排序和二分图/","content":"\n## 1 拓扑排序（有向图）\n\n### [课程表Ⅱ](https://leetcode.cn/problems/course-schedule-ii/)\n\n#### 1.1 BFS（易理解）\n创建一个表示入度的数组，初始将入度为0的节点加入队列，后续依次弹出队列，每次弹出node，减小node指向的节点的入度，入度为0的加入队列，直到队列为空，结果需要判定出队列的节点数和图的总节点数相同，不同则代表有循环\n\n```c++\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<vector<int>> g(numCourses);\n        vector<int> inDegree(numCourses);\n        for (auto& e : prerequisites) {\n            g[e[1]].push_back(e[0]);\n            ++inDegree[e[0]];\n        }\n        queue<int> q;\n        vector<int> ret;\n        for (int i = 0; i < numCourses; ++i)\n            if (inDegree[i] == 0) q.push(i);\n        while (!q.empty()) {\n            int node = q.front(); q.pop();\n            ret.push_back(node);\n            for (auto e : g[node]) {\n                --inDegree[e];\n                if (inDegree[e] == 0)\n                    q.push(e);\n            }\n        }\n        return ret.size() == numCourses ? ret : vector<int>();\n    }\n};\n```\n\n#### 1.2 DFS\n\n**后序遍历的结果进行反转，就是拓扑排序的结果**\n\n![后序遍历与拓扑排序](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/algorithm/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E4%B8%8E%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F.jpg)\n\n```c++\n// visited用来减少计算量\n// used用来判断成环\nclass Solution {\npublic:\n    vector<bool> visited; // 不重置\n    vector<bool> used; // 每次递归，回溯重置\n    vector<int> postOrder;\n    // 判断有环，顺便记录下后序遍历的节点\n    bool isCircle(vector<vector<int>>& g, int node) {\n        if (used[node]) return true; // 有环\n        if (visited[node]) return false; // 优化速度（防止同一个连通集重复计算）\n        visited[node] = true;\n        used[node] = true;\n        for (auto e : g[node])\n            if (isCircle(g, e)) return true; // 有环直接返回\n        postOrder.push_back(node); // 后序遍历位置（递归后面）\n        used[node] = false;\n        return false;\n    }\n\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        vector<vector<int>> g(numCourses);\n        for (auto& e : prerequisites) g[e[1]].push_back(e[0]);\n        visited.resize(numCourses, false);\n        used.resize(numCourses, false);\n        for (int i = 0; i < numCourses; ++i)\n            if (isCircle(g, i)) return vector<int>(); // 有环直接返回\n        reverse(postOrder.begin(), postOrder.end());\n        return postOrder;\n    }\n};\n```\n\n## 2 二分图（无向图?）\n图的节点只有两种颜色：红和蓝，相同颜色不能相邻，判断是否是二分图，可有两种方法：DFS和BFS\n\n### [可能的二分法](https://leetcode.cn/problems/possible-bipartition/)\n\n#### 2.1 DFS\n注意visited不要重置\n```c++\nclass Solution {\npublic:\n    vector<bool> visited;\n    vector<bool> color;\n    bool core(vector<vector<int>>& g, int node) {\n        visited[node] = true;\n        for (auto e : g[node]) {\n            if (!visited[e]) {\n                color[e] = !color[node];\n                if (core(g, e) == false)\n                    return false;\n            }\n            else {\n                if (color[e] == color[node])\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        vector<vector<int>> g(n + 1);\n        for (auto& e : dislikes) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        visited.resize(n + 1, false);\n        color.resize(n + 1, false);\n        for (int i = 1; i <= n; ++i) {\n            if (visited[i]) continue;\n            if (core(g, i) == false) return false;\n        }\n        return true;\n    }\n};\n```\n\n#### 2.2 BFS\n```c++\nclass Solution {\npublic:\n    vector<bool> visited;\n    vector<bool> color;\n    bool core(vector<vector<int>>& g, int node) {\n        queue<int> q;\n        q.push(node);\n        while (!q.empty()) {\n            int cur = q.front(); q.pop();\n            visited[cur] = true;\n            for (auto e : g[cur]) {\n                if (!visited[e]) {\n                    color[e] = !color[cur];\n                    q.push(e);\n                }\n                else {\n                    if (color[e] == color[cur])\n                        return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n        vector<vector<int>> g(n + 1);\n        for (auto& e : dislikes) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        visited.resize(n + 1, false);\n        color.resize(n + 1, false);\n        for (int i = 1; i <= n; ++i) {\n            if (visited[i]) continue;\n            if (core(g, i) == false) return false;\n        }\n        return true;\n    }\n};\n```\n\n## 参考\n1. [二分图判定算法](https://labuladong.github.io/algo/2/22/52/)\n2. [环检测及拓扑排序算法](https://labuladong.github.io/algo/2/22/51/)","tags":["算法","特殊","排序","图"]},{"title":"带限制的最短路","url":"/2022/09/07/带限制的最短路/","content":"[带限制的最短路](https://leetcode.cn/problems/cheapest-flights-within-k-stops/)\n\n## 错误示例（Dijkstra）\n全局的dist记录着最短距离，但它并未记录是几跳获得的。例如，到达终点的前一跳，从`X->dst`，我的代码中只限制了到达`X`最多k+1跳，此时更新了`dist[X]`，当更新到`dst`时，利用的`dist[X]`是经过k跳的`X`作为跳板，则结果是经过了`k+2`跳，超出了限制，因此结果必然是错误的。\n\n```c++\nclass Item {\npublic:\n    int node, skip, dis;\n    Item(int a, int b, int c):node(a),skip(b),dis(c){}\n    bool operator>(const Item& R) const {\n        return this->dis > R.dis;\n    }\n};\nclass Solution {\npublic:\n    int INF = 0x3f3f3f3f;\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<vector<pair<int, int>>> g(n);\n        for (auto& e : flights) g[e[0]].push_back({ e[1], e[2] });\n        vector<int> dist(n, INF);\n        dist[src] = 0;\n        priority_queue<Item, vector<Item>, greater<Item>> pq;\n        pq.emplace(src, 0, 0);\n        while (!pq.empty()) {\n            auto cur = pq.top(); pq.pop();\n            int node = cur.node;\n            int dis = cur.dis;\n            int skip = cur.skip;\n            if (skip > k) continue;\n            for (auto& e : g[node]) {\n                int w_node = e.first;\n                int w_weight = e.second;\n                if (dist[w_node] > dist[node] + w_weight) {\n                    dist[w_node] = dist[node] + w_weight;\n                    pq.emplace(w_node, skip + 1, dist[w_node]);\n                }\n            }\n        }\n        return dist[dst];\n    }\n};\n```\n\n## 再次尝试Dijkstra（完全没必要）\n需要扔掉dist，在自定义的结构体中保存dis的值，另外，每次出堆的元素的邻接节点不用判断，全部加入堆。\n\n值得注意的是，由于k的限制存在，堆在这道题完全没有作用，反而会有副作用：\n\n- 假如，题目要求k=0，并且答案经过的这条直接相邻的边权值巨高，则堆会将该方法引向歧途\n- 抑或是k的限制，根本不存在答案，需要返回-1，但是由于不加判断，堆会不停进元素，导致死循环\n\n\n```c++\nclass Item {\npublic:\n    int node, skip, dis;\n    Item(int a, int b, int c):node(a),skip(b),dis(c){}\n    bool operator>(const Item& R) const {\n        return this->dis > R.dis;\n    }\n};\nclass Solution {\npublic:\n    int INF = 0x3f3f3f3f;\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<vector<pair<int, int>>> g(n);\n        for (auto& e : flights) g[e[0]].push_back({ e[1], e[2] });\n        priority_queue<Item, vector<Item>, greater<Item>> pq;\n        pq.emplace(src, 0, 0);\n        while (!pq.empty()) {\n            auto cur = pq.top(); pq.pop();\n            int node = cur.node;\n            int dis = cur.dis;\n            int skip = cur.skip;\n            if (node == dst) return dis;\n            if (skip > k) continue;\n            for (auto& e : g[node]) {\n                int w_node = e.first;\n                int w_weight = e.second;\n                // 不管，全部加入队列\n                pq.emplace(w_node, skip + 1, dis + w_weight);\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## bellman(邻接矩阵)\n\n**Bellman Ford 核心操作需要遍历所有的边**\n\n```c++\nclass Solution {\npublic:\n    int INF = 0x3f3f3f3f;\n    int bf(vector<vector<int>>& g, int src, int dst, int k) {\n        int n = g.size();\n        vector<int> dist(g.size(), INF);\n        dist[src] = 0;\n        while (k--) {\n            vector<int> tmp(dist);\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    dist[j] = min(dist[j], tmp[i] + g[i][j]);\n                }\n            }\n        }\n        return dist[dst];\n    }\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<vector<int>> g(n, vector<int>(n, INF));\n        for (int i = 0; i < n; ++i) g[i][i] = 0;\n        for (auto& e : flights) g[e[0]][e[1]] = e[2];\n        int ret = bf(g, src, dst, k+1);\n        return ret == INF ? -1 : ret;\n    }\n};\n```\n\n## bellman(flights本身就是边)\n\n```c++\nclass Solution {\npublic:\n    int INF = 0x3f3f3f3f;\n\n    int bf(vector<vector<int>>& edg, int src, int dst, int k) {\n        int n = edg.size();\n        vector<int> dist(edg.size(), INF);\n        dist[src] = 0;\n        while (k--) {\n            vector<int> tmp(dist);\n            for (int i = 0; i < n; ++i) {\n                for (auto& e : edg) {\n                    int x = e[0], y = e[1], w = e[2];\n                    dist[y] = min(dist[y], tmp[x] + w);\n                }\n            }\n        }\n        return dist[dst];\n    }\n\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        int ret = bf(flights, src, dst, k+1);\n        return ret == INF ? -1 : ret;\n    }\n};\n```\n\n## BFS\n\n```c++\nclass Solution {\npublic:\n    int INF = 0x3f3f3f3f;\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<vector<pair<int, int>>> g(n);\n        for (auto& e : flights) g[e[0]].push_back({ e[1], e[2] });\n        vector<int> dist(n, INF);\n        queue<int> q;\n        q.push(src);\n        dist[src] = 0;\n        while (!q.empty() && k-- >= 0) {\n            int sz = q.size();\n            vector<int> tmp(dist); // 保留上一时刻的快照\n            for (int i = 0; i < sz; ++i) {\n                int cur = q.front(); q.pop();\n                for (auto& w : g[cur]) {\n                    if (dist[w.first] > tmp[cur] + w.second) { // dist!\n                        dist[w.first] = tmp[cur] + w.second;\n                        q.push(w.first); // 放到if里面（发生更新时才添加元素）\n                    }\n                }\n            }\n        }\n        return dist[dst] == INF ? -1 : dist[dst];\n    }\n};\n```\n","tags":["算法","图"]},{"title":"逆序对","url":"/2022/09/01/逆序对/","content":"\n# [逆序对计算](https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/)\n\n## 1 归并排序\n归并排序天然就可统计逆序对，在归并时有以下两种方式统计：\n\n当左侧当前指针指向位置的数字CUR较小时，本轮将其加入归并后的数组，注意到右数组当前指针左边的都是小于CUR的，但是他们位置却在其右侧，所以逆序对贡献为`l2-old_l2`\n```c++\nif (a <= b) { // 这里包含等于 可以用全1数组模拟想想\n    trr[p++] = arr[l1++];\n    ret += (l2-old_l2);\n}\nelse \n    trr[p++] = arr[l2++];\n```\n当右侧当前指针指向位置的数字CUR较小时，本轮将其加入归并后的数组，注意到左数组当前指针及其右边都是大于CUR的，但是他们的位置却在其左侧，所以逆序对的贡献为`old_l2 - l1`\n```c++\nif (a <= b)  // 这里包含等于 可以用全1数组模拟想想\n    trr[p++] = arr[l1++];\nelse {\n    trr[p++] = arr[l2++];\n    ret += (old_l2 - l1);\n}\n```\n下面是完整代码\n```c++\nclass Solution {\npublic:\n    int ret = 0;\n    void merge(vector<int>& arr, vector<int>& trr, int l1, int r1, int l2, int r2) {\n        int l = l1, r = r2;\n        int p = l1, old_l2 = l2;\n        while (l1 <= r1 || l2 <= r2) {\n            long long a = l1 <= r1 ? arr[l1] : LLONG_MAX;\n            long long b = l2 <= r2 ? arr[l2] : LLONG_MAX;\n            if (a <= b) { // !!!!! <= 等于时也必须，不然右侧添加一堆等于的，再计算，结果肯定大了呀\n                trr[p++] = arr[l1++];\n                ret += (l2-old_l2); // 只需要在这里加上这句，收集逆序对\n            }\n            else \n                trr[p++] = arr[l2++];\n        }\n        for (int i = l; i <= r; ++i)\n            arr[i] = trr[i];\n    }\n    void core(vector<int>& arr, vector<int>& trr, int l, int r) {\n        if (l >= r) return;\n        int m = (l + r) / 2;\n        core(arr, trr, l, m);\n        core(arr, trr, m + 1, r);\n        merge(arr, trr, l, m, m + 1, r);\n    }\n    int reversePairs(vector<int>& nums) {\n        vector<int> trr(nums.size());\n        core(nums, trr, 0, (int)nums.size() - 1);\n        return ret;\n    }\n};\n```\n\n## 2 离散化+树状数组\n树状数组可以非常方便进行区间统计和单点修改，对于原数组，我们从后往前遍历，依次将其加入树状数组（计数），并求其左侧（小于的）之前的所有已插入的数字的和，最终即可求得总的逆序对。然而，原数组的数值范围波动较大，不能直接用树状数组去记录，其间必有许多0表现出极大的稀疏性，因此需要对原数组进行离散化。所谓离散化，即将原数组映射到1~N的数据范围，让数据的范围全部聚集在一起，减少空间浪费，有利于树状数组发挥。因为在该问题中我们不关心数据的绝对大小，仅关心数据的相对大小，所以可以离散化。离散化需要借助偏向的二分查找进行。\n\n对于数组`[1,3,2,4,1]`，离散化后的结果是`1,4,3,5,1`，程序处理过程中树状数组的变化为（树状数组0位弃用）：\n```c++\n对于原数组 [1,4,3,5,1]\n从后往前遍历 1->5->3->4->1\nX    [0,0,0,0,0,0]   ret = 0 初始\n1    [0,1,1,0,1,0]   ret = 0\n5    [0,1,1,0,1,1]   ret = 1\n3    [0,1,1,1,2,1]   ret = 2\n4    [0,1,1,1,3,1]   ret = 4\n1    [0,2,2,1,4,1]   ret = 4\n最终逆序对即为4\n```\n```c++\n// 树状数组\nclass Trr {\n    vector<int> trr;\npublic:\n    static int lowbit(int a) { return a & -a; }\n    Trr(const vector<int>& arr) : trr(arr.size() + 1) {\n        for (int i = 0; i < arr.size(); ++i) {\n            int t = i + 1;\n            while (t < trr.size()) {\n                trr[t] += arr[i];\n                t += lowbit(t);\n            }\n        }\n    }\n\n    int query(int n) { // from 1\n        int ret = 0;\n        while (n) {\n            ret += trr[n];\n            n -= lowbit(n);\n        }\n        return ret;\n    }\n\n    void update(int pos, int diff) { // from 1\n        while (pos < trr.size()) {\n            trr[pos] += diff;\n            pos += lowbit(pos);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int reversePairs(vector<int>& nums) {\n        // 离散化(nlogn)\n        vector<int> tmp(nums);\n        sort(tmp.begin(), tmp.end());\n        for (auto& e : nums)\n            e = lower_bound(tmp.begin(), tmp.end(), e) - tmp.begin() + 1;\n        // 树状数组统计逆序对(nlogn)\n        Trr trr(vector<int>(nums.size())); // 初始化全0\n        int ret = 0;\n        for (int i = nums.size() - 1; i >= 0; --i) {\n            trr.update(nums[i], 1);\n            ret += trr.query(nums[i] - 1);\n        }\n        return ret;\n    }\n};\n```\n\n## 小记\n- 已知的树状数组的两种用途\n  - 原数组的下标作为索引，进行区间统计和修改\n  - 原数组的值作为下标，进行区间计数（本题）","tags":["算法","特殊","树","排序"]},{"title":"线段树","url":"/2022/08/27/线段树/","content":"\n## 需求\n- 数组区间内经常发生修改，但是又要频繁求得区间的各类统计信息例如最大值、最小值、区间和等等。\n- 对于一个数组频繁求区间和和修改的情况下：\n  - 普通操作：修改：O(1)；区间和：O(n)\n  - 前缀和：修改：O(n)；区间和：O(1)\n  - 线段树：修改：O(nlogn)；区间和：O(nlogn)\n\n## 线段树\n- 将数组以二分的形式建成一棵二叉树，叶子节点为数组的值，非叶子节点保存相应的统计信息。这棵树近似完全二叉树的结构，所以可以用数组来构建\n- 下面所列举的代码只需要改变给`tree[node]`赋值相关代码即可实现求最大值、最小值、区间和，肥肠方便\n- [307. 区域和检索 - 数组可修改](https://leetcode.cn/problems/range-sum-query-mutable/)\n\n## 1、数组版\n- 粗略而言，数组版线段树的大小初始化为4N即可\n- 这里`_buildTree, _update, _sumRange`都传入了参数`int start, int end`。是通过形参来维护每个树节点的管理范围，事实上，也可以创建一个`tree.shape == (3, 4N)`的线段树，第一行是统计信息，第二三行是范围起点和终点，代码可见[数组版v2](#数组版v2)\n```c++\nclass NumArray {\npublic:\n    NumArray(vector<int>& nums):arr(nums), tree(arr.size()*4) {\n        _buildTree(0, 0, arr.size() - 1);\n    }\n\n    void update(int index, int val) {\n        _update(0, 0, arr.size() - 1, index, val);\n    }\n\n    int sumRange(int left, int right) {\n        return _sumRange(0, 0, arr.size() - 1, left, right);\n    }\nprivate:\n    void _buildTree(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        _buildTree(node_left, start, mid);\n        _buildTree(node_right, mid + 1, end);\n        // 这里可以改为求最大值、最小值\n        tree[node] = tree[node_left] + tree[node_right];\n    }\n\n    void _update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            arr[idx] = val;\n            tree[node] = val;\n            return;\n        }\n        int mid = (start + end) / 2;\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        if (idx <= mid) _update(node_left, start, mid, idx, val);\n        else _update(node_right, mid + 1, end, idx, val);\n        // 这里可以改为求最大值、最小值\n        tree[node] = tree[node_left] + tree[node_right]; // 修改路径上的值，类似树状数组的寻祖\n    }\n\n    int _sumRange(int node, int start, int end, int l, int r) {\n        if (l > end || r < start) return 0; // 不在区间内\n        if (start >= l && end <= r) return tree[node];\n        int mid = (start + end) / 2;\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        // 这里可以改为求最大值、最小值\n        return _sumRange(node_left, start, mid, l, r) + _sumRange(node_right, mid + 1, end, l, r);\n    }\n    vector<int> arr;\n    vector<int> tree;\n};\n```\n\n## 2、真建树\n```c++\nstruct TNode {\n    int start;\n    int end;\n    int val;\n    TNode* left;\n    TNode* right;\n};\nclass NumArray {\npublic:\n    NumArray(vector<int>& nums) {\n        tree = _buildTree(nums, 0, nums.size()-1);\n    }\n\n    void update(int index, int val) {\n        _update(tree, index, val);\n    }\n\n    int sumRange(int left, int right) {\n        return _sumRange(tree, left, right);\n    }\nprivate:\n    TNode* _buildTree(vector<int>& arr, int l, int r) {\n        TNode* p = new TNode;\n        if (l == r) {\n            p->val = arr[l];\n            p->left = p->right = nullptr;\n        }\n        else {\n            int m = (l + r) / 2;\n            p->left = _buildTree(arr, l, m);\n            p->right = _buildTree(arr, m + 1, r);\n            p->val = p->left->val + p->right->val;\n        }\n        p->start = l; p->end = r;\n        return p;\n    }\n    void _update(TNode* root, int idx, int val) {\n        int start = root->start, end = root->end;\n        if (start == end) {\n            root->val = val;\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (idx <= mid) _update(root->left, idx, val);\n        else _update(root->right, idx, val);\n        root->val = root->left->val + root->right->val;\n    }\n    int _sumRange(TNode* root, int l, int r) {\n        int start = root->start, end = root->end;\n        if (l > end || r < start) return 0; // 不在区间内\n        if (start >= l && end <= r) return root->val;\n        return _sumRange(root->left, l, r) + _sumRange(root->right, l, r);\n    }\n    TNode* tree;\n};\n```\n\n## 3、数组版v2\n- 效率相较于v1是低了，占用内存也高了~\n```c++\nclass NumArray {\npublic:\n    NumArray(vector<int>& nums):arr(nums), tree(3, vector<int>(arr.size() * 4)) {\n        _buildTree(0, 0, arr.size() - 1);\n    }\n\n    void update(int index, int val) {\n        _update(0, index, val);\n    }\n\n    int sumRange(int left, int right) {\n        return _sumRange(0, left, right);\n    }\nprivate:\n    void _buildTree(int node, int start, int end) {\n        if (start == end) {\n            tree[0][node] = arr[start];\n            tree[1][node] = start; // 赋值\n            tree[2][node] = end; // 赋值\n            return;\n        }\n        int mid = (start + end) / 2;\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        _buildTree(node_left, start, mid);\n        _buildTree(node_right, mid + 1, end);\n        // 这里可以改为求最大值、最小值\n        tree[0][node] = tree[0][node_left] + tree[0][node_right];\n        tree[1][node] = start; // 赋值\n        tree[2][node] = end; // 赋值\n    }\n\n    void _update(int node, int idx, int val) {\n        int start = tree[1][node], end = tree[2][node];\n        if (start == end) {\n            arr[idx] = val;\n            tree[0][node] = val;\n            return;\n        }\n        int mid = (start + end) / 2;\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        if (idx <= mid) _update(node_left, idx, val);\n        else _update(node_right, idx, val);\n        // 这里可以改为求最大值、最小值\n        tree[0][node] = tree[0][node_left] + tree[0][node_right]; // 修改路径上的值，类似树状数组的寻祖\n    }\n\n    int _sumRange(int node, int l, int r) {\n        int start = tree[1][node], end = tree[2][node];\n        if (l > end || r < start) return 0; // 不在区间内\n        if (start >= l && end <= r) return tree[0][node];\n        int node_left = node * 2 + 1;\n        int node_right = node * 2 + 2;\n        // 这里可以改为求最大值、最小值\n        return _sumRange(node_left, l, r) + _sumRange(node_right, l, r);\n    }\n    vector<int> arr;\n    vector<vector<int>> tree;\n};\n```\n\n## 参考\n1. [正月点灯笼](https://www.bilibili.com/video/BV1cb411t7AM?from=search&seid=18283713629507376570&spm_id_from=333.337.0.0&vd_source=5def309c50dba10ca2a52c71628df16d)","tags":["算法","特殊","树"]},{"title":"树状数组","url":"/2022/08/21/树状数组/","content":"\n## 需求\n- 随机修改数组中一个数字\n- 求前缀和\n- 以上操作需要频繁操作\n\n## 预备知识：lowbit\nlowbit指数字的二进制最低位1及后续0取出后的数字\n```c++\nint lowbit(int a){\n    return a & -a;\n}\n```\n例如:10：`1010 & 0110 = 0010`，即10的lowbit为2。\n\n|x|1|2|3|4|5|6|7|8|9|10|\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|lowbit(x)|1|2|1|4|1|2|1|8|1|2|\n\n*注意：0不存在lowbit，所以数组的下标需要右偏移一位（使用时偏移或初始化多1位）*\n\n## 树状数组\n\n![树状数组](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/algorithm/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.gif)\n\n\n\n- tarr从1开始，arr从0开始\n- 树状数组的每一个元素`tarr[i]`：其值为`a[j]+...a[i-1]+a[i-1]`，其中连加的项总共`lowbit(i)`个\n- 在树状数组中，为什么需要寻找其父节点？有两个用处：1、初始化树状数组。2、修改某个数同时修改其祖上一系列树状数组的值。对于`tarr[i]`而言，其直接父节点即为`tarr[i + lowbit(i)]`，通过这种方式逐步向上迭代，即可探寻祖上一条链\n- 对于给定数组：`arr = [1,3,2,6,4,1]`，可得其对应的树状数组：`tarr = [1, 1+3, 2, 1+3+2+6, 4, 4+1] -> [1, 4, 2, 12, 4, 5]`\n- 求和时，例如`sum(idx=13)`\n  - 先得到`res += tarr[13]`，随后`idx -= lowbit(idx)`，此时`idx==12`\n  - 再得到`res += tarr[12]`，随后`idx -= lowbit(12)`，此时`idx==8`\n  - 再得到`res += tarr[8]`，随后`idx -= lowbit(8)`，此时`idx==0`结束循环\n  - 最终，`res = tarr[13] + tarr[12] + tarr[8] = (arr[12]) + (arr[8]+...+arr[11]) + (arr[0]+...+arr[7])`\n- 总之，对于树状数组`tarr`\n  - `idx += lowbit(idx)`是为了寻找祖上，修改和初始化用到\n  - `idx -= lowbit(idx)`是为了求和\n\n\n## 代码\n```c++\nclass TreeArr {\npublic:\n    TreeArr(vector<int> arr) :arr(arr), tarr(arr.size()+1) {\n        // 初始化树状数组，arr中的每个元素被加到其祖上所有节点中\n        for (size_t i = 0; i < arr.size(); ++i) {\n            size_t idx = i + 1; // 偏移1位\n            while (idx < tarr.size()) {\n                tarr[idx] += arr[i];\n                idx += lowbit(idx);\n            }\n        }\n    }\n\n    void update(int i, int val) {\n        int diff = val - arr[i];\n        size_t idx = i + 1;\n        // 修改时也要修改其祖上所有节点 + lowbit(idx)\n        while (idx < tarr.size()) {\n            tarr[idx] += diff;\n            idx += lowbit(idx);\n        }\n        arr[i] = val; // 勿忘\n    }\n\n    int getSum(int i) {\n        int idx = i + 1;\n        int res = 0;\n        // 求和时则是 - lowbit(idx)\n        while (idx > 0) {\n            res += tarr[idx];\n            idx -= lowbit(idx);\n        }\n        return res;\n    }\n\n    int getRange(int l, int r) {\n        return getSum(r) - getSum(l - 1); //!\n    }\n\n\n    static int lowbit(int a) {\n        return a & -a;\n    }\nprivate:\n    vector<int> arr;\n    vector<int> tarr;\n};\n```\n\n## 参考\n1. [什么是树状数组？让这个12岁年轻人为你讲解](https://baijiahao.baidu.com/s?id=1734883051625102971&wfr=spider&for=pc)\n2. [数据结构：树状数组](https://www.jianshu.com/p/7cd5ad2f449a)\n3. [307. 区域和检索 - 数组可修改](https://leetcode.cn/problems/range-sum-query-mutable/submissions/)\n4. [剑指 Offer 51. 数组中的逆序对](https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/bao-li-jie-fa-fen-zhi-si-xiang-shu-zhuang-shu-zu-b/)\n5. [315. 计算右侧小于当前元素的个数](https://leetcode.cn/problems/count-of-smaller-numbers-after-self/solution/shu-zhuang-shu-zu-by-liweiwei1419/)","tags":["算法","特殊","树"]},{"title":"const要点","url":"/2022/08/19/const要点/","content":"\n# const要点\n- C的const是虚假的，就是个只读量，只是说不能通过变量名进行修改，但是拿到指针就可修改；\n- C++的const会保险一些，会有类似符号表的东西；但是类内的const普通成员变量则依旧会被通过指针改变\n- 静态const和全局const虽然可以通过指针修改，编译时期可能不会报错，但是运行到那个地方就会报错\n- const只在编译期间保证常量被使用时的不变性，无法保证运行期间的行为。\n```c++\nclass A {\npublic:\n    const int val2 = 22;\n    static int val3;\n    static const int val4 = 44; // !\n};\nint A::val3 = 33;\nconst int val5 = 55;\nint val6 = 66;\nint main() {\n    const int val1 = 11;\n    int* p1 = (int*)&val1; // 栈区，拿到地址随便改，但是符号表会覆盖\n    *p1 = 1111;\n    cout << &val1 << \" \" << val1 << endl;\n    cout << p1 << \" \" << *p1 << endl;\n    cout << \"===\" << endl;\n\n    A ins;\n    int* p2 = (int*)&ins.val2;\n    *p2 = 2222; // 栈区，拿到地址随便改\n    cout << &ins.val2 << \" \" << ins.val2 << endl;\n    cout << p2 << \" \" << *p2 << endl;\n    cout << \"===\" << endl;\n\n    int* p3 = (int*)&A::val3;\n    *p3 = 3333; // 全局数据区，但是不在常量区，可以修改\n    cout << p3 << \" \" << *p3 << endl;\n    cout << &A::val3 << \" \" << A::val3 << endl;\n    cout << \"===\" << endl;\n\n    int* p4 = (int*)&A::val4;\n    //*p4 = 4444; // 编译不出错，运行会异常（常量区不能修改）\n    cout << p4 << \" \" << *p4 << endl;\n    cout << &A::val4 << \" \" << A::val4 << endl;\n    cout << \"===\" << endl;\n\n    int* p5 = (int*)&val5;\n    //*p5 = 5555; // 编译不出错，运行会异常（常量区不能修改）\n    cout << p5 << \" \" << *p5 << endl;\n    cout << &val5 << \" \" << val5 << endl;\n    cout << \"===\" << endl;\n\n    int* p6 = (int*)&val6;\n    *p6 = 6666; // 全局数据区，但是不在常量区，可以修改\n    cout << p6 << \" \" << *p6 << endl;\n    cout << &val6 << \" \" << val6 << endl;\n    return 0;\n}\n```\n输出结果：\n```c++\n/*\n00EFFD98 11\n00EFFD98 1111\n===\n00EFFD80 2222\n00EFFD80 2222\n===\n0027C038 3333\n0027C038 3333\n===\n00279B38 44\n00279B38 44\n===\n00279B30 55\n00279B30 55\n===\n0027C03C 6666\n0027C03C 6666\n*/\n```\n\n# C++内存分区\n![C++内存分区](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/C%2B%2B内存分区.jpg)\n\n# 参考\n1. [C++：const常量的存储位置](https://blog.csdn.net/qq_43152052/article/details/99306967)\n2. [C/C++的四大内存分区和常量的存储位置](https://www.cnblogs.com/heluan/p/8652809.html)\n3. [阿秀的笔记](https://interviewguide.cn/notes/03-hunting_job/02-interview/01-01-01-基础语法.html)","tags":["C/C++"]},{"title":"设计模式-状态模式","url":"/2022/08/16/设计模式-状态模式/","content":"\n## 1 状态模式\n- 在软件构建过程中，某些对象的状态如果改变，其行为也会随之改变，比如文档处于只读状态，其支持的行为和读写状态支持的行为可能完全不同\n- 允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为\n- 用类表示状态，通过切换类改变对象状态\n- 跟Strategy模式很像，区别是：状态模式采用单例模式，抽象类包含指向下一个状态的指针\n\n## 2 问题\n```c++\nenum NetworkState{\n    Network_Open,\n    Network_Close,\n    Network_Connect\n    // 假设未来有新状态：Network_Wait，怎么办？\n};\n\nclass NetworkProcessor{\n    NetworkState state;\n\npublic:\n    void Operation1(){\n        if (state == Network_Open){\n            //**********\n            state = Network_Close;\n        }\n        else if (state == Network_Close){\n            //..........\n            state = Network_Connect;\n        }\n        else if (state == Network_Connect){\n            //$$$$$$$$$$\n            state = Network_Open;\n        }\n    }\n\n    void Operation2(){\n        if (state == Network_Open){\n            //**********\n            state = Network_Connect;\n        }\n        else if (state == Network_Close){\n            //..........\n            state = Network_Open;\n        }\n        else if (state == Network_Connect){\n            //$$$$$$$$$$\n            state = Network_Close;\n        }\n    }\n\n    void Operation3(){\n        // ...\n    }\n};\n```\n\n## 3 状态v1\n\n![状态模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// 把以前的枚举类型转换为抽象基类\n// 再把以前的所有操作，作为状态对象的行为\n// 最后再塞一个状态对像的指针\nclass NetworkState{\nprotected:\n    NetworkState* pNext; // next指针\npublic:\n    virtual void Operation1()=0;\n    virtual void Operation2()=0;\n    virtual void Operation3()=0;\n\n    virtual ~NetworkState(){}\n};\n\n\nclass OpenState: public NetworkState{\n    static NetworkState* m_instance; // 存放该类唯一实例的指针\npublic:\n    static NetworkState* getInstance(){ // 单例模式\n        if (m_instance == nullptr) {\n            m_instance = new OpenState();\n        }\n        return m_instance;\n    }\n\n    void Operation1(){\n        // **********\n        pNext = CloseState::getInstance();\n    }\n    \n    void Operation2(){\n        // ..........\n        pNext = ConnectState::getInstance();\n    }\n    \n    void Operation3(){\n        // $$$$$$$$$$\n        pNext = OpenState::getInstance();\n    }\n};\n\nclass CloseState: public NetworkState{\n    // ...\n}\n\nclass ConnectionState: public NetworkState{\n    // ...\n}\n\n// 可以非常方便的添加扩展\nclass WaitState: public NetworkState{\n    // ...\n}\n\n\nclass NetworkProcessor{\n    NetworkState* pState;\n    \npublic:\n    NetworkProcessor(NetworkState* pState){ // 构造函数\n        this->pState = pState;\n    }\n    \n    void Operation1(){\n        // ...\n        pState->Operation1(); // 多态调用\n        pState = pState->pNext; // 精妙\n        // ...\n    }\n    \n    void Operation2(){\n        // ...\n        pState->Operation2(); // 多态调用\n        pState = pState->pNext; // 精妙\n        // ...\n    }\n    \n    void Operation3(){\n        // ...\n        pState->Operation3(); // 多态调用\n        pState = pState->pNext; // 精妙\n        // ...\n    }\n};\n```\n\n## 4 状态v2（可执行）\n```c++\nclass IContext;\nclass IState { // 某版直接包含IContext指针\npublic:\n\tvirtual ~IState() {}\n\tvirtual void doColock(IContext *ctx, int hour) = 0;\n\tvirtual void doUse(IContext *ctx) = 0;\n\tvirtual void doAlarm(IContext *ctx) = 0;\n\tvirtual void doPhone(IContext *ctx) = 0;\n};\n\nclass IContext {\npublic:\n\tenum class ActionType {\n\t\tUse,\n\t\tAlarm,\n\t\tPhone\n\t};\n\tvirtual ~IContext() {}\n\tvirtual void doAction(ActionType actionType) = 0;\n\tvirtual void setClock(int hour) = 0;\n\tvirtual void stateChange(IState *state) = 0;\n\tvirtual void callSecurityCenter(const std::string &msg) = 0;\n\tvirtual void recoderLog(const std::string &msg) = 0;\n};\n\nclass DayState : public IState{\npublic:\n\tstatic DayState &GetInstance(){\n\t\tstatic DayState s;\n\t\treturn s;\n\t}\n\tvirtual void doColock(IContext *ctx, int hour) override;\n\tvirtual void doUse(IContext *ctx) override{\n\t\tctx->recoderLog(\"Day use \");\n\t}\n\tvirtual void doAlarm(IContext *ctx) override{\n\t\tctx->callSecurityCenter(\"Day alarm\");\n\t}\n\tvirtual void doPhone(IContext *ctx) override{\n\t\tctx->callSecurityCenter(\"Day phone\");\n\t}\n\n\t~DayState() = default;\n\tDayState(const DayState &) = delete;\n\tDayState(DayState &&) = delete;\n\tDayState &operator=(const DayState &) = delete;\n\tDayState &operator=(DayState &&) = delete;\n\nprotected:\n\tDayState() {}\n};\n\nclass NightState : public IState {\npublic:\n\tstatic NightState &GetInstance() {\n\t\tstatic NightState s;\n\t\treturn s;\n\t}\n\tvirtual void doColock(IContext *ctx, int hour) override;\n\tvirtual void doUse(IContext *ctx) override {\n\t\tctx->callSecurityCenter(\"Night use \");\n\t}\n\tvirtual void doAlarm(IContext *ctx) override {\n\t\tctx->callSecurityCenter(\"Night alarm\");\n\t}\n\tvirtual void doPhone(IContext *ctx) override {\n\t\tctx->recoderLog(\"Night phone\");\n\t}\n\n\t~NightState() = default;\n\n\tNightState(const NightState &) = delete;\n\tNightState(NightState &&) = delete;\n\tNightState &operator=(const NightState &) = delete;\n\tNightState &operator=(NightState &&) = delete;\n\nprotected:\n\tNightState() {}\n};\n\nvoid DayState::doColock(IContext *ctx, int hour) {\n\tif (hour < 9 || hour >= 17) {\n\t\tctx->stateChange(&NightState::GetInstance());\n\t}\n}\n\nvoid NightState::doColock(IContext *ctx, int hour) {\n\tif (hour >= 9 && hour < 17) {\n\t\tctx->stateChange(&DayState::GetInstance());\n\t}\n}\n\nclass SafeFrame : public IContext{\npublic:\n\tSafeFrame();\n\tvirtual void setClock(int hour) override;\n\tvirtual void doAction(ActionType actionType) override;\n\tvirtual void stateChange(IState *state) override;\n\tvirtual void callSecurityCenter(const std::string &msg) override;\n\tvirtual void recoderLog(const std::string &msg) override;\n\nprivate:\n\tIState *m_state;\n};\n\nSafeFrame::SafeFrame() : m_state(&DayState::GetInstance()) {} // 初始化白天\n\nvoid SafeFrame::setClock(int hour){\n\tstd::cout << \"now timw is \" << hour << std::endl;\n\tm_state->doColock(this, hour);\n}\n\nvoid SafeFrame::doAction(ActionType actionType){\n\tswitch (actionType){\n\tcase ActionType::Alarm:\n\t\tm_state->doAlarm(this);\n\t\tbreak;\n\tcase ActionType::Phone:\n\t\tm_state->doPhone(this);\n\t\tbreak;\n\tcase ActionType::Use:\n\tdefault:\n\t\tm_state->doUse(this);\n\t\tbreak;\n\t}\n}\n\nvoid SafeFrame::stateChange(IState *state){\n\tstd::cout << __FUNCTION__ << std::endl;\n\tm_state = state;\n}\n\nvoid SafeFrame::callSecurityCenter(const std::string &msg){\n\tstd::cout << __FUNCTION__ << \" \" << msg << std::endl;\n}\n\nvoid SafeFrame::recoderLog(const std::string &msg){\n\tstd::cout << __FUNCTION__ << \" \" << msg << std::endl;\n}\n\nint main() {\n\tIContext *ctx = new SafeFrame;\n\tfor (int i = 0; i < 24; ++i) {\n\t\tctx->setClock(i);\n\t\tctx->doAction(IContext::ActionType::Use);\n\t\tctx->doAction(IContext::ActionType::Phone);\n\t\tctx->doAction(IContext::ActionType::Alarm);\n\t}\n\tdelete ctx;\n\treturn 0;\n}\n```\n\n## 5 总结\n- State模式将所有与一个特定状态相关的行为都放入一个State的子类对象中，在对象状态切换时，切换相应的对象；但同时维持State的接口，这样实现了具体操作与状态转换之间的解耦。\n- 为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况，因为转换是原子性的——即要么彻底转换过来，要么不转换。\n- 如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。\n\n## 6 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)\n","tags":["设计模式"]},{"title":"设计模式-适配器模式","url":"/2022/07/26/设计模式-适配器模式/","content":"\n## 1 适配器模式\n- 在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。\n- 将一个类的接口转换成客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\n\n## 2 适配器v1\n\n![适配器模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// 目标接口（新接口）\nclass ITarget{\npublic:\n    virtual void process() = 0;\n};\n\n// 遗留接口（老接口）\nclass IAdaptee{\npublic:\n    virtual void foo(int data) = 0;\n    virtual int bar() = 0;\n};\n\n// 遗留类型\nclass OldClass: public IAdaptee{\npublic:\n    virtual void foo(int data){\n        // ...\n    }\n    virtual int bar(){\n        // ...\n    }\n};\n\n// 对象适配器（推荐）\nclass Adapter: public ITarget{ // 继承\nprotected:\n    IAdaptee* pAdaptee; // 组合（多态）\n    \npublic:\n    Adapter(IAdaptee* pAdaptee){\n        this->pAdaptee=pAdaptee;\n    }\n    \n    virtual void process(){\n        int data=pAdaptee->bar();\n        pAdaptee->foo(data);\n    }\n};\n\n// 类适配器（十分不推荐）\nclass Adapter: public ITarget, protected OldClass{ // 多继承（无复用性，绑死OldClass）\n    // ...\n}\n\nint main(){\n    IAdaptee* pAdaptee = new OldClass(); // 老接口\n    ITarget* pTarget = new Adapter(pAdaptee);\n    pTarget->process();\n}\n\nclass stack{ // STL中stack包含deque，看作是种适配器\n    deqeue container;\n    // ...\n};\n\nclass queue{ // STL中queue包含deque，看作是种适配器\n    deqeue container;\n    // ...\n};\n```\n\n## 3 适配器v2（可执行）\n对象适配器（继承新+组合旧）\n```c++\n// The Target defines the domain-specific interface used by the client code.\nclass Target {\npublic:\n\tvirtual ~Target() = default;\n\n\tvirtual std::string Request() const {\n\t\treturn \"Target: The default target's behavior.\";\n\t}\n};\n\n/**\n * The Adaptee contains some useful behavior, but its interface is incompatible\n * with the existing client code. The Adaptee needs some adaptation before the\n * client code can use it.\n */\nclass Adaptee {\npublic:\n\tstd::string SpecificRequest() const {\n\t\treturn \".eetpadA eht fo roivaheb laicepS\";\n\t}\n};\n\n/**\n * The Adapter makes the Adaptee's interface compatible with the Target's\n * interface.\n */\nclass Adapter : public Target {\nprivate:\n\tAdaptee *adaptee_;\n\npublic:\n\tAdapter(Adaptee *adaptee) : adaptee_(adaptee) {}\n\tstd::string Request() const override {\n\t\tstd::string to_reverse = this->adaptee_->SpecificRequest();\n\t\tstd::reverse(to_reverse.begin(), to_reverse.end());\n\t\treturn \"Adapter: (TRANSLATED) \" + to_reverse;\n\t}\n};\n\n\n// The client code supports all classes that follow the Target interface.\nvoid ClientCode(const Target *target) {\n\tstd::cout << target->Request();\n}\n\nint main() {\n\tstd::cout << \"Client: I can work just fine with the Target objects:\\n\";\n\tTarget *target = new Target;\n\tClientCode(target);\n\tstd::cout << \"\\n\\n\";\n\tAdaptee *adaptee = new Adaptee;\n\tstd::cout << \"Client: The Adaptee class has a weird interface. See, I don't understand it:\\n\";\n\tstd::cout << \"Adaptee: \" << adaptee->SpecificRequest();\n\tstd::cout << \"\\n\\n\";\n\tstd::cout << \"Client: But I can work with it via the Adapter:\\n\";\n\tAdapter *adapter = new Adapter(adaptee);\n\tClientCode(adapter);\n\tstd::cout << \"\\n\";\n\tdelete target;\n\tdelete adaptee;\n\tdelete adapter;\n\treturn 0;\n}\n```\n\n\n## 4 总结\n- Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用坏境要求不一致的情况\"，在遗留代码复用、类库迁移等方面非常有用。\n- GoF-23定义了两种Adapter模式的实现结构∶对象适配器和类适配器。但类适配器采用“多继承\"的实现方式，一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。\n- Adapter模式可以实现的非常寻活，不必拘泥于GoF-23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的\n\n## 5 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"生成树","url":"/2022/07/20/生成树/","content":"\n# [Prim](https://leetcode.cn/problems/min-cost-to-connect-all-points/)：从一颗小树长大\n思路和Dijkstra基本一致，唯一不同就是dist记录的是与集合的距离而非与起点的距离\n```c++\n// Leetcode 1584 连接所有点的最小费用\n// points = [[0,0],[2,2],[3,10],[5,2],[7,0]] 求坐标轴上这几个点的最小生成树的路径和\nstruct Node{ // 用来在优先队列里用\n    int node;\n    int dis;\n    bool operator>(const Node& ano) const {\n        return this->dis > ano.dis;\n    }\n};\n\nclass Solution {\npublic:\n    int minCostConnectPoints(vector<vector<int>>& points) {\n        int n = points.size(); // 节点数\n        vector<vector<int>> graph(n, vector<int>(n, INT_MAX));\n        for (int i = 0; i < n; ++i){ // 建图\n            for (int j = 0; j < i; ++j){\n                graph[i][j] = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1]);\n                graph[j][i] = graph[i][j];\n            }\n        }  \n        priority_queue<Node, vector<Node>, greater<Node>> pq;\n        vector<int> dist(n, INT_MAX);\n        pq.push(Node({0, 0})); // 从0开始， 0到0的距离是0\n        int ret = 0;\n        while(!pq.empty()){\n            Node cur = pq.top(); pq.pop();\n            // 跟Dijkstra一样，但人家遇到终点直接可以break\n            // 因为采用优先队列的方式，队列里会有重复，第一次接触的肯定是最优解，后面\n            // 重复的都是大于最优解的，直接跳过，或者你用一个数组，存储对应节点最优dist\n            // 每次存储比较取最小值，但是空间浪费太大了，不如这样好\n            if(dist[cur.node] == 0) continue;\n            dist[cur.node] = 0;\n            ret += cur.dis;\n            for(int i=0; i<n; ++i){\n                if(dist[i] > graph[cur.node][i]){\n                    dist[i] = graph[cur.node][i];\n                    pq.push(Node({i, graph[cur.node][i]}));\n                }\n            }\n        }\n        return ret;\n    }\n};\n```\n\n# [Kruskal](https://leetcode.cn/problems/min-cost-to-connect-all-points/)\n利用并查集的思想\n```c++\n// Leetcode 1584 连接所有点的最小费用\n// points = [[0,0],[2,2],[3,10],[5,2],[7,0]] 求坐标轴上这几个点的最小生成树的路径和\nclass UFSet{\npublic:\n    UFSet(int _n):count(_n), parent(_n, -1){}\n    int getCount(){return count;}\n    void unite(int a, int b){\n        int f1 = find(a);\n        int f2 = find(b);\n        if(f1 == f2) return;\n        if(parent[f1] < parent[f2]){\n            parent[f1] += parent[f2];\n            parent[f2] = f1;\n        }else{\n            parent[f2] += parent[f1];\n            parent[f1] = f2;\n        }\n        -- count;\n    }\n    bool isConnected(int a, int b){\n        return find(a) == find(b);\n    }\n    \nprivate:\n    int find(int pos){\n        if(parent[pos] < 0) return pos;\n        return parent[pos] = find(parent[pos]);\n    }\n    int count; // 连通集的个数\n    vector<int> parent;\n};\n\nstruct Edge{\n    int from;\n    int to;\n    int weight;\n    bool operator>(const Edge& ano) const {\n        return this->weight > ano.weight;\n    }\n};\n\nclass Solution {\npublic:\n    // 都不用建图，直接把边放进去就行了\n    int minCostConnectPoints(vector<vector<int>>& points) {\n        int n = points.size();\n        UFSet ufs(n);\n        priority_queue<Edge, vector<Edge>, greater<Edge>> pq;\n        for(int i=0; i<n; ++i){\n            for(int j=0; j<i; ++j){\n                int weight = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1]);\n                pq.push(Edge({i, j, weight}));\n            }\n        }\n        int res = 0, cnt = 0;\n        while(!pq.empty() && cnt<n-1){\n            Edge cur = pq.top(); pq.pop();\n            if(ufs.isConnected(cur.from, cur.to) == false){ // from和to是图节点名，这里直接以points顺序的下标来表示\n                ufs.unite(cur.from, cur.to);\n                res += cur.weight;\n                ++cnt;\n            }\n        }\n        return res;\n    }\n};\n```","tags":["算法","树"]},{"title":"设计模式-模板方法模式","url":"/2022/07/10/设计模式-模板方法模式/","content":"\n## 1 模板方法模式\n- 模板方法模式是一种行为设计模式， 它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤。\n- 在父类中定义处理流程的框架，在子类中实现具体处理\n- 在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。\n- 定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。\n\n## 2 问题\n```c++\n//程序库开发人员\nclass Library{\npublic:\n\tvoid Step1(){\n\t\t//...\n\t}\n\n    void Step3(){\n\t\t//...\n    }\n\n    void Step5(){\n\t\t//...\n    }\n};\n```\n```c++\n//应用程序开发人员\nclass Application{\npublic:\n\tbool Step2(){\n\t\t//...\n    }\n\n    void Step4(){\n\t\t//...\n    }\n};\n\nint main(){\n\tLibrary lib();\n\tApplication app();\n\t\n\tlib.Step1();\n\tif (app.Step2()){\n\t\tlib.Step3();\n\t}\n\tfor (int i = 0; i < 4; i++){\n\t\tapp.Step4();\n\t}\n\tlib.Step5();\n}\n```\n\n## 3 模板方法\n\n![模板方法模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n//程序库开发人员\nclass Library{\npublic:\n\t//稳定 template method，要求Run方法稳定\n    void Run(){\n        Step1();\n        if (Step2()) { // 支持变化 ==> 虚函数的多态调用\n            Step3(); \n        }\n        for (int i = 0; i < 4; i++){\n            Step4(); // 支持变化 ==> 虚函数的多态调用\n        }\n        Step5();\n    }\n\tvirtual ~Library(){ }\n\n    // 这些步骤一般单独调用没意义，所以设为protected\nprotected:\n\tvoid Step1() { // 稳定\n        //.....\n    }\n\tvoid Step3() {// 稳定\n        //.....\n    }\n\tvoid Step5() { // 稳定\n\t\t//.....\n\t}\n\tvirtual bool Step2() = 0; // 变化\n    virtual void Step4() = 0; // 变化\n};\n```\n```c++\n//应用程序开发人员\nclass Application : public Library {\nprotected:\n\tvirtual bool Step2(){\n\t\t//... 子类重写实现\n    }\n\n    virtual void Step4() {\n\t\t//... 子类重写实现\n    }\n};\n\nint main(){\n\tLibrary* pLib = new Application();\n\tlib->Run();\n\tdelete pLib;\n}\n```\n\n## 4 总结\n- Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用方面的基本实现结构。\n- 除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的反向控制结构是Template Method的典型应用。\n- 在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为protected方法。\n\n## 5 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)\n","tags":["设计模式"]},{"title":"背包问题","url":"/2022/06/28/背包问题/","content":"\n# 01背包\n经典动态规划问题，输入重量数组weight、价值数组value和背包可承载的最大重量整数maxW\n```c++\nclass Solution {\npublic:\n\tint knapsack(vector<int>& weight, vector<int>& value, int maxW) {\n\t\t// 物品数目\n\t\tint kinds = weight.size();\n\t\t// dp数组初始化为二维数组\n\t\tvector<vector<int>> dp(kinds + 1, vector<int>(maxW + 1, 0));\n\t\t// 状态一：可选的目标：0个可选，前一个可选、前两个可选、前三个可选，以此类推（与找零钱不同，物品不能重复选）\n\t\tfor (int c = 1; c <= kinds; c++) {\n\t\t\t// 状态二：当前的可承载重量，0、1、2...maxW\n\t\t\tfor (int w = 1; w <= maxW; w++) {\n\t\t\t\t// 该物品太大以至于当前重量超标：下标越界，直接赋值为“没有该物品时的最优答案”\n\t\t\t\tif (w - weight[c - 1] < 0) \n\t\t\t\t\tdp[c][w] = dp[c - 1][w];\n\t\t\t\t// 比较，“不选择该物品”和“选择该物品”时，哪个价值大\n\t\t\t\telse\n\t\t\t\t\tdp[c][w] = max(dp[c - 1][w], dp[c - 1][w - weight[c - 1]] + value[c - 1]);\n\t\t\t}\n\t\t}\n\t\treturn dp[kinds][maxW];\n\t}\n};\n```\n\n# [完全背包](https://leetcode.cn/problems/coin-change-2/)\n\n### 标准DP\n```c++\nclass Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n        int n = coins.size();\n        vector<vector<int>> dp(n+1, vector<int>(amount+1, 0));\n\t\t// base case 这里也可以只dp[0][0]=1，但下面的二重循环的j必须从0开始了\n\t\t// 从含义上来说，还是在这里初始化一列全1比较符合定义\n\t\tfor(int s = 0; s<=n; ++s)\n\t\t\tdp[s][0] = 1;\n        for(int i=1; i<=n; ++i){\n            for(int j=1; j<=amount; ++j){\n                if(coins[i-1] > j)\n\t\t\t\t\tdp[i][j] = dp[i-1][j];\n                else // dp[i][j] = dp[i-1][j] + dp[i-1][j-coins[i-1]];一个数字之差就变成不可重复选取了\n                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]];\n            }\n        }\n        return dp[n][amount];\n    }\n};\n```\n\n### 压缩一下\n```c++\nclass Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n        int n = coins.size();\n        vector<int> dp(amount+1, 0);\n\t\tdp[0] = 1;\n        for(int i=1; i<=n; ++i){\n            for(int j=1; j<=amount; ++j){\n                if(coins[i-1] <= j)\n                    dp[j] = dp[j] + dp[j-coins[i-1]]; // 由于需要用到当前行更新的值，正好不用倒过来了，和下面子集背包压缩做对比\n            }\n        }\n        return dp[amount];\n    }\n};\n```\n\n# [子集背包](https://leetcode.cn/problems/partition-equal-subset-sum/)\n\n### 标准DP\n```c++\n// 子集背包问题\nclass Solution {\npublic:\n    // sum(A1) == sum(A2) -> target = sum(A)/2\n    bool canPartition(vector<int>& nums) {\n        int sum = 0;\n        for (auto e : nums) sum += e;\n        if (sum % 2) // 和必须是偶数\n            return false;\n        int target = sum >> 1;\n        int n = nums.size();\n        vector<vector<bool>> dp(n + 1, vector<bool>(target + 1, 0)); // 用布尔\n        dp[0][0] = 1; // 初始化\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= target; j++) {\n                if (nums[i - 1] > j)\n                    dp[i][j] = dp[i - 1][j];\n                else\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];\n            }\n        }\n        return dp[n][target] > 0;\n    }\n};\n\n```\n\n### 压缩一下\n```c++\n// 子集背包问题\nclass Solution {\npublic:\n    // sum(A1) == sum(A2) -> target = sum(A)/2\n    bool canPartition(vector<int>& nums) {\n        int sum = 0;\n        for (auto e : nums) sum += e;\n        if (sum % 2) // 和必须是偶数\n            return false;\n        int target = sum >> 1;\n        int n = nums.size();\n        vector<bool> dp(target + 1, false); // 用布尔\n        dp[0] = true; // 初始化\n        for (int i = 1; i <= n; i++) {\n            for (int j = target; j >= 0; j--) { // 必须从后往前，不然会覆盖之前的数据\n                if (nums[i - 1] > j)\n                    dp[j] = dp[j];\n                else\n                    dp[j] = dp[j] || dp[j - nums[i - 1]];\n            }\n        }\n        return dp[target] > 0;\n    }\n};\n```\n\n# 参考\n[labuladong](https://labuladong.github.io/algo/3/27/)","tags":["算法","动态规划"]},{"title":"设计模式-迭代器模式","url":"/2022/06/16/设计模式-迭代器模式/","content":"\n## 1 迭代器模式\n- 在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素;同时这种“诱明遍历”也为“同一种算法在多种集合对象上进行操作”提供了可能。\n- 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露（稳定）该对象的内部表示\n- 访问一个聚合对象的内容而无需暴露其内部实现；支持对聚合对象的多种遍历；为遍历不同的聚合结构提供统一的接口；健壮性考虑：遍历的同时更改迭代器所在聚合结构，会导致问题\n- **该篇介绍的是基于面向对象的迭代器实现，但是C++泛型编程迭代器已经淘汰掉面向对象的迭代器，然而思想一样，技术更新而已**\n\n## 2 迭代器v1\n\n![迭代器模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n/*\nC++现在都是基于模板的迭代器，模板又称为编译时多态，速度肯定比虚函数的运行时多态要好很多\n但是java、C#、PHP、Swift还是这种基于虚函数的迭代器（因为不支持编译时的模板机制）\n*/\ntemplate<typename T>\nclass Iterator{\npublic:\n    virtual void first() = 0;\n    virtual void next() = 0;\n    virtual bool isDone() const = 0;\n    virtual T& current() = 0;\n};\n\ntemplate<typename T>\nclass MyCollection{\npublic:\n    Iterator<T>* GetIterator(){\n        // ...\n    }\n};\n\ntemplate<typename T>\nclass CollectionIterator : public Iterator<T>{\n    MyCollection<T> mc;\npublic:\n    CollectionIterator(const MyCollection<T>& c): mc(c){ }\n    \n    void first() override {\n        // ...\n    }\n    void next() override {\n        // ...\n    }\n    bool isDone() const override{\n        // ...\n    }\n    T& current() override{\n        // ...\n    }\n};\n\nvoid MyAlgorithm(){\n    MyCollection<int> mc;\n    Iterator<int>* iter = mc.GetIterator();\n    for (iter->first(); !iter->isDone(); iter->next()){ // 多态\n        cout << iter->current() << endl; // 多态\n    }\n}\n```\n\n## 3 迭代器v2（可执行）\n```c++\n/**\n * C++ has its own implementation of iterator that works with a different\n * generics containers defined by the standard library.\n */\ntemplate <typename T, typename U>\nclass Iterator {\npublic:\n\ttypedef typename std::vector<T>::iterator iter_type;\n\tIterator(U *p_data) : m_p_data_(p_data) {\n\t\tm_it_ = m_p_data_->m_data_.begin();\n\t}\n\tvoid First() {\n\t\tm_it_ = m_p_data_->m_data_.begin();\n\t}\n\tvoid Next() {\n\t\tm_it_++;\n\t}\n\tbool IsDone() {\n\t\treturn (m_it_ == m_p_data_->m_data_.end());\n\t}\n\titer_type Current() {\n\t\treturn m_it_;\n\t}\n\nprivate:\n\tU *m_p_data_;\n\titer_type m_it_;\n};\n\n/**\n * Generic Collections/Containers provides one or several methods for retrieving\n * fresh iterator instances, compatible with the collection class.\n */\n\ntemplate <class T>\nclass Container {\n\tfriend class Iterator<T, Container>;\n\npublic:\n\tvoid Add(T a) {\n\t\tm_data_.push_back(a);\n\t}\n\tIterator<T, Container> *CreateIterator() {\n\t\treturn new Iterator<T, Container>(this);\n\t}\n\nprivate:\n\tstd::vector<T> m_data_;\n};\n\nclass Data {\npublic:\n\tData(int a = 0) : m_data_(a) {}\n\tvoid set_data(int a) {\n\t\tm_data_ = a;\n\t}\n\tint data() {\n\t\treturn m_data_;\n\t}\n\nprivate:\n\tint m_data_;\n};\n\n/**\n * The client code may or may not know about the Concrete Iterator or Collection\n * classes, for this implementation the container is generic so you can used\n * with an int or with a custom class.\n */\nvoid ClientCode() {\n\tstd::cout << \"__________Iterator with int__________\" << std::endl;\n\tContainer<int> cont;\n\n\tfor (int i = 0; i < 10; i++) {\n\t\tcont.Add(i);\n\t}\n\n\tIterator<int, Container<int>> *it = cont.CreateIterator();\n\tfor (it->First(); !it->IsDone(); it->Next()) {\n\t\tstd::cout << *it->Current() << std::endl;\n\t}\n\n\tContainer<Data> cont2;\n\tData a(100), b(1000), c(10000);\n\tcont2.Add(a);\n\tcont2.Add(b);\n\tcont2.Add(c);\n\n\tstd::cout << \"__________Iterator with custom Class__________\" << std::endl;\n\tIterator<Data, Container<Data>> *it2 = cont2.CreateIterator();\n\tfor (it2->First(); !it2->IsDone(); it2->Next()) {\n\t\tstd::cout << it2->Current()->data() << std::endl;\n\t}\n\tdelete it;\n\tdelete it2;\n}\n\nint main() {\n\tClientCode();\n\treturn 0;\n}\n```\n\n## 4 迭代器v3（可执行）\n```c++\ntemplate <class Item>\nclass Iterator {\npublic:\n\tvirtual ~Iterator() {}\n\tvirtual bool hasNext() = 0;\n\tvirtual Item next() = 0;\n};\n\ntemplate <class Item>\nclass Aggregate{\npublic:\n\tvirtual ~Aggregate() {}\n\tvirtual Iterator<Item> *CreateIterator() = 0;\n};\n\n// 前置声明\ntemplate <class Item>\nclass BookSelfIterator;\n\ntemplate <class Item>\nclass BookSelf : public Aggregate<Item> {\npublic:\n\tBookSelf(int maxSize) {\n\t\tm_books.resize(maxSize, std::string(\"\"));\n\t}\n\tIterator<Item>* CreateIterator() override {\n\t\treturn new BookSelfIterator<Item>(this); // 传入this\n\t}\n\tItem GetBookAt(int index) const {\n\t\treturn m_books.at(index);\n\t}\n\tvoid appendBoox(const Item &book) {\n\t\tm_books.emplace_back(book);\n\t}\n\tint length() const {\n\t\treturn static_cast<int>(m_books.size());\n\t}\nprivate:\n\tstd::vector<Item> m_books;\n};\n\ntemplate <class Item>\nclass BookSelfIterator : public Iterator<Item> {\npublic:\n\tBookSelfIterator(BookSelf<Item> *bookSelf) : m_bookSelf(bookSelf) {}\n\tvirtual bool hasNext() override {\n\t\treturn m_bookSelf->length() > 0 && m_currentIndex < m_bookSelf->length() - 1;\n\t}\n\tvirtual Item next() override {\n\t\tm_currentIndex++;\n\t\treturn m_bookSelf->GetBookAt(m_currentIndex);\n\t}\n\nprivate:\n\tBookSelf<Item> *m_bookSelf;\n\tint m_currentIndex = -1;\n};\n\n\nclass Book {\npublic:\n\tBook(const std::string &name) : m_name(name) {}\n\tconst std::string &GetName() {\n\t\treturn m_name;\n\t}\nprivate:\n\tstd::string m_name;\n};\n\nint main() {\n\tBookSelf<Book> container(0);\n\tcontainer.appendBoox(Book(string(\"name1\")));\n\tcontainer.appendBoox(Book(string(\"name2\")));\n\tcontainer.appendBoox(Book(string(\"name3\")));\n\tauto itor = container.CreateIterator();\n\twhile (itor->hasNext()) {\n\t\tBook book = itor->next();\n\t\tcout << book.GetName() << endl;\n\t}\n\tdelete itor;\n\treturn 0;\n}\n```\n\n## 5 总结\n- 迭代抽象：访问一个聚合对象的内容而无需暴露它的内部表示。\n- 迭代多态：为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。\n- 迭代器的健壮性考虑：遍历的同时更改迭代器所在的集合结构，会导致问题。\n\n## 6 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"设计模式-抽象工厂","url":"/2022/06/06/设计模式-抽象工厂/","content":"## 1 抽象工厂模式\n- 在软件系统中，经常面临着“一系列相互依赖的对象”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。\n- 如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作”的紧耦合？\n- 提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。\n\n## 2 问题\n\n```c++\nclass EmployeeDAO{\npublic:\n    vector<EmployeeDO> GetEmployees(){\n        SqlConnection* connection = new SqlConnection(); // 耦合\n        connection->ConnectionString(\"...\");\n\n        SqlCommand* command = new SqlCommand(); // 耦合\n        command->CommandText(\"...\");\n        command->SetConnection(connection);\n\n        SqlDataReader* reader = command->ExecuteReader();\n        while (reader->Read()){\n            // ...\n        }\n    }\n};\n```\n\n## 3 尝试简单工厂模式\n系列对象的关联性丢失，产生大量类，代码臃肿不堪\n```c++\n// 先尝试用简单工厂模式解决...\n// 数据库访问有关的基类\nclass IDBConnection{\n    // ...\n};\nclass IDBConnectionFactory{\npublic:\n    virtual IDBConnection* CreateDBConnection()=0;\n};\n\n\nclass IDBCommand{\n    // ...\n};\nclass IDBCommandFactory{\npublic:\n    virtual IDBCommand* CreateDBCommand()=0;\n};\n\n\nclass IDBDataReader{\n    // ...\n};\nclass IDBDataReaderFactory{\npublic:\n    virtual IDBDataReader* CreateDataReader()=0;\n};\n\n\n\n// 支持SQL Server\nclass SqlConnection: public IDBConnection{\n    // ...\n};\nclass SqlConnectionFactory:public IDBConnectionFactory{\n    // ...\n};\n\nclass SqlCommand: public IDBCommand{\n    // ...\n};\nclass SqlCommandFactory:public IDBCommandFactory{\n    // ...\n};\n\nclass SqlDataReader: public IDataReader{\n    // ...\n};\nclass SqlDataReaderFactory:public IDBDataReaderFactory{\n    // ...\n};\n\n\n// 支持Oracle\nclass OracleConnection: public IDBConnection{\n    // ...\n};\nclass OracleConnectionFactory: public IDBConnectionFactory{\n    // ...\n}\n\nclass OracleCommand: public IDBCommand{\n    // ...\n};\nclass OracleCommandFactory: publc IDBCommandFactory{\n    // ...\n}\n\nclass OracleDataReader: public IDataReader{\n    // ...\n};\nclass OracleDataReaderFactory: public IDBDataReaderFactory{\n    // ...\n}\n\nclass EmployeeDAO{\n    IDBConnectionFactory* dbConnectionFactory;\n    IDBCommandFactory* dbCommandFactory;\n    IDBDataReaderFactory* dataReaderFactory;\n    \npublic:\n    vector<EmployeeDO> GetEmployees(){\n        IDBConnection* connection = dbConnectionFactory->CreateDBConnection();\n        connection->ConnectionString(\"...\");\n\n        IDBCommand* command = dbCommandFactory->CreateDBCommand();\n        command->CommandText(\"...\");\n        command->SetConnection(connection); //关联性\n\n        IDBDataReader* reader = command->ExecuteReader(); //关联性\n        while (reader->Read()){\n            // ...\n        }\n    }\n};\n```\n\n## 4 抽象工厂（family factory）\n\n![抽象工厂模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// family factory\n// 数据库访问有关的基类\nclass IDBConnection{\n    \n};\nclass IDBCommand{\n    \n};\nclass IDBDataReader{\n    \n};\n\n// 抽象工厂基类\nclass IDBFactory{\npublic:\n    virtual IDBConnection* CreateDBConnection()=0;\n    virtual IDBCommand* CreateDBCommand()=0;\n    virtual IDBDataReader* CreateDataReader()=0;\n    \n};\n\n\n// 支持SQL Server\nclass SqlConnection: public IDBConnection{\n    \n};\nclass SqlCommand: public IDBCommand{\n    \n};\nclass SqlDataReader: public IDBDataReader{\n    \n};\n// SQL工厂\nclass SqlDBFactory:public IDBFactory{\npublic:\n    virtual IDBConnection* CreateDBConnection(){\n        return new SqlConnection();\n    }\n    virtual IDBCommand* CreateDBCommand(){\n        return new SqlCommand();\n    }\n    virtual IDBDataReader* CreateDataReader(){\n        return new SqlDataReader();\n    }\n};\n\n\n// 支持Oracle\nclass OracleConnection: public IDBConnection{\n    \n};\nclass OracleCommand: public IDBCommand{\n    \n};\nclass OracleDataReader: public IDBDataReader{\n    \n};\n// Oracle工厂\nclass OracleDBFactory: public IDBFactory{\npublic:\n    virtual IDBConnection* CreateDBConnection(){\n        return new OracleConnection();\n    }\n    virtual IDBCommand* CreateDBCommand(){\n        return new OracleCommand();\n    }\n    virtual IDBDataReader* CreateDataReader(){\n        return new OracleDataReader();\n    }\n}\n\n\nclass EmployeeDAO{\n    IDBFactory* dbFactory; // 抽象工厂指针\n    \npublic:\n    vector<EmployeeDO> GetEmployees(){\n        IDBConnection* connection = dbFactory->CreateDBConnection();\n        connection->ConnectionString(\"...\");\n\n        IDBCommand* command = dbFactory->CreateDBCommand();\n        command->CommandText(\"...\");\n        command->SetConnection(connection); //关联性\n\n        IDBDataReader* reader = command->ExecuteReader(); //关联性\n        while (reader->Read()){\n            // ...\n        }\n\n    }\n};\n```\n\n## 5 总结\n- 如果没有应对“多系列对象构建”的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。\n- “系列对象”指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。\n- Abstract Factory模式主要在于应对“新系列”的需求变动。其缺点在于难以应对“新对象”的需求变动。（新系列数据库：OK；新方法IDBMethod：NO！）\n\n## 6 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"设计模式-工厂模式","url":"/2022/06/06/设计模式-工厂模式/","content":"\n\n## 1 工厂模式\n- 父类决定实例的生成方式，但并不决定所要生成具体的类，具体处理全部交给子类处理。 将生成实例的框架与具体的实例类解耦。\n- 在软件系统中，经常面临创建对象的工作，由于需求的变化，需要创建的对象的具体类型经常变化\n- 如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“具体对象创建工作”的紧耦合？\n\n## 2 问题\n```c++\n// FileSplitter.cpp\nclass ISplitter{\npublic:\n    virtual void split()=0;\n    virtual ~ISplitter(){}\n};\n\n// 多个具体的文件分割器\nclass BinarySplitter : public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass TxtSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass PictureSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass VideoSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n```\n\n```c++\n// MainForm.cpp\nclass MainForm : public Form{\npublic:\n\tvoid Button1_Click(){\n\t\t// 抽象依赖* ptr = new 具体依赖(); 违背依赖倒置原则，这样肯定不行的！\n\t\tISplitter * splitter = new BinarySplitter(); //依赖具体类\n        splitter->split();\n\t}\n};\n```\n\n## 3 工厂模式\n定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类\n\n![工厂模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// ---- 抽象基类 ----\nclass ISplitter{\npublic:\n    virtual void split()=0;\n    virtual ~ISplitter(){}\n};\n\n// ---- 工厂基类 ----\nclass SplitterFactory{\npublic:\n    virtual ISplitter* CreateSplitter()=0;\n    virtual ~SplitterFactory(){}\n};\n\n//  ---- 具体类 ----\nclass BinarySplitter : public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass TxtSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass PictureSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\nclass VideoSplitter: public ISplitter{\n    virtual void split(){\n        // ...\n    }\n};\n\n// ---- 具体工厂 ----\nclass BinarySplitterFactory: public SplitterFactory{\npublic:\n    virtual ISplitter* CreateSplitter(){\n        return new BinarySplitter();\n    }\n};\n\nclass TxtSplitterFactory: public SplitterFactory{\npublic:\n    virtual ISplitter* CreateSplitter(){\n        return new TxtSplitter();\n    }\n};\n\nclass PictureSplitterFactory: public SplitterFactory{\npublic:\n    virtual ISplitter* CreateSplitter(){\n        return new PictureSplitter();\n    }\n};\n\nclass VideoSplitterFactory: public SplitterFactory{\npublic:\n    virtual ISplitter* CreateSplitter(){\n        return new VideoSplitter();\n    }\n};\n```\n\n```c++\n// 虽然具体工厂总会在某个地方new出来，但是MainForm没有具体类的依赖了，变化的地方被赶出去了（变化没法消灭），猫被关进笼子里\nclass MainForm : public Form{\n    SplitterFactory*  factory; // 工厂\npublic:\n    MainForm(SplitterFactory*  factory){\n        this->factory=factory;\n    }\n\tvoid Button1_Click(){\n\t\tISplitter * splitter = factory->CreateSplitter(); // 形式上叫“多态new”\n        splitter->split();\n\t}\n};\n```\n## 4 总结\n- Factory Method模式用于隔离类对象的使用者和具体类型之间的 耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。\n- Factory Method模式通过面向对象的手法，将所要创建的具体对 象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。\n- Factory Method模式解决“单个对象”的需求变化。缺点在于要 求创建方法/参数相同。\n\n## 5 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"设计模式-策略模式","url":"/2022/05/27/设计模式-策略模式/","content":"\n## 1 策略模式\n- 定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）。\n- 将算法与其它部分分离开，只定义与算法相关的接口，然后在程序中以委托的方式来使用。使用委托这种弱关联关系可以很方便地整体替换算法。程序运行过程中也可以替换算法\n- 策略模式是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。\n\n## 2 问题\n```c++\nenum TaxBase {\n\tCN_Tax,\n\tUS_Tax,\n\tDE_Tax,\n\tFR_Tax //更改：新添加\n};\n\nclass SalesOrder{\n    TaxBase tax;\npublic:\n    double CalculateTax(){\n        //...\n        \n        if (tax == CN_Tax){\n            //CN***********\n        }\n        else if (tax == US_Tax){\n            //US***********\n        }\n        else if (tax == DE_Tax){\n            //DE***********\n        }\n\t\telse if (tax == FR_Tax){  //更改\n\t\t\t//...\n\t\t}\n        //....\n     }\n};\n```\n\n## 3 策略v1\n\n![策略模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// 抽象基类\nclass TaxStrategy{ // 一般就放一个方法，当然也会放几个相关的方法，但是一般方法数都不多\npublic:\n    virtual double Calculate(const Context& context)=0;\n    virtual ~TaxStrategy(){}\n};\n\n// 具体类\nclass CNTax : public TaxStrategy{\npublic:\n    virtual double Calculate(const Context& context){\n        // ***********\n    }\n};\n\nclass USTax : public TaxStrategy{\npublic:\n    virtual double Calculate(const Context& context){\n        // ***********\n    }\n};\n\nclass DETax : public TaxStrategy{\npublic:\n    virtual double Calculate(const Context& context){\n        // ***********\n    }\n};\n\n// 从而方便地进行扩展\n// *********************************\nclass FRTax : public TaxStrategy{\npublic:\n\tvirtual double Calculate(const Context& context){\n\t\t//.........\n\t}\n};\n\nclass SalesOrder{ // 稳定\nprivate:\n    TaxStrategy* strategy;\n\npublic:\n    SalesOrder(StrategyFactory* strategyFactory){\n        this->strategy = strategyFactory->NewStrategy(); // 工厂模式\n    }\n    ~SalesOrder(){\n        delete this->strategy;\n    }\n\n    public double CalculateTax(){\n        //...\n        Context context();\n        double val = strategy->Calculate(context); //多态调用\n        //...\n    }\n};\n```\n\n## 4 策略v2（可执行）\n```c++\n/**\n * The Strategy interface declares operations common to all supported versions\n * of some algorithm.\n *\n * The Context uses this interface to call the algorithm defined by Concrete\n * Strategies.\n */\nclass Strategy {\npublic:\n\tvirtual ~Strategy() = default;\n\tvirtual std::string doAlgorithm(const std::string& data) const = 0;\n};\n\n// The Context defines the interface of interest to clients.\nclass Context {\n\t/**\n\t * The Context maintains a reference to one of the Strategy\n\t * objects. The Context does not know the concrete class of a strategy. It\n\t * should work with all strategies via the Strategy interface.\n\t */\nprivate:\n\tstd::unique_ptr<Strategy> strategy_;\n\t/**\n\t * Usually, the Context accepts a strategy through the constructor, but also\n\t * provides a setter to change it at runtime.\n\t */\npublic:\n\texplicit Context(std::unique_ptr<Strategy> &&strategy = {}) : strategy_(std::move(strategy)) {}\n\n\t// Usually, the Context allows replacing a Strategy object at runtime.\n\tvoid set_strategy(std::unique_ptr<Strategy> &&strategy) {\n\t\tstrategy_ = std::move(strategy);\n\t}\n\t/**\n\t * The Context delegates some work to the Strategy object instead of\n\t * implementing +multiple versions of the algorithm on its own.\n\t */\n\tvoid doSomeBusinessLogic() const {\n\t\tif (strategy_) {\n\t\t\tstd::cout << \"Context: Sorting data using the strategy (not sure how it'll do it)\\n\";\n\t\t\tstd::string result = strategy_->doAlgorithm(\"aecbd\");\n\t\t\tstd::cout << result << \"\\n\";\n\t\t}\n\t\telse {\n\t\t\tstd::cout << \"Context: Strategy isn't set\\n\";\n\t\t}\n\t}\n};\n\n/**\n * Concrete Strategies implement the algorithm while following the base Strategy\n * interface. The interface makes them interchangeable in the Context.\n */\nclass ConcreteStrategyA : public Strategy {\npublic:\n\tstd::string doAlgorithm(const std::string& data) const override {\n\t\tstd::string result(data);\n\t\tstd::sort(std::begin(result), std::end(result));\n\n\t\treturn result;\n\t}\n};\nclass ConcreteStrategyB : public Strategy {\n\tstd::string doAlgorithm(const std::string& data) const override {\n\t\tstd::string result(data);\n\t\tstd::sort(std::begin(result), std::end(result), std::greater<>());\n\n\t\treturn result;\n\t}\n};\n/**\n * The client code picks a concrete strategy and passes it to the context. The\n * client should be aware of the differences between strategies in order to make\n * the right choice.\n */\n\nvoid clientCode() {\n\tContext context(std::make_unique<ConcreteStrategyA>());\n\tstd::cout << \"Client: Strategy is set to normal sorting.\\n\";\n\tcontext.doSomeBusinessLogic();\n\tstd::cout << \"\\n\";\n\tstd::cout << \"Client: Strategy is set to reverse sorting.\\n\";\n\tcontext.set_strategy(std::make_unique<ConcreteStrategyB>());\n\tcontext.doSomeBusinessLogic();\n}\n\nint main() {\n\tclientCode();\n\treturn 0;\n}\n```\n\n## 5 总结\n- Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。\n- Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要Strategy模式。\n- 如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。（单例模式）\n\n## 6 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"并查集","url":"/2022/05/23/并查集/","content":"# 并查集\n- 一般用于快速判断两个元素是否同属于一个集合\n- 数组形式表示树结构\n- 插入元素会被映射到从0开始的顺序整数中\n\n# 实现技巧\n- 路径压缩：在find时，通过递归并返回找到的祖宗节点并赋值，可以达成find后降低树高的功效\n- 按秩归并：在unite时，其中一方会挂在另一方的门下，所以希望“小的挂到大的上面”，以此来产生结果高度更小的树，有两种方式：\n  - 高度：树高：S[Root]=-树高，代码多一步判断：即：[两个树相同高度时，增加树高](https://github.com/fkjkkll/My-Algorithm/blob/master/3.3%20tree(3)/3.4%20并查集-按秩归并-高度.jpg)\n  - 数目（推荐）：S[Root]=-元素个数。子孙节点数目，可以通过利用根节点来达成，根节点之前是-1，现在改为-n，其中n是包含根节点的整个树的节点数目\n\n# [LC.990](https://leetcode.cn/problems/satisfiability-of-equality-equations/)\n```c++\nclass UF {\npublic:\n    UF(int _n) :count(_n), parent(_n, -1) {}\n    int getCount() { return count; }\n    bool isConnected(int a, int b) {\n        int class1 = find(a);\n        int class2 = find(b);\n        return class1 == class2;\n    }\n    void unite(int a, int b) {\n        int class1 = find(a);\n        int class2 = find(b);\n        if (class1 == class2)\n            return;\n        if (parent[class1] < parent[class2]) { // 按秩归并\n            parent[class1] += parent[class2];\n            parent[class2] = class1;\n        }\n        else {\n            parent[class2] += parent[class1];\n            parent[class1] = class2;\n        }\n        --count;\n    }\n\nprivate:\n    int find(int pos) {\n        if (parent[pos] < 0)\n            return pos;\n        return parent[pos] = find(parent[pos]); // 路径压缩\n    }\n\n    int count;\n    vector<int> parent;\n};\n\n// leetcode 990\nclass Solution {\npublic:\n    bool equationsPossible(vector<string>& equations) {\n        UF a(26);\n        for (int i = 0; i < equations.size(); i++) {\n            if (equations[i][1] == '=') {\n                a.unite(equations[i][0] - 97, equations[i][3] - 97);\n            }\n        }\n        for (int i = 0; i < equations.size(); i++) {\n            if (equations[i][1] == '!') {\n                if (a.isConnected(equations[i][0] - 97, equations[i][3] - 97))\n                    return false;\n            }\n        }\n        return true;\n    }\n};\n```","tags":["算法","特殊","树"]},{"title":"数据库小知识（持续更新）","url":"/2022/05/17/数据库小知识（持续更新）/","content":"## 1. 缓存雪崩：\n布隆过滤器(1970)、分布式锁\n\n比如说双十一某宝，redis缓存中key大面积失效，导致某宝直接和数据库进行沟通，把请求直接打到数据库\n解决方法：\n\n1. 随机初始化缓存失效时间，让其不要在同一时间失效\n2. redis一般都是集群部署，我们把热点key放到不同的节点上去，让热点的缓存平均的分布在不同的redis节点上\n3. 最暴力的方法：不设置缓存的失效时间，让它永远不失效，或者跑定时任务，让它定时刷这个缓存让其不失效\n\n## 2. 缓存穿透：\n指缓存与数据库中都没有所要请求的数据：比如请求id=-1的数据，redis没有，直接打到数据库，数据库返回空。大量的这种请求导致数据库繁忙（数据库的主键从0开始递增，没有负数）\n解决方法：\n\n1. 每次无论数据库查出什么结果，是空还是有值，都会缓存到redis里面。\n2. 把对面IP拉黑\n3. 对参数合法性做检测\n4. 使用布隆过滤器（好方法）\n\n## 3. 缓存击穿：\n比如说某宝，某个商品秒杀(该key事先存入redis缓存)，大量用户抢购，但是某时刻该redis缓存到达失效时间失效了，一瞬间大量该key的请求打到数据库上\n\n1. 让这个缓存永远不过期（不好）\n2. 分布式锁：失效时某个查询数据库，然后加锁，其他的查询就不能查询数据库了，就先睡几毫米然后重新去redis里面查（好方法，实现方式有互斥锁、zookeeper、redis）\n3. （雪崩是多key失效，击穿是单key）\n\n## 4. 布隆过滤器\n插入时利用多个hash函数映射到一串二进制数组中，从0置1；查询时，多个hash对应的二进制位置必须都是1才能证明该数据存在\n\n改造加强版：布谷鸟过滤器\n\n优点：\n\n1. 二进制数组组成的数据，占用空间很小\n2. 插入和查询的速度很快\n3. 保密性很好\n\n缺点：\n\n1. 很难做删除操作\n2. 存在误判的情况（解决不了，只能减少出现的概率）\n\n存在就再去查一次数据库，误判也没关系；但不存在，那就是真的不存在。性能也比每次都查询数据库好得多。\n\n代码中可以设置误判率，但是设置太小，性能速度就变得太差了（要增大布隆过滤器二进制数组的大小以及要采用更多的hash函数）\n\n## 5. 索引如何查到真实数据的\nInnoDB是聚簇索引（即将索引和数据放在一个文件里）\nMyISAM是非聚簇索引\n\n### innodb\n\n- 主索引树和辅助索引树\n- 主索引树：以主键id位key，叶子节点直接存储数据记录（一行）\n\n### 辅助索引树：\n例如`select * from user_info where user_name = 'Jim'`会创建以user_name为key的索引树。其叶子节点存储的是主键key，拿到key后再去主索引树去查找相应的数据（即，回表查询）\n\n### MyISAM\n无论是主键索引还是普通索引，查找数据的流程都是一样的，叶子节点存储的是数据的物理地址，拿到地址后再去内存或磁盘获得数据\n\n### 延伸话题\n1、[为什么不要使用select *，而是尽量用覆盖索引](https://www.jianshu.com/p/8991cbca3854)\n\n## 6. 索引为什么会失效\n索引失效主要针对联合索引。联合索引在B+树上的排序是按照字典序，即第一个字段、第二个字段...比如说(a, b)，只有a相同下，b才是有序的；如果a有多个值，那b基本上就无序了`(1, 1)(1, 2)(1, 3)(1, 4)(2, 1)(2, 2)(2, 3)(2, 4)...`\n\n### 最佳左前缀法则\n`EXPLAIN SELECT * from test_user where a = 1 and b = 1`\n\n### 范围查找的右边它索引会失效：\n`EXPLAIN SELECT * from test_user where a>1 and b=1`\n\n### like会失效\n`EXPLAIN SELECT * from test_user where a like \"1%\"`\n- \"1%\": 查找以1开头的数据\n- \"%1\": 查找以1结尾的数据\n- \"%1%\": 查找任意位置有1的数据\n\n## 7. 为什么采用B+树索引\n\n### hash索引：\n\n1. 虽然单次的访问很快，但是是无序的，如果采用hash索引的话，无法进行范围查找以及排序操作\n2. 存在hash碰撞问题，速度就慢下来了。\n\n### 平衡二叉树索引：\n\n1. 随着树深增加，查找速度逐渐变慢\n2. 致命缺点：每次都是一个一个查找，不好进行范围查找\n\n### B树索引：\n\n1. 虽然解决了树高问题，但是依旧不好进行范围查找\n（优点一个结点多放几个值，树可以变矮，虽然有内部查找，即一个节点内进行顺序查找的情况存在，但是内部可以理解为内存比较，不同节点可以理解为磁盘IO，内存比较就可以忽略不计了！）\n\n### B+树索引：\n\n1. 解决了范围查找问题\n2. 最下层 [叶子节点] 采用链表的方式顺序排序，上面的 [非叶子节点] 只存储索引key，不存储数据value，因此也不会浪费很多空间，[叶子结点] 既存key也存value(数据地址)\n3. 排序的时候要使用索引排序，因为已经排序好了，按照索引排序就不会产生文件的排序\n","tags":["Others"]},{"title":"设计模式-观察者模式","url":"/2022/05/08/设计模式-观察者模式/","content":"\n## 1 观察者模式\n- 在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系” ——一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。\n- 定义对象间的一种一对多（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。\n- 观察对象的状态发生变化时，通知给观察者。 观察者模式适用于根据对象状态进行相应处理的场景。\n\n## 2 问题\n\n```c++\n// FileSplitter.cpp\nclass FileSplitter{\n\tstring m_filePath;\n\tint m_fileNumber;\n\tProgressBar* m_progressBar; // 不能应对变化，和具体某个平台的进度条绑死：例如UI进度条、无界面的Shell进度条等等\n\npublic:\n\tFileSplitter(const string& filePath, int fileNumber, ProgressBar* progressBar) :\n\t\tm_filePath(filePath), \n\t\tm_fileNumber(fileNumber),\n\t\tm_progressBar(progressBar){\n\t}\n\n\tvoid split(){\n\t\t//1.读取大文件\n\t\t// ...\n\n\t\t//2.分批次向小文件中写入\n\t\tfor (int i = 0; i < m_fileNumber; i++){\n\t\t\t//...\n\t\t\tfloat progressValue = m_fileNumber;\n\t\t\tprogressValue = (i + 1) / progressValue;\n\t\t\tm_progressBar->setValue(progressValue);\n\t\t}\n\t}\n};\n```\n```c++\n// MainForm.cpp\nclass MainForm : public Form{\n\tTextBox* txtFilePath;\n\tTextBox* txtFileNumber;\n\tProgressBar* progressBar;\n\npublic:\n\tvoid Button1_Click(){\n\t\tstring filePath = txtFilePath->getText();\n\t\tint number = atoi(txtFileNumber->getText().c_str());\n\t\tFileSplitter splitter(filePath, number, progressBar);\n\t\tsplitter.split();\n\t}\n};\n```\n\n## 3 观察者v1\n\n![观察者模式](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/CPP/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.jpg)\n\n```c++\n// FileSplitter.cpp\nclass FileSplitter{\n\tstring m_filePath;\n\tint m_fileNumber;\n\tList<IProgress*>  m_iprogressList; // 抽象通知机制，支持注册多个观察者！！！\n\t\npublic:\n\tFileSplitter(const string& filePath, int fileNumber) :\n\t\tm_filePath(filePath), \n\t\tm_fileNumber(fileNumber){\n\t}\n\n\tvoid split(){\n\t\t//1.读取大文件\n\t\t// ...\n\n\t\t//2.分批次向小文件中写入\n\t\tfor (int i = 0; i < m_fileNumber; i++){\n\t\t\t//...\n\t\t\tfloat progressValue = m_fileNumber;\n\t\t\tprogressValue = (i + 1) / progressValue;\n\t\t\tonProgress(progressValue); // 发送通知\n\t\t}\n\t}\n\n\tvoid addIProgress(IProgress* iprogress){ // 添加观察者\n\t\tm_iprogressList.push_back(iprogress);\n\t}\n\n\tvoid removeIProgress(IProgress* iprogress){ // 移除观察者\n\t\tm_iprogressList.remove(iprogress);\n\t}\n\nprotected:\n\tvirtual void onProgress(float value){\n\t\tList<IProgress*>::iterator itor=m_iprogressList.begin();\n\t\twhile (itor != m_iprogressList.end())\n\t\t\t(*itor)->DoProgress(value); //更新进度条\n\t\t\titor++;\n\t\t}\n\t}\n};\n```\n\n```c++\n// MainForm.cpp\nclass IProgress{\npublic:\n\tvirtual void DoProgress(float value)=0;\n\tvirtual ~IProgress(){}\n};\n\n// C++不推荐多继承，但是推荐的唯一一种多继承的形式是：一个主集成、其他都是接口或者抽象基类\n// MainForm是观察者\nclass MainForm : public Form, public IProgress{\n\tTextBox* txtFilePath;\n\tTextBox* txtFileNumber;\n\tProgressBar* progressBar;\n\npublic:\n\tvoid Button1_Click(){\n\t\tstring filePath = txtFilePath->getText();\n\t\tint number = atoi(txtFileNumber->getText().c_str());\n\t\tFileSplitter splitter(filePath, number);\n\t\tsplitter.addIProgress(this); // 订阅通知\n\t\tConsoleNotifier cn; // 观察者二\n\t\tsplitter.addIProgress(&cn); // 订阅通知\n\t\tsplitter.split();\n\t\tsplitter.removeIProgress(this);\n\t}\n\n\tvirtual void DoProgress(float value){\n\t\tprogressBar->setValue(value);\n\t}\n};\n\n// 另一个观察者\nclass ConsoleNotifier : public IProgress {\npublic:\n\tvirtual void DoProgress(float value){\n\t\tcout << \".\"; // 无UI：打点\n\t}\n};\n```\n\n## 4 观察者v2（可执行）\n```c++\n#include \"Header.h\"\n#include <random>\n#include <thread>\n\nclass NumGen;\nclass NumGenObserver {\npublic:\n\tvirtual ~NumGenObserver() {}\n\tvirtual void update(NumGen *numGen) = 0;\n};\n\nclass NumGen {\npublic:\n\tvirtual ~NumGen() {}\n\tvoid addObserve(NumGenObserver *observe) {\n\t\tm_observeList.push_back(observe);\n\t}\n\tvoid deleteObserve(NumGenObserver *observe) {\n\t\tm_observeList.erase(std::remove(m_observeList.begin(), m_observeList.end(), observe));\n\t}\n\tvoid notifyObverses() {\n\t\tfor (auto gen : m_observeList) {\n\t\t\tgen->update(this);\n\t\t}\n\t}\n\tvirtual int getNumber() = 0;\n\tvirtual void execute() = 0;\n\nprivate:\n\tstd::vector<NumGenObserver *> m_observeList;\n};\n\nclass RandomNumGen : public NumGen {\npublic:\n\tvirtual int getNumber() override {\n\t\treturn m_number;\n\t}\n\tvirtual void execute() override {\n\t\tfor (int i = 0; i < 20; ++i) {\n\t\t\tm_number = m_dis(m_gen);\n\t\t\tnotifyObverses();\n\t\t}\n\t}\n\nprivate:\n\tstd::random_device m_rd;\n\tstd::mt19937 m_gen{ m_rd() };\n\tstd::uniform_int_distribution<int> m_dis{ 0, 100 };\n\tint m_number{ 0 };\n};\n\nclass DigitObserver : public NumGenObserver {\npublic:\n\tvirtual void update(NumGen *numGen) override {\n\t\tstd::cout << \"DigitObserver:\";\n\t\tstd::cout << numGen->getNumber() << std::endl;\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(10));\n\t}\n};\n\nclass GraphObserver : public NumGenObserver {\npublic:\n\tvirtual void update(NumGen *numGen) override {\n\t\tauto num = numGen->getNumber();\n\t\tstd::cout << \"GraphObserver:\";\n\t\tfor (int i = 0; i < num; ++i) {\n\t\t\tstd::cout << \"*\";\n\t\t}\n\t\tstd::cout << std::endl;\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(10));\n\t}\n};\n\nint main() {\n\tNumGen *gen = new RandomNumGen;\n\tNumGenObserver *ob1 = new DigitObserver;\n\tNumGenObserver *ob2 = new GraphObserver;\n\tgen->addObserve(ob1);\n\tgen->addObserve(ob2);\n\tgen->execute();\n\tdelete gen;\n\tdelete ob1;\n\tdelete ob2;\n\treturn 0;\n}\n```\n\n## 5 观察者v3（配合模板更通用的观察者模式）\n```c++\ntemplate<typename ObserverType>\nclass Subject {\n    vector<ObserverType*> _list;\npublic:\n    // 订阅\n    void subscribe(ObserverType* obs) {\n        auto itor = std::find(_list.begin(), _list.end(), obs);\n        if (_list.end() == itor) {\n            _list.push_back(obs);\n        }\n    }\n    \n    // 取消订阅\n    void unSubscribe(ObserverType* obs) {\n        // erase配合remove\n        _list.erase(std::remove(_list.begin(), _list.end(), obs));\n    }\n\n    // 发布\n    template<typename FuncType>\n    void publish(FuncType func) {\n        for (auto obs : _list) {\n            // 调用回调函数，将obs作为一个参数传入\n            func(obs);\n        }\n    }\n};\n\n// CatObserver接口 猫的观察者\nclass CatObserver {\npublic:\n    virtual void onMiaow() = 0;\n    virtual ~CatObserver() {}\n};\n\n// Tom继承自Subject，模板参数CatObserver\n// 这样Tom就可以订阅、发布对应类型\nclass Tom : public Subject<CatObserver> {\npublic:\n    void miaow() {\n        cout << \"喵\" << endl;\n        // 这里CatObserver的成员函数，所以第一个参数需要this指针，这里悬置->对应publish的object\n        publish(std::bind(&CatObserver::onMiaow, std::placeholders::_1));\n    }\n};\n\n// Jerry继承自CatObserver，可以被订阅\nclass Jerry : public CatObserver {\npublic:\n    void onMiaow() override {\n        RunAway();\n    }\n    void RunAway() {\n        cout << \"那只笨又猫来了，快跑！\" << endl;\n    }\n};\n\nint main() {\n    Tom tom;\n    Jerry jerry1, jerry2, jerry3;\n\n    // 拿一堆jerry去订阅tom的 猫叫 事件\n    tom.subscribe(&jerry1);\n    tom.subscribe(&jerry2);\n    tom.subscribe(&jerry3);\n    \n    tom.miaow();\n}\n\n```\n输出结果：\n```c++\n喵\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n那只笨又猫来了，快跑！\n```\n\n## 6 总结\n- 使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。\n- 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。\n- 观察者自己决定是否需要订阅通知，目标对象对此一无所知。\n- Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。\n\n## 7 参考\n- 《设计模式》 GoF\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)\n- [设计模式](https://refactoringguru.cn/design-patterns/cpp)","tags":["设计模式"]},{"title":"CPP线程使用","url":"/2022/05/01/CPP线程使用/","content":"## 函数介绍\n- `lock_guard`：锁定互斥锁后，生命周期结束后会自动释放，不需要手动解锁，也无法手动解锁\n- `unique_lock`：多数情况与上面一个可以相互替代，但是其更具功能性（付出一些代价）。`unique_lock`可以进行unlock操作，因此可以和条件变量搭配使用\n\n## 多线程输出数字\n多个线程互斥输出: `0 1 2 3 4 5 6 ...`\n```c++\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\nusing namespace std;\nint idx = 0;\nmutex _mutex;\nvoid func(int n) {\n\twhile (idx < n) { // 改成true一样的\n\t\tlock_guard<mutex> tmp(_mutex);\n\t\tif (idx >= n) break; // 必须，否则多输出几个数才停\n\t\tcout << idx++ << \" \";\n\t}\n}\nint main() {\n\tvector<thread> arr;\n\tfor (int i = 0; i < 10; ++i)\n\t\tarr.push_back(thread(func, 1000));\n\tfor (auto& e : arr)\n\t\te.join();\n\treturn 0;\n}\n```\n版本2\n```c++\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <windows.h>\nusing namespace std;\nint idx = 0;\nmutex _mutex;\nvoid func(int n) {\n\twhile (idx < n) {\n\t\tlock_guard<mutex> tmp(_mutex);\n\t\tif (idx >= n) break;\n\t\tcout << idx++ << \" \";\n\t}\n}\nint main() {\n\tvector<thread> arr;\n\tfor (int i = 0; i < 10; ++i) {\n\t\tauto t = thread(func, 1000);\n        // 不需要join了\n\t\tt.detach();\n        // 这里不能传入左值，会报错“尝试引用已删除的函数”\n        // 或者通过vector存放thread的指针的方式\n\t\tarr.push_back(move(t));\n\t}\n\t// 模拟其他操作，虽然detach后不需要join但是主线程结束后\n    // 子线程也会直接结束\n\tSleep(1000);\n\treturn 0;\n}\n```\n\n\n## 多线程输出ABC\n多个线程互斥输出:\n```c++\nA B C\nA B C\nA B C\nA B C\n...\n```\n```c++\n#include <iostream>\n#include <thread>\n#include <mutex>\nusing namespace std;\n\nmutex _mutex;\nint step = 0;\nint stepNum = 0;\nvoid func1() {\n\twhile (true) {\n\t\tlock_guard<mutex> tmp(_mutex);\n\t\tif (stepNum == 30) break;\n\t\tif (step % 3 == 0) {\n\t\t\t++step;\n\t\t\t++stepNum;\n\t\t\tcout << \"A\" << \" \";\n\t\t}\n\t}\n}\n\nvoid func2() {\n\twhile (true) {\n\t\tlock_guard<mutex> tmp(_mutex);\n\t\tif (stepNum == 30) break;\n\t\tif (step % 3 == 1) {\n\t\t\t++step;\n\t\t\t++stepNum;\n\t\t\tcout << \"B\" << \" \";\n\t\t}\n\t}\n}\n\nvoid func3() {\n\twhile (true) {\n\t\tlock_guard<mutex> tmp(_mutex);\n\t\tif (stepNum == 30) break;\n\t\tif (step % 3 == 2) {\n\t\t\t++step;\n\t\t\t++stepNum;\n\t\t\tcout << \"C\" << endl;\n\t\t}\n\t}\n}\n\nint main() {\n\tthread t1(func1);\n\tthread t2(func2);\n\tthread t3(func3);\n\tt1.join();\n\tt2.join();\n\tt3.join();\n\treturn 0;\n}\n```\n\n## 条件变量\n```c++\n#include <iostream>\n#include <thread>\n#include <mutex>\n#include <windows.h>\n#include <condition_variable>\nusing namespace std;\nmutex _mutex;\ncondition_variable cv;\nbool ready = false;\n// 最开始10个线程会在cv.wait处阻塞，并且会unlock _mutex。\n// 当cv.notify后，这十个线程便会以随机的顺序尝试lock _mutex继续向下执行\nvoid workers(int id) {\n\tunique_lock<mutex> ulck(_mutex); // 可以灵活unlock\n\twhile (ready == false) {\n\t\tcout << \"here: \"<< id << endl;\n\t\tcv.wait(ulck); // 阻塞\n\t\t// 其他操作...\n\t}\n\tcout << \"thread: \" << id << endl;\n}\nvoid go() {\n\tunique_lock<mutex> ulck(_mutex);\n\tready = true;\n\tcv.notify_all();\n}\nint main() {\n\tthread mt[10];\n\tfor (int i = 0; i < 10; ++i)\n\t\tmt[i] = thread(workers, i);\n\tcout << \"10 threads ready to race...(already!)\" << endl;\n\tSleep(50); // 确保前面的线程先到地方wait\n\tgo();\n\tfor (auto& e : mt)\n\t\te.join();\n\treturn 0;\n}\n```","tags":["C/C++"]},{"title":"右值引用详解","url":"/2022/04/08/右值引用详解/","content":"\n# 问题\n1. 临时对象非必要的昂贵的拷贝操作\n2. 在模板函数中如何按照参数的实际类型进行转发\n- 关键字：右值、纯右值、将亡值、universal references、引用折叠、移动语义、move语义、完美转发\n- 以下用四条代码来阐述C++的右值引用及其思想\n\n# 1. 第一行代码\n```c++\nint i = getVal();\n```\n- 上式代码会产生一个左值和纯右值，**右值是不具名的，判断左值和右值的办法就是看能否取地址**\n- 在C++11中所有的值必属于左值、将亡值、纯右值三者之一。比如，非引用返回的临时变量、运算表达式产生的临时变量、原始字面量和lambda表达式等都是纯右值。而将亡值是C++11新增的、与右值引用相关的表达式，比如，将要被移动的对象、T&&函数返回值、std::move返回值和转换为T&&的类型的转换函数的返回值等。\n\n# 2. 第二行代码\n\n## 2.1 特点1：重获新生\n```c++\nT getVal(){\n    return T();\n}\nT k = getVal();     // F1\nT&& k = getVal();   // F2\n```\n- F1：调用一次默认构造、两次拷贝构造（一次函数内到函数外的临时值，一次临时值到k）\n- F2：调用一次默认构造、一次拷贝构造（一次函数内到函数外的临时值，并且临时值通过右值引用**重获新生**）\n- 现代编译器进行了优化，可能仅仅调用一次默认构造，但这不是C++标准\n- 当然在C++98/03年代，为了相同的目的，可以用常量左值引用这种万能引用：`const T& k = getVal();`，也能达到减少一次拷贝构造的目的，但是k不能再改变了。\n\n## 2.2 特点2：右值引用“二相性”\n- 右值引用独立于左值和右值，即，右值引用类型的变量可能是左值也可能是右值，例如：\n```c++\nint&& val = 1;\n```\n- **val类型为右值引用，但val本身是左值**，所有具名变量都是左值\n```c++\ntemplate<typename T>\nvoid f(T&& t){}\n\nf(10); // t是右值 T&& t = 10\n\nint x = 10;\nf(x);  // t是左值 (T&)&& t = x，折叠后变为T& t = x;\n```\n\n## 2.3 特点3：通用引用(universal references)\n- T&& t在**发生自动类型推断**的时候，它是通用引用类型\n- 通用引用是需要初始化的，如果是左值，那就归为左值引用，如果是右值，那就归为右值引用。\n```c++\n// 注意上述关键词：\"发生自动类型推断\"时\nint a = 1;\nauto&& b = a;  // b类型为左值引用 (int&)&& b -> int& b = a\nauto&& c = 10; // c类型为右值引用 int&& b = 10\n```\n\n### **引用折叠**\n1. 所有的右值引用叠加到右值引用上仍然还是一个右值引用\n    - 类型 T&& && 折叠成 T&&\n2. 所有的其他引用类型之间的叠加都将变成左值引用\n    - T& &、T& && 和 T&& & 都会折叠成类型 T&\n     \n\n\n# 3. 第三行代码\n```c++\nMyClass(MyClass&& a) : m_val(a.m_val) { a.m_val=nullptr; }\n```\n- 即，移动构造函数(move constructor)，采用浅拷贝的方式，因为某些临时变量如果没有移动构造函数，则会频繁发生拷贝构造（深拷贝），如果对象内部堆空间很大的话，代价会非常大\n- 这里介绍move语句，move语句会将一个左值变为一个右值类型。`move(val)`后，并不会对val本身做出改变。类似上面的代码，将`move(val)`交给一个构造函数或者一个赋值函数，那么会按照右值类型匹配对应的移动构造函数和移动赋值函数，在移动函数里会将`val`的资源指针交给别人，`val`自身资源指针指向`nullptr`，这个时候`val`才会发生改变（你在代码里`move(val)`一百次，但是不交给对应函数匹配处理，那么`val`就不会有一丁点的变化）。当然，这些操作别人已经实现好了，如果是你自己的类，要自己实现！\n\n# 4. 第四行代码\n```c++\ntemplate <typename T>\nvoid f(T&& val){ \n    foo(std::forward<T>(val));\n}\n```\n\n## 4.1 C++11前，调用模板函数的问题\n```c++\ntemplate <typename T>\nvoid forwardValue(T&& val){\n    processValue(val); // 右值参数会变成左值传递给processValue\n}\n```\n- 因此引入了完美转发`std::forward`，他会按照参数的实际类型进行转发\n```c++\nvoid processValue(int& a){ cout << \"lvalue\" << endl; }\nvoid processValue(int&& a){ cout << \"rvalue\" << endl; }\ntemplate <typename T>\nvoid forwardValue(T&& val){\n    // 照参数本来的类型进行转发。\n    processValue(std::forward<T>(val)); \n}\nvoid Testdelcl(){\n    int i = 0;\n    forwardValue(i); // 传入左值 输出：lvaue \n    forwardValue(0); // 传入右值 暑促和：rvalue\n}\n```\n- T&&是一个通用引用(universal references)，可以接受左值或者右值，正是这个特性让他适合作为一个参数的**路由**，然后再通过std::forward按照参数的实际类型去匹配对应的重载函数，最终实现完美转发。\n\n## 4.2 进一步体会完美转发\n\n### 4.2.1 问题\n- `func`函数接收的`v2`是引用，但是引用的却是`middle`里面的一个局部变量`t2`，而非`main`中的`t2`，应该怎么办？\n```c++\ntemplate <typename F, typename T1, typename T2>\nvoid middle(F f, T1 t1, T2 t2) {\n    f(t1, t2);\n}\n\nvoid func(int v1, int& v2) {  // v2 是一个引用\n    ++v1;\n    ++v2;\n}\n\nint main(int argc, char* argv[]) {\n    int i = 0;\n    func(42, i);\n    // here i = 1\n    middle(func, 42, i);\n    // here i = 1\n}\n```\n\n### 4.2.2 尝试\n- `middle`中`t1`类型是`int&&`，`t2`类型是`int& && -> int&`，`i`的值也如预期般变化\n```c++\ntemplate <typename F, typename T1, typename T2>\nvoid middle(F f, T1&& t1, T2&& t2) {\n    f(t1, t2);\n}\n\nvoid func(int v1, int& v2) {  // v2 是一个引用\n    ++v1;\n    ++v2;\n}\n\nint main(int argc, char* argv[]) {\n    int i = 0;\n    func(42, i);\n    // here i = 1\n    middle(func, 42, i);\n    // here i = 2\n}\n```\n- 虽然看似没毛病，但是我们改一下`func`，就会暴露问题，修改func如下：\n```c++\nvoid func(int&& v1, int& v2) {\n    ++v1;\n    ++v2;\n}\n```\n- 修改`func`后再用4.2.2的代码运行就会报错，提示：“无法将一个右值引用绑定到左值上”，why？因为，在`main`中42虽然是右值，传入到`middle`后`t1`的类型也确实是`int&&`，但是`t1`本身作为具名变量，它是一个左值！而左值是无法与右值进行绑定的。\n\n### 4.2.3 解决\n```c++\ntemplate <typename F, typename T1, typename T2>\nvoid middle(F f, T1&& t1, T2&& t2) {\n    f(std::forward<T1>(t1), std::forward<T2>(t2));\n}\n```\n- `forward`就是解决以上问题的关键\n- `42`传入`middle`后绑定到`t1`，此时t1类型是`int&&`（其中`T1`是`int`）。通过`forward<T1>(t1) -> forward<int>(t1)`，将返回`int&&`成功传给func函数。这里你肯定有疑问，刚才不就是`int&&`？你绕一大圈子是不是耍人？其实不然，之前的那个啊叫named rvalue，有名字，传参时被当成左值！现在通过`forward`返回的是无名字的真正的右值，从而右值得到了保留！\n- `i`传入`middle`后绑定到`t2`，此时t2类型为`int& &&`（其中`T2`是`int&`，why？因为`T2`如果是`int`，那么就变成`int&& t2 = i`，会导致右值绑定一个左值从而报错！）经过引用折叠变为`int&`.通过`forward<T2>(t2) -> forward<int&>(t2)`，将返回一个`int& &`，折叠后变为`int&`，左值也得到了保留！\n\n\n## 4.3 应用：泛型工厂函数\n利用forward可以实现一个泛型的工厂函数，这个工厂函数可以创建所有类型的对象。具体实现如下：\n```c++\ntemplate<typename…  Args>\nT* Instance(Args&&… args){\n    return new T(std::forward<Args >(args)…);\n}\n```\n- 这个工厂函数的参数是右值引用类型，内部使用std::forward按照参数的实际类型进行转发，如果参数的实际类型是右值，那么创建的时候会自动匹配移动构造，如果是左值则会匹配拷贝构造。\n\n\n# 参考资料\n- [博客园qicosmos(江南)](https://www.cnblogs.com/qicosmos/p/4283455.html#:~:text=%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E6%98%AFC,%E8%BF%99%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98%E7%9A%84%E3%80%82)\n- [Dong's Blog](https://www.guodong.plus/2020/0314-132811/)","tags":["C/C++"]},{"title":"路径搜索","url":"/2022/04/07/路径搜索/","content":"\n# 辅助代码（全局变量）\n```c++\ntypedef pair<int, int> node;\nvector<vector<int>> G = {\n    {1,1,1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,2,1,1,1,1,1},\n    {1,1,1,1,2,3,2,1,1,1,1},\n    {1,1,1,2,3,4,3,2,1,1,1},\n    {1,1,2,3,4,5,4,3,2,1,1},\n    {1,1,1,2,3,4,3,2,1,1,1},\n    {1,1,1,1,2,3,2,1,1,1,1},\n    {1,1,1,1,1,2,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1,1,1},\n    {1,1,1,1,1,1,1,1,1,1,1}\n};\nint row = (int)G.size();\nint col = (int)G[0].size();\nnode S = { 5,0 };\nnode E = { 5,10 };\nint dir[] = { -1, 0, 1, 0, -1 };\n```\n\n# DFS\n- **DFS是无法找到最优路径的**（理论上可以，但是复杂度巨高，如果是四个方向搜索的话，那么就是四叉树，高度是图中结点数，也就是说如果是10x10的图，那就是大约4^100复杂度）\n- 下面代码只表示找到任意一条路后直接返回\n```c++\nvector<vector<bool>> visited(row, vector<bool>(col, false));\nvector<node> path;\nbool END = false;\nvoid dfs(node cur) {\n    if (cur == E) \n        END = true;\n    visited[cur.first][cur.second] = true;\n    path.push_back(cur);\n    for (int i = 0; i < 4 && !END; ++i) {\n        int ix = cur.first + dir[i];\n        int iy = cur.second + dir[i + 1];\n        if (ix < 0 || ix >= row || iy < 0 || iy >= col || visited[ix][iy]) continue;\n        dfs({ ix, iy });\n    }\n    if (END) return; // 保留路径\n    path.pop_back();\n    visited[cur.first][cur.second] = false;\n}\n```\n\n# BFS\n- BFS是可以找到最优路径的，每次到某点的距离变小时就将其加入队列\n- **不可以提前结束**，无法确定是否能够通过后面的点来缩短到终点的距离\n```c++\nvoid bfs() {\n    queue<node> qe;\n    qe.push(S);\n    vector<vector<int>> dist(row, vector<int>(col, 10000));\n    dist[S.first][S.second] = 0;\n    while (!qe.empty()) {\n        node cur = qe.front(); qe.pop();\n        for (int i = 0; i < 4; ++i) {\n            int ix = cur.first + dir[i];\n            int iy = cur.second + dir[i + 1];\n            if (ix < 0 || ix >= row || iy < 0 || iy >= col) continue;\n            if (dist[ix][iy] > dist[cur.first][cur.second] + G[ix][iy]) {\n                dist[ix][iy] = dist[cur.first][cur.second] + G[ix][iy];\n                qe.emplace(ix, iy);\n            }\n        }\n    }\n}\n```\n\n# Dijkstra\n- 每次弹出优先队列的都是确定下来的最优解，因此可以接触终点时直接`break`提前结束\n- 也不需要visited数组，因为遇到重复的x和y时，优先队列会依照priority排列，大的自动排到后面，由于接触到终点直接break，那些非最优的都没机会弹出队列。\n- 你可能会想到有没有这种可能绕一个大圈然后使得到达终点的距离进一步降低？其实不可能的，因为优先队列的贪心思想，反证法：如果之前已经将E弹出，后面又经过X到达E使得dist(E)降低；但是既然后面再弹出的X，那证明X的dist比之前第一次弹出的E的dist要大(优先队列先弹出dist小的)，那如何能使得经过X后让E的dist减小呢？矛盾！\n```c++\nstruct item{ // 存放在优先队列的结构体\n    int x;\n    int y;\n    int priority;\n    bool operator>(const item& ano) const {\n        return this->priority > ano.priority;\n    }\n};\n\nvoid dijkstra() {\n    priority_queue<item, vector<item>, greater<item>> qe;\n    vector<vector<int>> dist(row, vector<int>(col, 1000)); // dist二维数组\n    qe.push({ S.first, S.second, 0 }); // 初始化\n    dist[S.first][S.second] = 0; // 初始化\n    while (!qe.empty()) {\n        item cur = qe.top(); qe.pop();\n        // 找到后可以直接返回，这里贪心算法，确保是最优解\n        if (cur.x == E.first && cur.y == E.second) break;\n        for (int i = 0; i < 4; ++i) {\n            int ix = cur.x + dir[i];\n            int iy = cur.y + dir[i + 1];\n            if (ix < 0 || ix >= row || iy < 0 || iy >= col) continue;\n            if (dist[ix][iy] > cur.priority + G[ix][iy]) {\n                dist[ix][iy] = cur.priority + G[ix][iy];\n                qe.push({ ix, iy, dist[ix][iy] });\n            }\n        }\n    }\n}\n```\n\n# A星\n- A星的思想是对Dijkstra的一点改进。首先BFS是没有方向的，Dijkstra是在BFS之上加入了贪心思想，但是同样没有方向，A星则是增加了终点方向的属性，并入到Dijkstra的优先级中，参与优先队列的弹出选择，对于能明确表明与终点距离的图问题来说，效果相当不错。\n```c++\nstruct item{ // 存放在优先队列的结构体\n    int x;\n    int y;\n    int p1; // 从起点到该点的 dist (与实际图权值相关，如果无权图则退化为曼哈顿距离)\n    int p2; // 从该点到终点的 [曼哈顿距离] \n    bool operator>(const item& ano) const {\n        return p1 + p2 > ano.p1 + ano.p2;\n    }\n};\n\n// 获取曼哈顿距离的函数\nauto getP2 = [&](int x, int y) {return abs(E.first - x) + abs(E.second - y); };\n\nvoid aStar() {\n    priority_queue<item, vector<item>, greater<item>> qe;\n    vector<vector<int>> dist(row, vector<int>(col, 1000)); // dist二维数组\n    qe.push({ S.first, S.second, 0, getP2(S.first, S.second)}); // 初始化\n    dist[S.first][S.second] = 0; // 初始化\n    while (!qe.empty()) {\n        item cur = qe.top(); qe.pop();\n        // 找到后可以直接返回，这里贪心算法，确保是最优解\n        if (cur.x == E.first && cur.y == E.second) break;\n        for (int i = 0; i < 4; ++i) {\n            int ix = cur.x + dir[i];\n            int iy = cur.y + dir[i + 1];\n            if (ix < 0 || ix >= row || iy < 0 || iy >= col) continue;\n            if (dist[ix][iy] > cur.p1 + G[ix][iy]) {\n                dist[ix][iy] = cur.p1 + G[ix][iy];\n                qe.push({ ix, iy, dist[ix][iy], getP2(ix, iy) });\n            }\n        }\n    }\n}\n```","tags":["算法","图"]},{"title":"字符串匹配","url":"/2022/04/06/字符串匹配/","content":"\n# BF(Brute Force)算法\n- BF是最符合人类直觉的字符串匹配算法，但是主串的下标`i`经常要往回走，无法利用已匹配信息，效率不够好\n```c++\nint bruteForce(const string& t, const string& p) {\n    int i = 0, j = 0;\n    // i和j都是非负数，所以可以和无符号直接比较\n    while (i < t.size() && j < p.size()) {\n        if (t[i] == p[j]) {\n            ++i; ++j;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == p.size())\n        return i - j;\n    else\n        return -1;\n}\n```\n\n# KMP算法\n- 思想：“利用已部分匹配的信息，保持`i`指针不回溯，通过修改`j`指针，让模式串尽量移动到有效的位置”\n- 定义`next`数组： `next[j] = d` 表示当 `t[i] != p[j]` 时，`j`下一次匹配的位置。注意到，下标从0开始，`d`值实际上是下标`j`前的**最长前后缀子串**的**长度**\n- 求取`next`的过程本身就是`p`串与自己匹配的过程\n    1. 当 `p[i]==p[j]` ，则 `p[++i] = ++j`\n    2. 当 `p[i]!=p[j]` ，则利用前面已求得的`next`数组，`j=next[j]` ；直到无法找到，此时 `j=-1` ，自动进入第一个`if`语句，此时`i`往后走一步，妙\n```c++\nvector<int> getNext(const string& p) {\n    int n = p.size();\n    vector<int> next(n);\n    next[0] = -1;\n    int i = 0, j = -1;\n    // !!! i < n 则会在下面越界，因为0已经求过了，循环只会进行n-1次\n    while (i < n - 1) {\n        if (j == -1 || p[i] == p[j]) {\n            ++i, ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n\nint KMP(const string& t, const string& p) {\n    vector<int> next = getNext(p);\n    int n = t.size(), m = p.size();\n    int i = 0, j = 0;\n    // !!! j可以为负数，和无符号比较会转换为无符号比较法(南辕北辙)\n    while (i < n && j < m) {\n        if (j == -1 || t[i] == p[j]) {\n            ++i; ++j;\n        } else {\n            j = next[j];\n        }\n    }\n    if (j == p.size())\n        return i - j;\n    else\n        return -1;\n}\n```\n\n# KMP之Next优化\n- 比如`[ A B A B ]`这个串，按照上面所述KMP得到的结果是`[-1, 0, 0, 1]`，然而，例如匹配的是`[ A B A B D E]`，在下标为`3`处失败了，`next`指导去下标`1`处继续匹配，但是，下标`1`和下标`3`都是`B`，没有必要再进行比较了。诸如此类的例子还有`[ A A A A B]`，用上述KMP得到的`next`是`[-1, 0, 1, 2, 3]`\n- 方法就是在 `++i, ++j` 后加一步判断，本来直接 `next[i]=j` 但是如果 `p[i]==p[j]` 则如果以后匹配 `p[i]` 失败，则匹配 `p[j]` 肯定也失败啊，所以如果两者相等，直接 `next[i] = next[j]` 。此时的结果对于`[ A B A B ]`产生的是`[-1, 0, -1, 0]`；对于`[ A A A A B]`产生的是`[-1, -1, -1, -1, 3]`\n- 加三行代码就行了\n```c++\nvector<int> getNext(const string& p) {\n    int n = p.size();\n    vector<int> next(n);\n    next[0] = -1;\n    int i = 0, j = -1;\n    while (i < n - 1) {\n        if (j == -1 || p[i] == p[j]) {\n            ++i, ++j;\n            if (p[i] == p[j]) // new \n                next[i] = next[j]; // new \n            else // new\n                next[i] = j;\n        }\n        else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n\nint KMP(const string& t, const string& p) {\n    vector<int> next = getNext(p);\n    int n = t.size(), m = p.size();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (j == -1 || t[i] == p[j]) {\n            ++i; ++j;\n        }\n        else {\n            j = next[j];\n        }\n    }\n    if (j == p.size())\n        return i - j;\n    else\n        return -1;\n}\n```\n\n# 参考资料\n- 博客园博主：[sofu6](https://www.cnblogs.com/dusf/p/kmp.html)","tags":["算法","特殊"]},{"title":"计算器","url":"/2022/04/05/计算器/","content":"\n# 功能说明\n- 实现+、-、*、/、括号的整数运算\n- 实现处理多余空格\n\n# 实现1（更高效）\n- 用引用`l`指针的方式逐步处理\n```c++\nint core(string& s, int& l) {\n    stack<int> stk;\n    int n = s.size();\n    int num = 0;\n    char sign = '+';\n    for (; l < n; ++l) {\n        char c = s[l];\n        if (isdigit(c)) \n            num = num * 10 + (c - '0');\n        // if(c == ' ') continue是不对的，因为l=n-1时一定要最后来一次\n        if ((!isdigit(c) && c != ' ') || l == n - 1) {\n            if (c == '(') \n                num = core(s, ++l); // 理解这种递归思想很重要\n            int prev;\n            switch (sign) {\n            case '+':\n                stk.push(num); break;\n            case '-':\n                stk.push(-num); break;\n            case '*':\n                prev = stk.top(); stk.pop();\n                stk.push(prev * num);\n                break;\n            case '/':\n                prev = stk.top(); stk.pop();\n                stk.push(prev / num);\n                break;\n            default: break;\n            }\n            sign = c;\n            num = 0;\n            if (c == ')') \n                break;\n        }\n    }\n    int ret = 0;\n    while (!stk.empty()) {\n        ret += stk.top();\n        stk.pop();\n    }\n    return ret;\n}\n\nint caculator(string s) {\n    int tmp = 0;\n    return core(s, tmp);\n}\n```\n\n# 实现2（更优雅）\n- 由于需要不停`pop`首部，所以采用`deque`代替移动的`l`，更优雅\n```c++\nint core(deque<char>& s) {\n    stack<int> stk;\n    int num = 0;\n    char sign = '+';\n    while (!s.empty()) {\n        char c = s[0]; s.pop_front();\n        if (isdigit(c))\n            num = num * 10 + (c - '0');\n        if ((!isdigit(c) && c != ' ') || s.empty()) {\n            if (c == '(')\n                num = core(s);\n            int prev;\n            switch (sign) {\n            case '+':\n                stk.push(num); break;\n            case '-':\n                stk.push(-num); break;\n            case '*':\n                prev = stk.top(); stk.pop();\n                stk.push(prev * num);\n                break;\n            case '/':\n                prev = stk.top(); stk.pop();\n                stk.push(prev / num);\n                break;\n            default: break;\n            }\n            sign = c;\n            num = 0;\n            if (c == ')')\n                break;\n        }\n    }\n    int ret = 0;\n    while (!stk.empty()) {\n        ret += stk.top();\n        stk.pop();\n    }\n    return ret;\n}\n\nint caculator(string s) {\n    deque<char> dq;\n    for (auto& e : s) dq.push_back(e);\n    return core(dq);\n}\n```\n\n# 参考\n- labuladong的算法小抄","tags":["算法","特殊"]},{"title":"链表排序","url":"/2022/04/04/链表排序/","content":"\n# 1. 插入排序\n- 只要注意每次判断比前面的大那就不需要回头\n- 否则需要从头找合适的位置\n```c++\nListNode* insertSort(ListNode* head) {\n    if (!head || !head->next) return head;\n    ListNode dummy; dummy.next = head;\n    ListNode* prev = head;\n    ListNode* curr = head->next;\n    while (curr) {\n        if (prev->val <= curr->val) {\n            prev = curr;\n            curr = curr->next;\n        } else {\n            ListNode* t = &dummy;\n            while (t->next && t->next->val <= curr->val) t = t->next;\n            prev->next = curr->next;\n            curr->next = t->next;\n            t->next = curr;\n            curr = prev->next;\n        }\n    }\n    return dummy.next;\n}\n```\n\n# 2. 归并排序\n- 不论是主递归还是merge都要求两个链表以nullptr结尾\n- 也就是在合适的地方断开\n\n## 2.1 递归版本\n```c++\nListNode* mergeTwoList(ListNode* p2a, ListNode* p2b) {\n    ListNode dummy;\n    ListNode* ptr = &dummy;\n    while (p2a || p2b) {\n        int a = p2a ? p2a->val : INT_MAX;\n        int b = p2b ? p2b->val : INT_MAX;\n        if (a < b) {\n            ptr->next = p2a;\n            p2a = p2a->next;\n        }\n        else {\n            ptr->next = p2b;\n            p2b = p2b->next;\n        }\n        ptr = ptr->next; // 别忘了\n    }\n    return dummy.next;\n}\n\nListNode* mergeSort(ListNode* head) {\n    if (!head || !head->next) return head;\n    ListNode* slow = head, *fast = head;\n    while (fast) { // 链表快慢指针有多种形式，要会灵活运用\n        fast = fast->next;\n        if(fast) fast = fast->next;\n        if(fast) slow = slow->next; // if(fast)：slow指向第一个链表的最后一位结点\n    }\n    ListNode* head2 = slow->next;\n    slow->next = nullptr;\n    return mergeTwoList(mergeSort(head), mergeSort(head2));\n}\n```\n\n## 2.2 非递归版本\n```c++\nListNode* mergeTwoList(ListNode* p2a, ListNode* p2b) {\n    ListNode dummy;\n    ListNode* ptr = &dummy;\n    while (p2a || p2b) {\n        int a = p2a ? p2a->val : INT_MAX;\n        int b = p2b ? p2b->val : INT_MAX;\n        if (a < b) {\n            ptr->next = p2a;\n            p2a = p2a->next;\n        }\n        else {\n            ptr->next = p2b;\n            p2b = p2b->next;\n        }\n        ptr = ptr->next; // 别忘了\n    }\n    return dummy.next;\n}\n\nListNode* mergeSort(ListNode* head) {\n    if (!head || !head->next) return head;\n    int n = 0;\n    ListNode* ptr = head;\n    while (ptr) { // 统计链表长度\n        ++n;\n        ptr = ptr->next;\n    }\n    ListNode dummy;\n    dummy.next = head;\n    ptr = &dummy;\n    ListNode* prev, *l, *r, *t, *next; // 屮，5个指针\n    for (int w = 1; w < n; w <<= 1) {\n        prev = &dummy;\n        l = dummy.next;\n        r = nullptr;\n        while (l) {\n            // 第一个子链表的最后一个元素 注意：i从1开始\n            t = l;\n            for (int i = 1; i < w && t; ++i) t = t->next;\n            r = nullptr;\n            if (t) {\n                r = t->next;\n                t->next = nullptr;\n            }\n            // 第二个子链表的最后一个元素 注意：i从1开始\n            t = r;\n            for (int i = 1; i < w && t; ++i) t = t->next;\n            next = nullptr;\n            if (t) {\n                next = t->next;\n                t->next = nullptr;\n            }\n            // 合并子链表\n            ListNode* ret = mergeTwoList(l, r);\n            prev->next = ret;\n            // prev指向合并后的子链表的最后一个元素\n            while (prev->next) prev = prev->next;\n            l = next;\n        }\n    }\n    return dummy.next;\n}\n```\n\n# 3. 快速排序\n- 其实对于链表，由于不需要额外空间，归并排序其实很优秀了；快速排序由于需要选取pivot，选的不好，会变成n^2，而归并排序是稳定的nlogn\n- pivot的选取可以将中点节点移到链头充当pivot或者随机一个节点充当pivot，否则对于有序数列，会退化为n^2\n- 由于无法采用l和r两边向中间靠拢的方式划分集合，只能采用单边形式，所以遇到“窄数据”或者都是一样值（窄特例化），也会退化为n^2\n```c++\nListNode* quickSort(ListNode* head) {\n    if (!head || !head->next) return head;\n    int pivot = head->val;\n    ListNode L, R;\n    ListNode* l = &L, *r = &R;\n    ListNode* ptr = head->next;\n    while (ptr) {\n        if (ptr->val <= pivot) {\n            l->next = ptr;\n            l = l->next;\n        }\n        else {\n            r->next = ptr;\n            r = r->next;\n        }\n        ptr = ptr->next;\n    }\n    l->next = nullptr; // 断尾\n    r->next = nullptr; // 断尾\n    l = quickSort(L.next);\n    r = quickSort(R.next);\n    head->next = r;\n    if (!l) return head;\n    ListNode* t = l;\n    while (t->next) t = t->next;\n    t->next = head;\n    return l;\n}\n```\n- 取中间作为pivot\n```c++\nListNode* quickSort(ListNode* head) {\n    if (!head || !head->next) return head;\n    ListNode* slow = head, *fast = head;\n    while (fast) {\n        fast = fast->next;\n        if (fast) fast = fast->next;\n        if (fast) slow = slow->next;\n    }\n    ListNode* newHead = slow->next;\n    slow->next = newHead->next;\n    newHead->next = head;\n\n    int pivot = newHead->val;\n    ListNode L, R;\n    ListNode* l = &L, *r = &R;\n    ListNode* ptr = newHead->next;\n    while (ptr) {\n        if (ptr->val <= pivot) {\n            l->next = ptr;\n            l = l->next;\n        }\n        else {\n            r->next = ptr;\n            r = r->next;\n        }\n        ptr = ptr->next;\n    }\n    l->next = nullptr; // 断尾\n    r->next = nullptr; // 断尾\n    l = quickSort(L.next);\n    r = quickSort(R.next);\n    newHead->next = r;\n    if (!l) return newHead;\n    ListNode* t = l;\n    while (t->next) t = t->next;\n    t->next = newHead;\n    return l;\n}\n```\n\n# 4. 辅助代码\n```c++\nstruct ListNode{\n    int val;\n    ListNode* next;\n    ListNode(int _v = 0) :val(_v), next(nullptr) {}\n};\n\nListNode* genList(int n, int range) { // 数目， 分布范围\n    ListNode dummy;\n    ListNode* ptr = &dummy;\n    for (int i = 0; i < n; ++i) {\n        int r = rand() % range;\n        ListNode* tmp = new ListNode(r);\n        ptr->next = tmp;\n        ptr = ptr->next;\n    }\n    return dummy.next;\n}\n\nvoid parseList(ListNode* p, bool show=true) {\n    int ret = 0;\n    int cnt = 0;\n    while (p) {\n        if(show) cout << p->val << \"\\t\";\n        p = p->next;\n        ++cnt;\n        if (show && cnt / 10) {\n            ret += cnt;\n            cnt = 0;\n            cout << endl;\n        }\n    }\n    ret += cnt;\n    cout << \"总计:\"<< ret << endl;\n}\n\nint main() {\n    ListNode* ptr = genList(1000, 1000);\n    parseList(ptr, true);\n    // ptr = yourSort(ptr);\n    parseList(ptr, true);\n    return 0;\n}\n```","tags":["算法","排序"]},{"title":"十大排序总结","url":"/2022/04/03/十大排序总结/","content":"\n# 一、简单排序\n\n## 1. 冒泡排序\n- 时间复杂度：O(N^2)\n- 空间复杂度：O(1)\n- 稳定\n```c++\nvoid bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - 1 - i; ++j) {\n            if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]);\n        }\n    }\n}\n```\n\n## 2. 选择排序\n- 时间复杂度：O(N^2)\n- 空间复杂度：O(1)\n- **不稳定**（是不是以为`(arr[j] > arr[pos])`改为`>=`就变成稳定的了？那看一下`3, 2, 1, 2`。所以若想选择排序稳定，需要开辟新的数组空间；或者进行大量移动位置操作；或者是对链表排序）\n```c++\nvoid selectSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; ++i) {\n        int pos = 0;\n        for (int j = 1; j < n - i; ++j) {\n            if (arr[j] > arr[pos]) pos = j;\n        }\n        swap(arr[pos], arr[n - i - 1]);\n    }\n}\n```\n\n## 3. 插入排序\n- 时间复杂度：O(N^2)\n- 空间复杂度：O(1)\n- 稳定\n```c++\nvoid insertSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 1; i < n; ++i) {\n        int cur = arr[i];\n        int j = i - 1;\n        for (; j >= 0 && arr[j] > cur; --j)\n            arr[j + 1] = arr[j];\n        arr[j + 1] = cur;\n    }\n}\n```\n\n# 二、高级排序\n\n## 4. 希尔排序\n- 时间复杂度：O(N^(4/3~3/2))复杂度非常难以估算\n- 空间复杂度：O(1)\n- **不稳定**\n- 下面两个实现都一样，唯一区别就是`插入排序外循环里面i增加的形式，第一种分开实现，第二种合并了`\n\n### 4.1 实现1\n```c++\nvoid shellSort(vector<int>& arr) {\n    int n = arr.size();\n    // 选择的增量序列是（2^k-1），可以跟随数组大小生成，但是为了简化算法代码，突出主题，在此固定长度了\n    static vector<int> incre = { 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1 };\n    for (int u = 0; u <incre.size(); ++u) { // 增量循环\n        int width = incre[u];\n        if (width > n) continue;\n        for (int v = 0; v < width; ++v) { // 当前增量循环\n            for (int i = width + v; i < n; i += width) { // 插入排序外循环\n                int cur = arr[i];\n                int j = i - width;\n                for (; j >= 0 && arr[j] > cur; j -= width) // 插入排序内循环\n                    arr[j + width] = arr[j];\n                arr[j + width] = cur;\n            }\n        }\n    }\n}\n```\n\n### 4.2 实现2（浙大陈姥姥代码）\n```c++\nvoid shellSort(vector<int>& arr) {\n    int n = arr.size();\n    // 选择的增量序列是（2^k-1），可以跟随数组大小生成，但是为了简化算法代码，突出主题，在此固定长度了\n    static vector<int> incre = { 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1 };\n    for (int u = 0; u < incre.size(); ++u) { // 增量循环\n        int width = incre[u];\n        for (int i = width; i < n; ++i) { // 插入排序外循环\n            int cur = arr[i];\n            int j = i - width;\n            for (; j >= 0 && arr[j] > cur; j -= width) // 插入排序内循环\n                arr[j + width] = arr[j];\n            arr[j + width] = cur;\n        }\n    }\n}\n```\n\n## 5. 堆排序\n- 时间复杂度：O(NlogN)\n- 空间复杂度：O(1)\n- 不稳定\n```c++\nvoid downMethod(vector<int>& arr, int f, int sz) {\n    int s = f * 2 + 1;\n    int cur = arr[f];\n    while(s < sz){\n        if (s + 1 < sz && arr[s] < arr[s + 1]) // 兄弟值大，让位\n            ++s;\n        if (arr[s] <= cur) break; // 父亲值大，镇压\n        arr[f] = arr[s]; // 儿子值大，禅位\n        f = s; // 下一代的父亲\n        s = f * 2 + 1; // 下一代的儿子\n    }\n    arr[f] = cur;\n}\n\nvoid heapSort(vector<int>& arr) {\n    int n = arr.size();\n    // 数组形成堆\n    for (int p = (n - 2) / 2; p >= 0; --p)\n        downMethod(arr, p, n);\n    // 堆首尾交换进行排序\n    for (int p = n-1; p > 0; --p) {\n        swap(arr[0], arr[p]);\n        downMethod(arr, 0, p);\n    }\n}\n```\n\n## 6. 归并排序\n- 时间复杂度：O(NlogN)\n- 空间复杂度：O(N)\n- 稳定\n\n### 6.1 递归版本\n```c++\n// [l, m] [m+1, r]\nvoid mergeTwoArray(vector<int>& arr, vector<int>& trr, int l, int m, int r) {\n    int i = l, j = m + 1, k = l;\n    while (i <= m || j <= r) { // k <= r 一样\n        int a = i <= m ? arr[i] : INT_MAX;\n        int b = j <= r ? arr[j] : INT_MAX;\n        if (a < b) ++i; // 每次i和j只能有一个增加\n        else ++j;\n        trr[k++] = a < b ? a : b;\n    }\n    while (l <= r) { // 拷贝回去\n        arr[l] = trr[l];\n        ++l;\n    }\n}\n\nvoid mergeRecursion(vector<int>& arr, vector<int>& trr, int l, int r) {\n    if (l == r) return;\n    int m = l + ((r - l) >> 1);\n    mergeRecursion(arr, trr, l, m);\n    mergeRecursion(arr, trr, m + 1, r);\n    mergeTwoArray(arr, trr, l, m, r);\n}\n\nvoid mergeSort(vector<int>& arr) {\n    int n = arr.size();\n    vector<int> trr(arr); // 避免频繁创建子数组\n    mergeRecursion(arr, trr, 0, n - 1);\n}\n```\n\n### 6.2 非递归版本\n```c++\n// [l, m] [m+1, r]\nvoid mergeTwoArray(vector<int>& arr, vector<int>& trr, int l, int m, int r) {\n    int i = l, j = m + 1, k = l;\n    while (i <= m || j <= r) { // k <= r 一样\n        int a = i <= m ? arr[i] : INT_MAX;\n        int b = j <= r ? arr[j] : INT_MAX;\n        if (a < b) ++i; // 每次i和j只能有一个增加\n        else ++j;\n        trr[k++] = a < b ? a : b;\n    }\n    // 不用拷贝回去...\n}\n\nvoid mergeSort(vector<int>& arr) {\n    int n = arr.size();\n    int range = 1; // 半径\n    vector<int> trr(arr); // 避免频繁创建子数组\n    while (range < n) {\n        for (int i = 0; i < n; i += range*2) { // arr -> trr\n            int m = i + range - 1;\n            if (m >= n - 1) m = n - 1; // 不能break\n            int r = i + range * 2 - 1;\n            if (r >= n - 1) r = n - 1;\n            mergeTwoArray(arr, trr, i, m, r); // arr->trr\n        }\n        range <<= 1;\n        for (int i = 0; i < n; i += range*2) { // trr -> arr\n            int m = i + range - 1;\n            if (m >= n - 1) m = n - 1; // 不能break\n            int r = i + range * 2 - 1;\n            if (r >= n - 1) r = n - 1;\n            mergeTwoArray(trr, arr, i, m, r); // trr->arr\n        }\n        range <<= 1;\n    }\n}\n```\n\n## 7. 快速排序\n- 时间复杂度：O(NlogN)\n- 空间复杂度：栈上O(logN)\n- 不稳定\n- 注意1：遇到l和r指向相等时，需要交换，不然遇到全1的数组，退化为n^2\n- 注意2：快排在数据范围较小时（`r-l<threshold`）直接使用插入排序可有效优化速度\n\n### 7.1 实现1（朴素版）\n```c++\nvoid quickRecursion(vector<int>& arr, int l, int r) {\n    if (l >= r) return;\n    int oldl = l, oldr = r;\n    // 选 [枢纽]\n    int pivot = arr[l];\n    // 排序\n    ++r;\n    while (l < r) {\n        while (l < r && arr[--r] > pivot); // 右侧先动是安全的\n        while (l < r && arr[++l] < pivot); // 左侧后动\n        if (l < r) swap(arr[l], arr[r]);\n    }\n    swap(arr[oldl], arr[l]);\n    quickRecursion(arr, oldl, r - 1);\n    quickRecursion(arr, r + 1, oldr);\n}\n\nvoid quickSort(vector<int>& arr) {\n    int n = arr.size();\n    quickRecursion(arr, 0, n - 1);\n}\n```\n\n### 7.2 实现2（改进朴素版）\n```c++\nint pivot = arr[l];\n// 改为\nint randomPos = l + rand()%(r-l+1);\nswap(arr[l], arr[randomPos]);\nint pivot = arr[l];\n```\n\n### 7.3 实现3（中间值枢纽）\n```c++\n// 三数选中间数并将最小值放在l，最大值放在r，中间值(pivot)放在l+1\n// 陈姥姥代码里是放在r-1的，这样肯定正确因为m肯定<r\n// 我为了兼容朴素版的大部分代码，选择放在l+1，这样由于m可能等于l，所以需要多一次特殊点判断\nint median3(vector<int>& arr, int l, int r) {\n    int m = l + ((r - l) >> 1);\n    if (arr[l] > arr[m])\n        swap(arr[l], arr[m]);\n    if (arr[l] > arr[r])\n        swap(arr[l], arr[r]);\n    if (arr[m] > arr[r])\n        swap(arr[m], arr[r]);\n    if (l == m) return arr[l]; // 特殊点\n    swap(arr[m], arr[l + 1]);\n    return arr[l + 1];\n}\n\nvoid quickRecursion(vector<int>& arr, int l, int r) {\n    if (l >= r) return;\n    int oldl = l, oldr = r;\n    // 选 [枢纽]\n    int pivot = median3(arr, l, r);\n\n    // 排序\n    ++l; // 注意：两端收缩了一位\n    while (l < r) {\n        while (l < r && arr[--r] > pivot); // 右侧先动是安全的\n        while (l < r && arr[++l] < pivot); // 左侧后动\n        if (l < r) swap(arr[l], arr[r]);\n    }\n    swap(arr[oldl + 1], arr[l]); // 注意：pivot枢纽放在了l+1位置\n    quickRecursion(arr, oldl, r - 1);\n    quickRecursion(arr, r + 1, oldr);\n}\n\nvoid quickSort(vector<int>& arr) {\n    int n = arr.size();\n    quickRecursion(arr, 0, n - 1);\n}\n```\n\n### 7.4 实现4（有限制）\n虽然代码看起来很简洁，但是有如下问题：\n1. 极端情况会退化为n^2算法\n2. 正因如此，在我的实验中，对3w个分布0~99的数字排序，会栈溢出（异常结束，main函数return 非0）。其实前面的方法里，移动i和j时如果`>`改为`>=`、`<`改为`<=`也会出现这种问题哦。因此在数据分布较窄时，这种方法无疑是低效的\n```c++\nvoid quickRecursion(vector<int>& arr, int l, int r) {\n    if (l >= r) return;\n    // 选 [枢纽] 可改进随机化但效果还是差\n    int pivot = arr[l];\n\n    // 排序\n    int j = l;\n    for (int i = l + 1; i <= r; ++i) {\n        if (arr[i] < pivot) {\n            ++j;\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[j], arr[l]);\n\n    quickRecursion(arr, l, j - 1);\n    quickRecursion(arr, j + 1, r);\n}\n\nvoid quickSort(vector<int>& arr) {\n    int n = arr.size();\n    quickRecursion(arr, 0, n - 1);\n}\n```\n\n# 三、特殊排序\n\n## 8. 计数排序\n- 时间复杂度：O(B+N)，B是数据范围一般较小，可认为是O(N)\n- 空间复杂度：栈上O(B+N) -> O(N)\n- 稳定（实现的不好则不稳定，比如从前往后填）\n```c++\nvoid countingSort(vector<int>& arr) {\n    int n = arr.size();\n    int maxV = INT_MIN;\n    for (auto& e : arr) maxV = maxV > e ? maxV : e;\n    vector<int> counting(maxV + 1); // 计数数组\n    vector<int> trr(arr); // 留作中转拷贝\n    for (auto& e : arr) ++counting[e]; // 计数\n    for (int i = 1; i < counting.size(); ++i) // 累加计数\n        counting[i] = counting[i - 1] + counting[i];\n    for (int i = n - 1; i >= 0; --i) { // 从后向前填：稳定的排序\n        int pos = --counting[arr[i]];\n        trr[pos] = arr[i];\n    }\n    for (int i = 0; i < n; ++i) // 拷回去\n        arr[i] = trr[i];\n}\n```\n\n## 9. 基数排序\n- 时间复杂度：O(Rs * N)，Rs是数据最大值的位数一般较小，可认为是O(N)\n- 空间复杂度：栈上O(10 + N) -> O(N)\n- 稳定（实现的不好则不稳定，比如从前往后填）\n- 经常利用计数排序实现\n\n### 9.1 LSD基数排序\n1. 最低位优先(Least Significant Digit first, LSD)，先排低位；再排高位\n2. 由于每一位介于0~9，所以对每一个基位排序时都可看做是分为10个桶的桶排序\n```c++\n// 获得一个int的某一位的数字\n// 例如13247 r=0 -> 7 | r=1 -> 4 | r=2 -> 2 | r=3 -> 3 | r=4 -> 1 | r = 5 -> 0 \nint getRadix(int num, int r) {\n    static int radices[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };\n    num %= radices[r + 1];\n    return num / radices[r];\n}\n\nvoid radixSortLSD(vector<int>& arr) {\n    int n = arr.size();\n    int maxV = INT_MIN;\n    for (auto& e : arr) maxV = maxV > e ? maxV : e;\n    int radixNum = 0;\n    while (maxV) {\n        ++radixNum;\n        maxV /= 10;\n    }\n    vector<int> trr(arr); // 留作中转拷贝\n    for (int r = 0; r < radixNum; ++r) {\n        vector<int> counting(10); // 计数数组\n        for (auto& e : arr) ++counting[getRadix(e, r)]; // 计数\n        for (int i = 1; i < counting.size(); ++i) // 累加计数\n            counting[i] = counting[i - 1] + counting[i];\n        for (int i = n - 1; i >= 0; --i) {\n            int pos = --counting[getRadix(arr[i], r)];\n            trr[pos] = arr[i];\n        }\n        for (int i = 0; i < n; ++i) // 拷回去\n            arr[i] = trr[i];\n    }\n}\n```\n\n### 9.2 MSD基数排序\n- 最高位优先(Most Significant Digit first, MSD)，先排高位；再排低位\n- MSD一般采用递归写法：按高位分组，形成连续区段，然后在区段内递归处理低一位\n```c++\n// 获得一个int的某一位的数字\n// 例如13247 r=0 -> 7 | r=1 -> 4 | r=2 -> 2 | r=3 -> 3 | r=4 -> 1 | r = 5 -> 0 \nint getRadix(int num, int r) {\n    static int radices[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };\n    num %= radices[r + 1];\n    return num / radices[r];\n}\n\nvoid radixRecursion(vector<int>& arr, vector<int>& trr, int l, int r, int d) {\n    if (l >= r || d < 0) return;\n    vector<int> counting(10);\n    for (int i = l; i <= r; ++i) \n        ++counting[getRadix(arr[i], d)]; // l~r 计数\n    for (int i = 1; i < counting.size(); ++i) \n        counting[i] = counting[i - 1] + counting[i]; // 累加计数\n    for (int i = r; i >= l; --i) {\n        int pos = --counting[getRadix(arr[i], d)] + l; // + l 偏移别忘了\n        trr[pos] = arr[i];\n    }\n    for (int i = l; i <= r; ++i) // 拷回去\n        arr[i] = trr[i];\n    for (int i = 0; i < 10; ++i) {\n        if (i == 0) radixRecursion(arr, trr, l, l + counting[0] - 1, d - 1);\n        else radixRecursion(arr, trr, l + counting[i - 1], l + counting[i] - 1, d - 1);\n    }\n}\n\nvoid radixSortMSD(vector<int>& arr) {\n    int n = arr.size();\n    int maxV = INT_MIN;\n    for (auto& e : arr) maxV = maxV > e ? maxV : e;\n    int radixNum = 0;\n    while (maxV) {\n        ++radixNum;\n        maxV /= 10;\n    }\n    vector<int> trr(arr); // 留作中转拷贝\n    radixRecursion(arr, trr, 0, n - 1, radixNum-1);\n}\n```\n\n## 10. 桶排序\n- 桶排序的时间复杂度和空间复杂度以及是不是稳定都看你采取的子排序算法\n- 桶排序一般用于数据**分布均匀**的\n- 桶排序用于遏制N^2、NlogN等复杂度的算法因数据量太大而带来的速度问题\n```c++\nvoid insertSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 1; i < n; ++i) {\n        int cur = arr[i];\n        int j = i - 1;\n        for (; j >= 0 && arr[j] > cur; --j)\n            arr[j + 1] = arr[j];\n        arr[j + 1] = cur;\n    }\n}\n\nvoid bucketSort(vector<int>& arr) {\n    int n = arr.size();\n    int maxV = INT_MIN;\n    for (auto& e : arr) maxV = maxV > e ? maxV : e;\n    ++maxV;\n    int bckNum = 10; // 分十个桶\n    vector<vector<int>> buckets(bckNum, vector<int>());\n    for (auto& e : arr) {\n        int pos = e * 10 / maxV;\n        buckets[pos].push_back(e); // 放进桶里\n    }\n    for (auto& b : buckets) { // 随意选取排序算法\n        insertSort(b);\n    }\n    int k = 0;\n    for (int i = 0; i < buckets.size(); ++i)\n        for (int j = 0; j < buckets[i].size(); ++j)\n            arr[k++] = buckets[i][j]; // 从桶里面拿出来\n}\n```\n\n# 四、辅助代码\n- 获取数据、判断排序合格、显示已排序frontN等\n```c++\n#pragma once\n#include <iostream>\n#include <vector>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nclass Data{\npublic:\n    Data(string fn, int _n) : arr(_n) {\n        fstream file;\n        file.open(fn, ios::in);\n        if (!file) {\n            throw string(\"ERROR!\");\n        }\n        for (auto& e : arr)\n            file >> e;\n        file.close();\n    }\n    vector<int>&& getData() { return move(arr); }\nprivate:\n    vector<int> arr;\n};\n\nbool isSorted(vector<int>& arr) {\n    for (int i = 1; i < arr.size(); ++i)\n        if (arr[i] < arr[i - 1]) return false;\n    return true;\n}\n\nvoid showFrontN(vector<int>& arr, int n) {\n    n = n > arr.size() ? arr.size() : n;\n    for (int i = 0; i < n;) {\n        int cnt = 0;\n        for (; cnt < 10 && i + cnt < n; ++cnt) // 每行十列显示\n            cout << arr[i + cnt] << \"\\t\";\n        cout << endl;\n        i += cnt;\n    }\n}\n```\n```c++\nint main() {\n    Data dataGenerator(\"Data.txt\", 1000);\n    vector<int> arr = dataGenerator.getData();\n\n    // yourSort(arr);\n    showFrontN(arr, 100);\n\n    if (isSorted(arr)) cout << \"排序完成\" << endl;\n    else cout << \"排序出错\" << endl;\n    return 0;\n}\n```","tags":["算法","排序"]},{"title":"Set、Map、Unordered","url":"/2022/03/27/Set、Map、Unordered/","content":"\n# Map和Set\n- Map是`<key, value>`结构；Set是`<key>`结构，天然具有去重功能\n- 自定义类放入Map或Set需要实现`bool operator<(const MyClass& ano) const`，注意里面的两个const是必备的，不能漏\n- 不用实现`operator=`，因为`a<b == false && a>b == false`会自动推断出等于\n\n## 0、示范图\n```c++\n           0\n           |\n          (1)\n           |\n  2 —(1)—  1  —(1)— 3\n     \\           /\n     (3)       (2)\n        \\     /\n           4\n```\n\n## 1、错误代码示例\n- 下面`Node`类，利用Set来实现Dijkstra是不对的，因为在`operator<`中参与返回结果的只有`val`因此，两个不一样的`Node`在`Set`中会被认为是相同的。即`Node a = Node({1,1})和Node b = Node({2,1})`，由于`(a<b==false && b>a==false)`所以被判定为相等，与我们的目的南辕北辙。\n```c++\n#include <iostream>\n#include <vector>\n#include <set>\nusing namespace std;\nconst int inf = INT_MAX;\nstruct Node {\n    Node(int _p, int _v):pos(_p), val(_v){}\n    int pos;\n    int val;\n    bool operator<(const Node& ano) const {\n        return this->val < ano.val;\n    }\n};\n\nint main() {\n    vector<vector<int>> g = {\n        {0,   1,   inf, inf, inf},\n        {1,   0,   1,   1,   inf},\n        {inf, 1,   0,   inf, 3  },\n        {inf, 1,   inf, 0,   2  },\n        {inf, inf, 3,   2,   0  },\n    };\n    int n = (int)g.size();\n    // ------------------------------------\n    vector<int> dist(n, INT_MAX);\n    dist[0] = 0;\n    set<Node> pq;\n    pq.insert(Node(0, 0));\n    while (!pq.empty()) {\n        Node cur = *pq.begin(); pq.erase(pq.begin());\n        int from = cur.pos;\n        int dis = cur.val;\n        cout << from << \" \" << cur.val << endl;\n        for (int to = 0; to < n; ++to) {\n            if (g[from][to] < inf && dist[to] > dis + g[from][to]) {\n                dist[to] = dis + g[from][to];\n                pq.insert(Node(to, dist[to]));\n            }\n        }\n    }\n    for (auto e : dist)\n        cout << e << \" \";\n    cout << endl;\n\n    return 0;\n}\n```\n输出结果为：\n```c++\n0 0\n1 1\n2 2\n4 5\n0 1 2 2 5 // 错误，应该是4\n// 原因是插入Node{3,2}时发现已经有了，所以就取消插入，因此无法利用{3,2}来更新最小边\n```\n\n## 2、正确用法priority_queue\n```c++\n#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int inf = INT_MAX;\nstruct Node {\n    Node(int _p, int _v):pos(_p), val(_v){}\n    int pos;\n    int val;\n    bool operator>(const Node& ano) const {\n        return this->val > ano.val;\n    }\n};\n\nint main() {\n    vector<vector<int>> g = {\n        {0,   1,   inf, inf, inf},\n        {1,   0,   1,   1,   inf},\n        {inf, 1,   0,   inf, 3  },\n        {inf, 1,   inf, 0,   2  },\n        {inf, inf, 3,   2,   0  },\n    };\n    int n = (int)g.size();\n    // ------------------------------------\n    vector<int> dist(n, INT_MAX);\n    dist[0] = 0;\n    priority_queue<Node, vector<Node>, greater<Node>> pq;\n    pq.push(Node(0, 0));\n    while (!pq.empty()) {\n        Node cur = pq.top(); pq.pop();\n        int from = cur.pos;\n        int dis = cur.val;\n        cout << from << \" \" << cur.val << endl;\n        for (int to = 0; to < n; ++to) {\n            if (g[from][to] < inf && dist[to] > dis + g[from][to]) {\n                dist[to] = dis + g[from][to];\n                pq.push(Node(to, dist[to]));\n            }\n        }\n    }\n    for (auto e : dist)\n        cout << e << \" \";\n    cout << endl;\n\n    return 0;\n}\n```\n输出结果为：\n```c++\n0 0\n1 1\n2 2\n3 2 // OK\n4 4\n4 5\n0 1 2 2 4 // OK\n```\n\n## 总之，以后写Dijkstra不要妄图用set和map来替换优先队列!!!\n\n# Unordered_set和unordered_map\n1. 需要定义一个仿函数`operator(...)`用来计算hash_value，并在定义时传入模板参数\n2. 重载`operator==`\n```c++\n#include <iostream>\nusing namespace std;\n\n#include <string>\n#include <unordered_map>\nstruct node {\n    node(int _id, double _val) : id(_id), val(_val) {}\n    int id;\n    double val;\n    bool operator==(const node& ano) const { // 判断两个对象是否相等（自动加上key匹配再判断相等）\n        return val == ano.val;\n    }\n};\n\nstruct node_hash {\n    size_t operator()(const node& v) const { // 生成hash value，必须返回 [无符号整数] 用来进行映射\n        return v.id; // 生成hash value的方式都可以灵活自定义\n        //return hash<double>()(v.val);\n    }\n};\n\nint main() {\n    unordered_map<node, string, node_hash> ms;\n    node a = { 1, 1.1111 };\n    node b = { 2, 1.1111 };\n    ms[a] = \"aaaa\";\n    ms[b] = \"bbbb\";\n    cout << ms[a] << endl;\n    cout << ms[b] << endl;\n    return 0;\n}\n```","tags":["C/C++"]},{"title":"设计模式-单例模式","url":"/2022/03/26/设计模式-单例模式/","content":"\n## 单例模式\n\n### 0、静态函数变量版本\n利用C++特性\n```c++\ntemplate <class T>\nclass SingleTon {\npublic:\n    static T& GetInstance() {\n        static T ins;\n        return ins;\n    }\n    SingleTon(const SingleTon&) = delete;\n    SingleTon& operator=(const SingleTon&) = delete;\n    virtual ~SingleTon() {}\nprotected:\n    SingleTon() {}\n};\n\nclass Apple : public SingleTon<Apple> {\n    friend SingleTon<Apple>; // 友元\npublic:\n    void show() {\n        cout << __FUNCTION__ << endl;\n    }\n    ~Apple() {\n        cout << __FUNCTION__ << endl;\n    }\nprotected:\n    Apple() {}\n};\n\nclass Orange : public SingleTon<Orange> {\n    friend SingleTon<Orange>; // 友元\npublic:\n    ~Orange() {\n        cout << __FUNCTION__ << endl;\n    }\n    void show() {\n        cout << __FUNCTION__ << endl;\n    }\nprotected:\n    Orange() {}\n};\n\nint main() {\n    Apple::GetInstance().show();\n    cout << &Apple::GetInstance() << endl;\n    Apple::GetInstance().show();\n    cout << &Apple::GetInstance() << endl;\n    Orange::GetInstance().show();\n    Orange::GetInstance().show();\n    return 0;\n}\n```\n\n\n### 1、普通版本（高并发效率不足）（安全）\n- 在类中添加一个私有静态成员单例实例的指针。\n- 声明一个公有静态构建方法用于获取单例实例的指针。\n- 在静态方法中实现\"延迟初始化\"。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。\n- 将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。\n- 检查客户端代码， 将对单例的构造函数的调用替换为对其静态构建方法的调用。\n```c++\nclass Singleton {\nprotected:\n\tSingleton(const string& val) : data(val) {} // 构造函数\n\t~Singleton() {}\n\tstatic Singleton* _instance; // 静态：实例的指针\n\tstatic mutex _mutex;\n\tstring data; // 代表类内的资源\n\npublic:\n\tSingleton(const Singleton& another) = delete; // 禁止拷贝构造\n\tSingleton& operator=(const Singleton& another) = delete; // 禁止赋值\n\tstatic Singleton* getInstance(const string& val); // 静态：获取实例\n\tvoid show() { cout << \"data: \" << data << endl; } // 测试\n};\n\n// 静态成员需要在类外定义\nSingleton* Singleton::_instance = nullptr;\nmutex Singleton::_mutex;\n\nSingleton* Singleton::getInstance(const string& val) {\n\tlock_guard<mutex> lock(_mutex); // 出作用域自动释放\n\tif (_instance == nullptr) {\n\t\t_instance = new Singleton(val);\n\t}\n\treturn _instance;\n}\n\nint main() {\n\tSingleton* a = Singleton::getInstance(\"aaa\");\n\ta->show(); // \"aaa\" ok\n\tSingleton* b = Singleton::getInstance(\"bbb\");\n\tb->show(); // \"aaa\" ok\n\treturn 0;\n}\n```\n\n### 2、双检查锁（有隐患）\nreorder问题：通常new通常有三步：1、分配一块内存空间；2、执行构造器；3、返回指针；\n但是由于编译器有时会进行优化，执行顺序变为132：即分配空间后先返回指针，再执行构造器\n这样就会到来危险，比如线程A执行new，132，3执行完；线程B发现m_instance非空返回，然后外部直接用这个指针会出错\n```c++\n//双检查锁，但由于内存读写reorder不安全（不安全）\nSingleton* Singleton::getInstance() {\n    if(m_instance==nullptr){ // 第一次检查，主要解决性能问题，毕竟读操作不需要上锁\n        Lock lock;\n        if (m_instance == nullptr) { // 第二次检查，解决核心问题：只能new单个\n            m_instance = new Singleton();\n        }\n    }\n    return m_instance;\n}\n```\n\n### 3、双检查锁（安全）\n```c++\n//C++ 11版本之后的跨平台实现 (volatile)（安全）\nstd::atomic<Singleton*> Singleton::m_instance;\nstd::mutex Singleton::m_mutex;\n\nSingleton* Singleton::getInstance() {\n    Singleton* tmp = m_instance.load(std::memory_order_relaxed);\n    std::atomic_thread_fence(std::memory_order_acquire); // 获取内存fence\n    if (tmp == nullptr) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        tmp = m_instance.load(std::memory_order_relaxed);\n        if (tmp == nullptr) {\n            tmp = new Singleton;\n            std::atomic_thread_fence(std::memory_order_release); // 释放内存fence\n            m_instance.store(tmp, std::memory_order_relaxed);\n        }\n    }\n    return tmp;\n}\n```\n\n## 参考资料\n- [Refactoring.Guru](https://refactoringguru.cn/design-patterns/catalog)\n- 李建忠设计模式\n- [C++ 23种设计模式](https://github.com/jaredtao/DesignPattern)","tags":["设计模式"]},{"title":"线程安全智能指针","url":"/2022/03/24/线程安全智能指针/","content":"\n# 线程安全的share指针\n\n## 1. 代码部分\n```c++\n#include <iostream>\n#include <mutex>\nusing namespace std;\n\nclass Counter{\npublic:\n    Counter(): m_Counter(0) {}\n    Counter(const Counter&) = delete;\n    Counter& operator=(const Counter&) = delete;\n    ~Counter() {}\n    void reset() { m_Counter = 0; }\n    unsigned int get() const { return m_Counter; }\n    void operator++() { m_Counter++; }\n    void operator++(int) { m_Counter++; }\n    void operator--() { m_Counter--; }\n    void operator--(int) { m_Counter--; }\n\nprivate:\n    unsigned int m_Counter{}; // 花括号也可以初始化\n};\n\ntemplate<typename T>\nclass SharedPtr{\npublic:\n    explicit SharedPtr(T *ptr = nullptr): // explicit\n        pData(ptr),\n        pCounter(new Counter()),\n        pMutex(new std::mutex)\n    {\n        if (ptr) {\n            addCount();\n        }\n    }\n\n    SharedPtr(const SharedPtr<T>& sp) {\n        pData = sp.pData;\n        pCounter = sp.pCounter;\n        pMutex = sp.pMutex;\n        addCount();\n    }\n\n    SharedPtr<T>& operator=(const SharedPtr<T>& sp) {\n        if (pData != sp.pData) {\n            subCount();\n            pData = sp.pData;\n            pCounter = sp.pCounter;\n            pMutex = sp.pMutex;\n            addCount();\n        }\n    }\n\n    T* operator->() { return pData; }\n\n    T& operator*() { return *pData; }\n\n    T* get() { return pData; }\n\n    unsigned int getCount() { return pCounter->get(); }\n\n    ~SharedPtr() { subCount(); }\n\nprivate:\n    void addCount() {\n        pMutex->lock();\n        ++(*pCounter);\n        pMutex->unlock();\n    }\n\n    void subCount() {\n        bool deleteflag = false;\n        pMutex->lock();\n        --(*pCounter);\n        if (pCounter->get() == 0) {\n            delete pCounter;\n            delete pData;\n            deleteflag = true;\n        }\n        pMutex->unlock();\n        if (deleteflag == true) delete pMutex;\n    }\n\nprivate:\n    T *pData;\n    std::mutex *pMutex;\n    Counter *pCounter;\n};\n\nclass MyClass {\npublic:\n    MyClass() {\n        cout << \"Constructor\" << endl;\n    }\n    ~MyClass() {\n        cout << \"Destructor\" << endl;\n    }\n};\n\nint main() {\n    SharedPtr<MyClass> p(new MyClass());\n    SharedPtr<MyClass> p2 = p;\n    cout << \"END\" << endl;\n    return 0;\n}\n```\n\n## 2. 参考资料\n- [1. 线程安全智能指针](https://blog.csdn.net/songguangfan/article/details/121974538)\n- [2. 智能指针](https://www.cnblogs.com/WindSun/p/11444429.html)","tags":["C/C++"]},{"title":"二分变种","url":"/2022/03/21/二分变种/","content":"\n# 540 [有序数组中的单一元素](https://leetcode-cn.com/problems/single-element-in-a-sorted-array/)\n\n## 我的二分\n- 与右侧配对失败:\n    - 右侧是奇数: `l = m + 1`\n    - 右侧是偶数: `r = m`\n- 与右侧配对成功:\n    - 右侧是奇数: `l = m + 2`\n    - 右侧是偶数: `r = m - 1`\n```c++\nclass Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int l = 0, r = nums.size()-1;\n        while(l < r){ // 这样可以放心取m+1不越界\n            int m = (l + r) >> 1;\n            if(nums[m] != nums[m+1]){\n                if((r-m) & 1) l = m + 1;\n                else r = m;\n            }else{\n                if((r-m-1) & 1) l = m + 2;\n                else r = m - 1;\n            }\n        }\n        return nums[l];\n    }\n};\n```\n\n## 官方的全数组二分查找\n- 假设要找的是数字X，则在X左边的数，下标是偶数的都是重复数字的第一位，下标是奇数的都是重复数字的第二位；在X右边的数，下标是奇数的都是重复数字的第一位，下标是偶数的都是重复数字的第二位；\n- 取中值时，若m是偶数，则尝试与m+1比较是否相等，相等则表明[:m+1]正常，X在m+1的右侧，因此`l = m + 2`；若不相等，则X在[:m]，因此`r = m`\n- 取中值时，若m是奇数，则尝试与m-1比较是否相等，相等则表明[:m]正常，X在m的右侧，因此`l = m + 1`；若不相等，则X在[:m]，因此`r = m`\n```c++\nclass Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int l = 0, r = nums.size() - 1;\n        while (l < r) {\n            int m = (l + r) >> 1;\n            if((m & 1) && nums[m] == nums[m-1]){ // 奇数\n                l = m + 1;\n            }else if(!(m & 1) && nums[m] == nums[m+1]){ // 偶数\n                l = m + 2;\n            }else{\n                r = m;\n            }\n        }\n        return nums[l];\n    }\n};\n```\n\n- 上述思想可以在代码层面进行简化`m ^ 1`，对于偶数表示`m + 1`；对于奇数表示`m - 1`，同时照顾到短板，每次更新`l`时，有`l = m + 1`\n\n```c++\nclass Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int l = 0, r = nums.size() - 1;\n        while (l < r) {\n            int m = (l + r) >> 1;\n            if (nums[m] == nums[m ^ 1]) { // 这是技巧\n                l = m + 1;\n            }else{\n                r = m;\n            }\n        }\n        return nums[l];\n    }\n};\n```\n\n## 官方的偶数范围二分查找\n- X的下标一定是偶数\n```c++\nclass Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        int l = 0, r = nums.size()-1;\n        while (l < r) {\n            int m = (r - l) / 2 + l;\n            m -= m & 1; // 变为偶数\n            if (nums[m] == nums[m + 1]) { // [...m+1]都ok\n                l = m + 2;\n            } else {\n                r = m;\n            }\n        }\n        return nums[l];\n    }\n};\n```\n","tags":["算法","特殊"]},{"title":"旋转数组二分","url":"/2022/03/21/旋转数组二分/","content":"\n## 1 [寻找峰值](https://leetcode-cn.com/problems/find-peak-element/)\n找到任意一个峰值，你可以假设 nums[-1] = nums[n] = -∞ 。\n\n### 1.1 二分法（不怎么优雅）\n```c++\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int l = 0, r = nums.size()-1;\n        while(l <= r){\n            int m = (l + r) / 2;\n            if(m-1>=0 && nums[m-1]>nums[m])\n                r = m - 1;\n            else if(m+1<nums.size() && nums[m+1]>nums[m])\n                l = m + 1;\n            else\n                return m;\n        }\n        return 0; // 永远不会走\n    }\n};\n```\n\n### 1.2 二分法（优雅）\n**其实只要搞清楚我们「二分」什么内容，根本不会存在说用哪种方式才能写过的情况。**\n```c++\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int l = 0, r = nums.size()-1;\n        while(l < r){\n            int m = (l + r) >> 1;\n            // 这里m+1不会越界，因为l <= m < r，所以m-1是可能越界的，m+1必然不会越界\n            if(nums[m] > nums[m+1])\n                r = m;  // 注意\n            else\n                l = m + 1;  // 注意\n        }\n        return l;\n    }\n};\n```\n\n## 2 [搜索旋转排序数组（无重复）](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)\n\n### 2.1 二分法（有点丑，但好理解）\n```c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while(l <= r){\n            int m = (l + r) >> 1;\n            if(nums[m] == target) return m;\n            \n            // 因为如果就俩数，除以二肯定l == m, r == m+1\n            if(nums[l] == nums[m]){\n                if(r < n && nums[r] == target) return r;\n                else return -1;\n            }\n            else if(nums[l] < nums[m]){ // 左边正常\n                if(target >= nums[l] && target < nums[m]) \n                    r = m - 1;\n                else \n                    l = m + 1;\n            }\n            else{ // 右边正常\n                if(target > nums[m] && target <= nums[r])\n                    l = m + 1;\n                else\n                    r = m - 1;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n### 2.2 二分法（优雅）（与l比较）\n- **牢记：左区间是[l, m]，右区间是(m+1, r]，所以“左区间正常”包含等号**\n- 由于前一步 `if(nums[m] == target) return m;` 已经判定了`nums[m] != target`，所以后面对target和nums[m]的比较**不带等号**\n```c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while(l <= r){\n            int m = (l + r) >> 1;\n            if(nums[m] == target) return m;\n            if(nums[l] <= nums[m]){ // 左边正常\n                if(target >= nums[l] && target < nums[m]) \n                    r = m - 1;\n                else \n                    l = m + 1;\n            }\n            else{ // 右边正常\n                if(target > nums[m] && target <= nums[r])\n                    l = m + 1;\n                else\n                    r = m - 1;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## 2022.08.10（与r比较）\n```c++\n// while等号和不等号\nclass Solution {\npublic:\n    int search(const vectorr<int>& arr, int target) {\n        int l = 0, r = arr.size() - 1;\n        while(l < r){\n            int m = (l+r)/2;\n            if(arr[m] == target) return m;\n            if(arr[m] < arr[r]){ // 右边正常（互不相同所以没等于）\n                if(target > arr[m] && target<=arr[r]) l = m + 1;\n                else r = m - 1;\n            }else{ // 左边正常\n                if(target >= arr[l] && target<arr[m]) r = m - 1;\n                else l = m + 1;\n            }\n        }\n        return arr[l] == target ? l : -1;\n    }\n};\n\nclass Solution {\npublic:\n    int search(vector<int>& arr, int target) {\n        int l = 0, r = arr.size() - 1;\n        while(l <= r){\n            int m = (l+r)/2;\n            if(arr[m] == target) return m;\n            if(arr[m] < arr[r]){ // 右边正常（互不相同所以没等于）\n                if(target > arr[m] && target<=arr[r]) l = m + 1;\n                else r = m - 1;\n            }else{ // 左边正常\n                if(target >= arr[l] && target<arr[m]) r = m - 1;\n                else l = m + 1;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## 3 [寻找旋转排序数组中的最小值（无重复）](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)\n![图解](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/algorithm/LC-153.png)\n\n### 3.1 二分法\n- 如上图所示，如果每次以`nums[l] < nums[m]`为条件虽然可以认定左区间是单调的，但是就全局最小值而言无法区分图1和图2的；但是以`nums[m] < nums[r]`可以认定右区间单调，且可以区分所有最小值情况。一定要理解二分时收缩区间的含义。\n- 不能动不动`l = m + 1`，`r = m - 1`这种大起大和的方式，因为目的是求极值而不是target，target不等于的时候，某一边确实可以跳；但是求极值时，例如下面代码中`r = m`，因为不确定`nums[m]`是不是极值，所以不能写成`r = m - 1`\n```c++\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        int l = 0, r = nums.size()-1;\n        while(l < r){\n            int m = (l + r) / 2;\n            if(nums[m] < nums[r])\n                r = m; // 注意\n            else\n                l = m + 1;  // 注意\n        }\n        return nums[l];\n    }\n};\n```\n\n> 为什么左右不对称？为什么比较mid与right而不比较mid与left？能不能通过比较mid与left来解决问题？<br>\n> 左右不对称的原因是：这是循环前升序排列的数，左边的数小，右边的数大，而且我们要找的是最小值，肯定是偏向左找，所以左右不对称了。<br>\n为什么比较mid与right而不比较mid与left？具体原因前面已经分析过了，简单讲就是因为我们找最小值，要偏向左找，目标值右边的情况会比较简单，容易区分，所以比较mid与right而不比较mid与left。<br>\n那么能不能通过比较mid与left来解决问题？能，转换思路，不直接找最小值，而是先找最大值，最大值偏右，可以通过比较mid与left来找到最大值，最大值向右移动一位就是最小值了（需要考虑最大值在最右边的情况，右移一位后对数组长度取余）。<br>\n\n## 4 [寻找旋转排序数组中的最小值 II（有重复）](https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/)\n\n### 4.1 二分\n由于相等时无法确认二分的方向，所以选择慎重地小幅度收缩1步\n```c++\nclass Solution {\npublic:\n    int findMin(vector<int>& arr) {\n        int l = 0, r = arr.size()-1;\n        while(l < r){\n            int m = (l + r) / 2;\n            if(arr[m] < arr[r]) r = m;\n            else if(arr[m] > arr[r]) l = m + 1;\n            else --r;\n        }\n        return arr[l];\n    }\n};\n```\n\n### 4.2 栈+二分\n由于相等时无法确认二分的方向，所以用栈保存下来可能的区间，留作继续二分\n```c++\nclass Solution {\npublic:\n    int findMin(vector<int>& arr) {\n        stack<int> stk;\n        stk.push(0);\n        stk.push(arr.size()-1);\n        int l=0, r=0;\n        int res = 0x3f3f3f3f;\n        while(!stk.empty()){\n            r = stk.top(); stk.pop();\n            l = stk.top(); stk.pop();\n            while(l < r){\n                int m = (l + r) / 2;\n                if(arr[m] == arr[r]){\n                    stk.push(l);\n                    stk.push(m-1);\n                    l = m + 1;\n                }else if(arr[m] < arr[r]){\n                    r = m;\n                }else if(arr[m] > arr[r]){\n                    l = m + 1;\n                }\n            }\n            if(l <= r) // !\n                res = min(res, arr[r]);\n        }\n        return res;\n    }\n};\n```","tags":["算法","特殊"]},{"title":"链表去重","url":"/2022/03/20/链表去重/","content":"\n# 83 [删除排序链表中重复元素](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/)\n\n## 前序遍历\n```c++\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(!head) return head;\n        ListNode* ptr = head->next;\n        while(ptr && head->val == ptr->val) ptr = ptr->next;\n\n        // 下面俩方式效果一样\n        head->next = deleteDuplicates(ptr);\n        // head->next = ptr;\n        // deleteDuplicates(ptr);\n        return head;\n    }\n};\n```\n\n## 后续遍历\n```c++\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(!head) return head;\n        // 有点像并查集里的路径压缩\n        head->next = deleteDuplicates(head->next);\n        if(head->next && head->val == head->next->val)\n            return head->next;\n        return head;\n    }\n};\n```\n\n## 迭代法\n```c++\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head) return head;\n        ListNode* cur = head;\n        while (cur->next) {\n            if (cur->val == cur->next->val) \n                cur->next = cur->next->next;\n            else \n                cur = cur->next;\n        }\n        return head;\n    }\n};\n```\n\n## 迭代法：双指针\n```c++\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head) return head;\n        ListNode* slow = head, *fast = head;\n        while(fast){\n            if(fast->val != slow->val){\n                slow->next = fast;\n                slow = slow->next;\n            }\n            fast = fast->next;\n        }\n        slow->next = nullptr; // 别忘了\n        return head;\n    }\n};\n\n// 类似于数组去重，一模一样\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.empty()) return 0;\n        int slow = 0, fast = 0;\n        while(fast < nums.size()){\n            if(nums[slow] != nums[fast]){\n                nums[++slow] = nums[fast];\n            }\n            ++fast;\n        }\n        return slow + 1;\n    }\n};\n```\n\n# 82 [删除排序链表中的重复元素Ⅱ](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/)\n\n## 递归\n```c++\nclass Solution {\npublic:\n    int prev = INT_MAX;\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(!head || !head->next){\n            if(head) prev = head->val;\n            return head;\n        }\n        head->next = deleteDuplicates(head->next);\n        while(head && head->val == prev) // 如果要delete，在这里\n            head = head->next;\n        if(head && head->val < prev) // 小于号很重要，因为是递增链表，防止prev更新旧值\n            prev = head->val;\n        return head;\n    }\n};\n```\n\n## 递归2(类似83后续遍历)\n```c++\nclass Solution {\npublic:\n    int prev = INT_MIN;\n    ListNode* deleteDuplicates(ListNode* head) {\n        if(!head) return head;\n        // 有点像并查集里的路径压缩\n        head->next = deleteDuplicates(head->next);\n        if(head->next && head->val == head->next->val){\n            prev = head->val;\n            return head->next->next;\n        }\n        if(head->val == prev)\n            return head->next;\n        return head;\n    }\n};\n```\n\n## 迭代\n```c++\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode* dummy = new ListNode(INT_MAX, head);\n        ListNode* ptr = dummy;\n        while(ptr){\n            ListNode* cur = ptr->next;\n            while(cur && cur->next && cur->val == cur->next->val){\n                cur = cur->next;\n            }\n            if(cur == ptr->next) // 下一步没重复，放心走\n                ptr = ptr->next;\n            else // 有重复 cur必不为nullptr，否则就是没重复那步\n                ptr->next = cur->next;\n        }\n        return dummy->next;\n    }\n};\n```","tags":["算法","特殊"]},{"title":"最长子序列子数组","url":"/2022/03/20/最长子序列子数组/","content":"\n# 1143 [最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/)\n\n- **子序列是可以不连续的**\n- **dp[i][j]的含义是text1[:i]和text2[:j]最长公共子序列，这个最长公共子序列不一定包含text1[i]和text2[j]**\n\n```c++\nclass Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int m = text1.size(), n = text2.size();\n        vector<vector<int>> dp(m+1, vector<int>(n+1, 0)); // 多一行一列\n        for(int i=1; i<=m; ++i){\n            for(int j=1; j<=n; ++j){\n                if(text1[i-1] == text2[j-1]) dp[i][j] = dp[i-1][j-1] + 1; // 别忘了坐标偏移\n                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n        return dp[m][n];\n    }\n};\n```\n\n# 718 [最长重复子数组](https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/)\n\n- **子数组是连续的**\n- **dp[i][j]的含义是以nums1[i]结尾的nums1[:i]和以nums2[j]结尾的nums2[:j]的最长重复子数组**\n```c++\nclass Solution {\npublic:\n    int findLength(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size(), n = nums2.size();\n        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));\n        int ret = 0;\n        for(int i=1; i<=m; ++i){\n            for(int j=1; j<=n; ++j){\n                if(nums1[i-1] == nums2[j-1]){\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                    ret = max(ret, dp[i][j]);\n                }\n            }\n        }\n        return ret;\n    }\n};\n```\n\n## 错误1\n如果里面写成这样：\n```c++\nif(nums1[i-1] == nums2[j-1]) dp[i][j] = dp[i-1][j-1] + 1;\nelse dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n...\nreturn dp[m][n];\n```\n则是处理非连续的“数组子序列”，对于`[0,1,1,1,1]和[1,0,1,0,1]`给出的答案是3，但是正确答案应该是2\n```c++\n// 错误DP图\nX | X   1   0   1   0   1\n——————————————————————————\nX | 0   0   0   0   0   0\n0 | 0   0   1   *1  1   *1\n1 | 0   1   *1  2   *2  2\n1 | 0   1   *1  *2  *2  *3\n1 | 0   1   *1  *2  *2  *3\n1 | 0   1   *1  *2  *2  *3\n```\n```c++\n// 正确DP图\nX | X   1   0   1   0   1\n——————————————————————————\nX | 0   0   0   0   0   0\n0 | 0   0   1   0   1   0\n1 | 0   1   0   2   0   2\n1 | 0   1   0   1   0   1\n1 | 0   1   0   1   0   1\n1 | 0   1   0   1   0   1\n```\n\n## 错误2\n如果里面写成这样：\n```c++\ndp[i][j] == max(max(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]+1);\nret = max(ret, dp[i][j]);\n...\nreturn ret;\n```\n则属于**彻底混淆**了自己对于dp数组的定义，一定要是**以nums1[i]结尾**的子数组和**以nums1[j]结尾**的子数组的最长子数组，对于`[1,0,0,0,1]和[1,0,0,1,1]`给出的答案是4，但是正确答案应该是3\n```c++\n// 错误DP图\nX | X   1   0   0   0   1\n——————————————————————————\nX | 0   0   0   0   0   0\n1 | 0   1   0   0   0   1\n0 | 0   0   2   *2  *2  0\n0 | 0   0   *2  3   *3  0\n1 | 0   1   0   0   0   *4\n1 | 0   1   0   0   0   *4\n```\n```c++\n// 正确DP图\nX | X   1   0   0   0   1\n——————————————————————————\nX | 0   0   0   0   0   0\n1 | 0   1   0   0   0   1\n0 | 0   0   2   1   1   0\n0 | 0   0   1   3   2   0\n1 | 0   1   0   0   0   3\n1 | 0   1   0   0   0   1\n```","tags":["算法","动态规划"]},{"title":"子集组合排列","url":"/2022/03/20/子集组合排列/","content":"\n# 零. 子集、组合和排列问题汇总\n- 组合问题和子集问题是等价的\n- 参考[labuladong](https://labuladong.gitee.io/algo/4/30/110/)和优秀题解\n\n# 一. 子集问题\n\n## 78 [子集划分](https://leetcode-cn.com/problems/subsets/)\n\n### 1.1 子集扩张\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        if(nums.empty())\n            return vector<vector<int>>(1, vector<int>());\n        int last = nums.back(); nums.pop_back();\n        vector<vector<int>> sub = subsets(nums);\n        int sz = sub.size();\n        for(int i=0; i<sz; ++i){\n            vector<int> tmp = sub[i];\n            tmp.push_back(last);\n            sub.push_back(tmp);\n        }\n        return sub;\n    }\n};\n```\n\n### 1.2 回溯1\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void traceback(vector<int>& nums, int pos){\n        if(pos == nums.size()){\n            ret.push_back(cur);\n            return;\n        }\n        // 选\n        cur.push_back(nums[pos]);\n        traceback(nums, pos+1);\n        cur.pop_back();\n        \n        // 不选\n        traceback(nums, pos+1);\n    }\n    \n    vector<vector<int>> subsets(vector<int>& nums) {\n        traceback(nums, 0);\n        return ret;\n    }\n};\n```\n\n### 1.3 回溯2(★)\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void traceback(vector<int>& nums, int pos){\n        ret.push_back(cur);\n        for(int i=pos; i<nums.size(); ++i){\n            cur.push_back(nums[i]);\n            traceback(nums, i+1);\n            cur.pop_back();\n        }\n    }\n    \n    vector<vector<int>> subsets(vector<int>& nums) {\n        traceback(nums, 0);\n        return ret;\n    }\n};\n```\n\n## 90 [子集划分Ⅱ](https://leetcode-cn.com/problems/subsets-ii/)\n\n1. 两条值相同的相邻树枝会产生重复，如果**一个节点**有多条值相同的树枝相邻，则只遍历第一条，剩下的都剪掉，不要去遍历（不能让队员越权）\n2. **“使用过”在这个树形结构上是有两个维度的，一个维度是同一树枝上使用过，一个维度是同一树层上使用过。** 我们要去重的是同一树层上的“使用过”，同一树枝上的都是一个组合里的元素，不用去重。（注意：这里的同一树层指的是由同一个父节点引出的子节点，叔伯的子节点可以用相同下一个值，比如下图[1]接2和[2]接2，都可以用2；但是[1]接2就不能接2'了！）\n\n![labuladong图示 LC-90](https://labuladong.gitee.io/algo/images/排列组合/9.jpeg)\n\n### 2.1 回溯1\n```c++\nclass Solution {\npublic:\n    vector<int> cur;\n    vector<vector<int>> ret;\n\n    void traceback(bool choosePre, int pos, vector<int> &nums) {\n        if (pos == nums.size()) {\n            ret.push_back(t);\n            return;\n        }\n        // 不选\n        traceback(false, cur + 1, nums);\n        \n        // 要在 [选] 之前执行，要在 [不选] 之后执行\n        if (!choosePre && pos > 0 && nums[pos - 1] == nums[pos]) return;\n        \n        // 选\n        cur.push_back(nums[pos]);\n        traceback(true, pos + 1, nums);\n        cur.pop_back();\n    }\n\n    vector<vector<int>> subsetsWithDup(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        traceback(false, 0, nums);\n        return ret;\n    }\n};\n```\n\n### 2.2 回溯2(★)\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, int pos){\n        ret.push_back(cur);\n        for(int i=pos; i<nums.size(); ++i){\n            // i从pos开始，天然可以判定同一父节点的子节点们不会重复\n            // 即只让重复段的第一个节点的树向下生长\n            // 如果i从0开始，无法确定pos-1位置是否使用过，需要\n            // 借助一个used数组\n            if(i > pos && nums[i] == nums[i-1]) continue;\n            cur.push_back(nums[i]);\n            backtrack(nums, i+1);\n            cur.pop_back();\n        }\n    }\n    \n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        sort(nums.begin(), nums.end()); // 要排序\n        backtrack(nums, 0);\n        return ret;\n    }\n};\n```\n\n### 2.3 回溯2（易读版利用used判断树层重复）\n也可用used数组来简化理解，`nums[i]`与`nums[i-1]`相等，且`nums[i-1]`没有使用的情况下，表明重复了，因为只有在`nums[i-1]`用过之后才会不用，而`nums[i-1]`之前用过，其后的子树是已经加入到结果了，即可跳过当前点\n```c++\nclass Solution {\nprivate:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtracking(vector<int>& nums, int pos, vector<bool>& used) {\n        ret.push_back(cur);\n        for (int i = pos; i < nums.size(); i++) {\n            // used[i-1] == true，说明同一树支nums[i-1]使用过\n            // used[i-1] == false，说明同一树层nums[i-1]使用过\n            // 而我们要对同一树层使用过的元素进行跳过\n            if (i > 0 && nums[i] == nums[i - 1] && !used[i-1]) continue;\n            used[i] = true;\n            cur.push_back(nums[i]);\n            backtracking(nums, i + 1, used);\n            cur.pop_back();\n            used[i] = false;\n        }\n    }\n\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        vector<bool> used(nums.size(), false);\n        sort(nums.begin(), nums.end()); // 去重需要排序\n        backtracking(nums, 0, used);\n        return ret;\n    }\n};\n\n```\n\n# 二. 组合问题\n\n## 39 [组合总数](https://leetcode-cn.com/problems/combination-sum/)\n\n### 1.1 回溯\nnums中的每个数字可以多次使用\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, int pos, int target){\n        if(target <= 0){\n            if(target == 0) ret.push_back(cur);\n            return;\n        }\n        for(int i=pos; i<nums.size(); ++i){\n            cur.push_back(nums[i]);\n            backtrack(nums, i, target-nums[i]); // 依旧传入i\n            cur.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum(vector<int>& nums, int target) {\n        backtrack(nums, 0, target);\n        return ret;\n    }\n};\n```\n\n## 2. 40 [组合总数Ⅱ](https://leetcode-cn.com/problems/combination-sum-ii/)\nnums中的每个数字在每个组合中只能使用一次 && 解集不能包含重复的组合。\n\n说这是一个组合问题，其实换个问法就变成子集问题了：请你计算 candidates 中所有和为 target 的子集。\n\n### 2.1 回溯1\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, int pos, int target, bool preUsed){\n        if(target < 0) return;\n        if(target == 0){\n            ret.push_back(cur);\n            return;\n        }\n        if(pos >= nums.size()) return; // 不能放前面\n        if(nums[pos] > target) return; // 剪枝：当前和后面的不可能会选\n        \n        // 不选\n        backtrack(nums, pos+1, target, false);\n        \n        if(pos>0 && nums[pos-1] == nums[pos] && !preUsed) return;\n        \n        // 选\n        cur.push_back(nums[pos]);\n        backtrack(nums, pos+1, target - nums[pos], true);\n        cur.pop_back();\n    }\n    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {\n        sort(nums.begin(), nums.end());\n        backtrack(nums, 0, target, false);\n        return ret;\n    }\n};\n```\n\n### 2.2 回溯2(★)\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, int pos, int target){\n        if(target == 0){\n            ret.push_back(cur);\n            return;\n        }\n        for(int i=pos; i<nums.size(); ++i){\n            if(i>pos && nums[i-1] == nums[i]) continue; // 值相同的树枝，只遍历第一条，防止重复\n            if(target < nums[i]) return; // 剪枝：当前和后面的不可能会选\n            cur.push_back(nums[i]);\n            backtrack(nums, i+1, target-nums[i]);\n            cur.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {\n        sort(nums.begin(), nums.end());\n        backtrack(nums, 0, target);\n        return ret;\n    }\n};\n```\n\n\n# 三. 排列问题\n\n## 1. 46 [全排列](https://leetcode-cn.com/problems/permutations/)\n不含重复数字的数组：nums，经典回溯\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, vector<bool>& used){\n        if(cur.size() == nums.size()){\n            ret.push_back(cur);\n            return;\n        }\n        for(int i=0; i<nums.size(); ++i){\n            if(used[i]) continue;\n            used[i] = true;\n            cur.push_back(nums[i]);\n            backtrack(nums, used);\n            cur.pop_back();\n            used[i] = false;\n        }\n    }\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<bool> used(nums.size(), false);\n        backtrack(nums, used);\n        return ret;\n    }\n};\n```\n\n## 2. 47 [全排列Ⅱ](https://leetcode-cn.com/problems/permutations-ii/)\n含有重复数字的数组：nums\n\n### 2.1 哈希（有意思）\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> res;\n    \n    void traceback(map<int, int>& hash, vector<int>& cur, int n){\n        if(cur.size() == n){\n            res.push_back(cur);\n            return;\n        }\n        for(map<int, int>::iterator itr=hash.begin(); itr!=hash.end(); ++itr){\n            if(itr->second){\n                --itr->second;\n                cur.push_back(itr->first);\n                traceback(hash, cur, n);\n                cur.pop_back();\n                ++itr->second;\n            }\n        }\n    }\n    \n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        map<int, int> hash;\n        vector<int> cur;\n        for(auto e: nums) ++hash[e];\n        traceback(hash, cur, nums.size());\n        return res;\n    }\n};\n```\n\n### 2.2 回溯(跟子集问题2.3很像)\n当出现重复元素时，比如输入 nums = [1,2,2',2'']，2' 只有在 2 已经被使用的情况下才会被选择，2'' 只有在 2' 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定。\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> ret;\n    vector<int> cur;\n    void backtrack(vector<int>& nums, vector<bool>& used){\n        if(cur.size() == nums.size()){\n            ret.push_back(cur);\n            return;\n        }\n        for(int i=0; i<nums.size(); ++i){\n            // i从0开始，固定相同的元素在排列中的相对位置\n            if(i>0 && nums[i]==nums[i-1] && !used[i-1]) continue;\n            if(used[i]) continue;\n            used[i] = true;\n            cur.push_back(nums[i]);\n            backtrack(nums, used);\n            cur.pop_back();\n            used[i] = false;\n        }\n    }\n    \n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        sort(nums.begin(), nums.end()); // 必须排序\n        vector<bool> used(nums.size(), false);\n        backtrack(nums, used);\n        return ret;\n    }\n};\n```","tags":["算法"]},{"title":"字符串相乘","url":"/2022/03/19/字符串相乘/","content":"\n# 43 [字符串相乘](https://leetcode-cn.com/problems/multiply-strings/)\n*两数A位和B位，相加后位数最大为`max(A, B)+1`；相乘后最大位数为`A+B`*\n\n### 1.1 常规法\n将两个串的指针位置`m`和`n`、进位`c`统一放入while循环，代码就会很**优美**。 代码可以继续优化速度存储：addtion函数改为原地相加，但是会破坏代码的逻辑性，就不改了。\n```c++\nclass Solution {\npublic:\n    string addtion(string& num1, string& num2){\n        int m = num1.size()-1, n = num2.size()-1;\n        int c = 0;\n        string ret;\n        while(m>=0 || n>=0 || c){\n            int a = m>=0 ? num1[m]-'0' : 0; // 越界定0技巧\n            int b = n>=0 ? num2[n]-'0' : 0; // 越界定0技巧\n            int s = a + b + c;\n            ret.push_back('0' + s % 10);\n            c = s / 10;\n            --m, --n;\n        }\n        reverse(ret.begin(), ret.end()); // 反转\n        return ret;\n    }\n    \n    string multiply(string num1, string num2) {\n        if(num1==\"0\" || num2==\"0\") return \"0\";\n        string res = \"0\";\n        int cnt = 0; // 记录表示每次乘完左移的0的个数\n        int m = num2.size()-1;\n        while(m >= 0){\n            int n = num1.size()-1;\n            int b = num2[m] - '0';\n            int c = 0;\n            string ret(cnt, '0'); // 初始化\"左移\"0\n            while(n>=0 || c){\n                int a = n>=0 ? num1[n]-'0' : 0; // 越界定0技巧\n                int s = a * b + c;\n                ret.push_back('0' + s % 10);\n                c = s / 10;\n                --n;\n            }\n            reverse(ret.begin(), ret.end()); // 反转\n            res = addtion(res, ret);\n            --m, ++cnt;\n        }\n        return res;\n    }\n};\n```\n\n### 1.2 优化竖式 (LC高赞)(很难想到啊)\n![说明图](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/algorithm/LC-43-字符串相乘-1.png)\nnum1[i] x num2[j] 的结果为 tmp(位数为两位，\"0x\",\"xy\"的形式)，其第一位位于 res[i+j]，第二位位于 res[i+j+1]。\n```c++\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        if(num1 == \"0\" || num2 == \"0\") return \"0\";\n        int m = num1.size(), n = num2.size();\n        vector<int> temp(m+n, 0); // 数组哦\n        for(int i=m-1; i>=0; --i){\n            for(int j=n-1; j>=0; --j){\n                int cur = (num1[i]-'0') * (num2[j]-'0') + temp[i+j+1];\n                temp[i+j+1] = cur % 10; // 存储计算结果低位 =\n                temp[i+j] += cur / 10; // 存储计算结果高位 +=\n            }\n        }\n        string ret; ret.reserve(m+n);\n        int i = 0;\n        for(; i<temp.size(); ++i) // 去掉前缀0\n            if(temp[i] != 0) break;\n        for(; i<temp.size(); ++i) // 放入字符串\n            ret.push_back(char(temp[i] + '0'));\n        return ret;\n    }\n};\n```","tags":["算法"]},{"title":"二叉树最大和","url":"/2022/03/19/二叉树最大和/","content":"\n# 1. 124 [二叉树中的最大路径和](https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/)\n\n### 1.1 两个递归的笨方法\n```c++\nclass Solution {\npublic:\n    int ans = INT_MIN;\n    int core(TreeNode* root) { // 找到以root为起点，深入向下的最大路径一条线（分叉只走一条）\n        if(!root) return 0;\n        int lv = core(root->left);\n        int rv = core(root->right);\n        int res = max(max(lv, rv), 0) + root->val;\n        return res;\n    }\n    \n    void recursion(TreeNode* root){ // 遍历树中每个结点，尝试寻找本题答案的“起点根”\n        if(!root) return;\n        recursion(root->left);\n        recursion(root->right);\n        int lv = core(root->left); // 以左孩子为起点的“线”\n        int rv = core(root->right); // 以右孩子为起点的“线”\n        if(lv < 0) lv = 0;\n        if(rv < 0) rv = 0;\n        ans = max(ans, lv + rv + root->val);\n    }\n    \n    int maxPathSum(TreeNode* root) {\n        recursion(root);\n        return ans;\n    }\n};\n```\n\n### 1.2 一个递归的好方法\n```c++\nclass Solution {\npublic:\n    int ans = INT_MIN;\n    int core(TreeNode* root) {\n        if(!root) return 0;\n        \n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        int lv = max(core(root->left), 0);\n        int rv = max(core(root->right), 0);\n        \n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        int ifAnsRoot = root->val + lv + rv;\n        ans = max(ans, ifAnsRoot);\n        \n        // 返回\n        return max(lv, rv) + root->val;\n    }\n    \n    int maxPathSum(TreeNode* root) {\n        core(root);\n        return ans;\n    }\n};\n```\n\n# 2. 543 [二叉树的直径](https://leetcode-cn.com/problems/diameter-of-binary-tree/)\n\n## **这些问题都有共性：递归主线依旧，所求是副产物**\n\n### 2.1 两个递归的笨方法\n```c++\nclass Solution {\npublic:\n    int core(TreeNode* root){\n        if(!root) return 0;\n        int l = core(root->left);\n        int r = core(root->right);\n        return max(l, r) + 1;\n    }\n    \n    int diameterOfBinaryTree(TreeNode* root) {\n        if(!root) return 0;\n        int l = diameterOfBinaryTree(root->left);\n        int r = diameterOfBinaryTree(root->right);\n        int m = core(root->left) + core(root->right);\n        return max(m, max(l, r));\n    }\n};\n```\n\n### 2.2 一个递归的好方法\n```c++\n// 递归主线还是算高度，直径是 [副产品]\nclass Solution {\npublic:\n    int res = 0;\n    int core(TreeNode* root){ // 给定根节点，计算最长深度节点数\n        if(!root) return 0;\n        int l = core(root->left); // 左儿子为根的子树的深度\n        int r = core(root->right); // 右儿子为根的子树的深度\n        res = max(res, l + r); // 在这里更新res，不用+1，因为路径长度是总结点长度-1\n        return max(l, r) + 1; // 返回该节点为根的子树的最长深度节点数\n    }\n    \n    int diameterOfBinaryTree(TreeNode* root) {\n        if(!root) return 0;\n        core(root);\n        return res;\n    }\n};\n```","tags":["算法","树"]},{"title":"Rand7实现Rand10","url":"/2022/03/19/Rand7实现Rand10/","content":"\n# 470 [用 Rand7() 实现 Rand10()](https://leetcode-cn.com/problems/implement-rand10-using-rand7/)\n\n## 1. 拒绝采样\n\n在解LC-470前先介绍一道拒绝采样的经典问题：利用频率近似概率的方式求出 $\\pi$ 的值。在 $1\\times1$ 的方块内随机坐标采样，记录落入以原点为圆心，半径为1的 $\\frac{1}{4}$ 圆内的次数。\n\n由 $\\frac{1}{4}\\pi r^2 = \\frac{cnt}{N}$ 可得 $\\pi = \\frac{4\\times cnt}{N\\times r^2}$ ，由于 $r=1$ ，所以 $\\pi = \\frac{4\\times cnt}{N}$\n\n```c++\nint main() {\n    srand((unsigned)time(0)); // time(0)表示从1970到现在的秒数\n    int N = (int)1e7, cnt = 0;\n    for (int i = 0; i < N; i++) {\n        double a = (1.0 * rand() / RAND_MAX); // 除以RAND_MAX归一化0~1\n        double b = (1.0 * rand() / RAND_MAX);\n        if (a * a + b * b < 1.0) cnt++; // 落入1/4圆则加一\n    }\n    printf(\"%lf\", (4.0 * cnt) / N);\n    return 0;\n}\n```\n\n## 2. LC-470 Rand7生成Rand10\n[力扣高赞题解](https://leetcode-cn.com/problems/implement-rand10-using-rand7/solution/cong-zui-ji-chu-de-jiang-qi-ru-he-zuo-dao-jun-yun-/)\n\n**(rand_X() - 1) × Y + rand_Y() ==> 可以等概率的生成[1, X * Y]范围的随机数**\n```c++\nclass Solution {\npublic:\n    int rand10() {\n        while(true){\n            // 等概率生成[1,49]范围的随机数\n            int num = (rand7()-1)*7 + rand7();\n            // 拒绝采样，并返回[1,10]范围的随机数\n            if(num <= 40) return num % 10 + 1;\n        }\n    }\n};\n```","tags":["算法"]},{"title":"最长有效括号","url":"/2022/03/19/最长有效括号/","content":"\n# 32 [最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/)\n\n## 方法1：动态规划\n\n### 1.1 错误1\n\n**无法解决诸如`(())`的问题。** 要考虑到当前碰到右括号后，前面的是左括号还是右括号，然后分别进行处理\n\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int n = s.size();\n        int l = 0;\n        vector<int> dp(n);\n        int ret = 0;\n        for(int i=0; i<n; ++i){\n            if(s[i] == '('){\n                ++l; \n                continue;\n            }\n            if(l){\n                --l;\n                dp[i] = 2;\n                if(i-2 >= 0) dp[i] += dp[i-2]; // BUG\n                ret = max(ret, dp[i]);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n### 1.2 错误2\n\n**无法解决诸如`()(())`的问题。** \n\n1. `*****()` 好解决直接 `dp[i] += dp[i-2];`\n2. `*****))` 需要额外判断找到与当前右括号`i`对应的左括号`t`，然后`t`的左边要继续判断\n\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int n = s.size();\n        int l = 0;\n        vector<int> dp(n);\n        int ret = 0;\n        for(int i=0; i<n; ++i){\n            if(s[i] == '('){\n                ++l; \n                continue;\n            }\n            if(l){\n                --l;\n                dp[i] = 2;\n                if(s[i-1] == '(' && i-2 >= 0) dp[i] += dp[i-2];\n                else if(s[i-1] == ')') dp[i] += dp[i-1]; // 这里要继续修改\n                ret = max(ret, dp[i]);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n### 1.3 正确答案\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int n = s.size();\n        int l = 0;\n        vector<int> dp(n);\n        int ret = 0;\n        for(int i=0; i<n; ++i){\n            if(s[i] == '('){\n                ++l; \n                continue;\n            }\n            if(l){\n                --l;\n                dp[i] = 2;\n                if(s[i-1] == '(' && i-2 >= 0) dp[i] += dp[i-2];\n                else if(s[i-1] == ')'){\n                    dp[i] += dp[i-1];\n                    if(i-dp[i]>=0) //添加这里\n                        dp[i] += dp[i-dp[i]];\n                }\n                ret = max(ret, dp[i]);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n### 1.4 官方的DP（LC官方）(Elegant)\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int n = s.size();\n        vector<int> dp(n, 0);\n        int res = 0;\n        for(int i=1; i<n; ++i){\n            if(s[i] == '(') continue;\n            // 只有以')'结尾的才有效\n            if(s[i-1] == '('){\n                if(i-2 < 0) dp[i] = 2; // 防止越界\n                else dp[i] = dp[i-2] + 2; // 转移函数\n            }else{\n                if(i-dp[i-1]-1>=0 && s[i-dp[i-1]-1] == '('){\n                    dp[i] = dp[i-1] + 2; // 转移函数\n                    if(i-dp[i-1]-2 >= 0)\n                        dp[i] += dp[i-dp[i-1]-2];\n                }\n            }\n            res = max(res, dp[i]);\n        }\n        return res;\n    }\n};\n```\n\n## 方法2：栈（LC官方）\n保持栈底元素为当前已经遍历过的元素中 **「最后一个没有被匹配的右括号的下标」** 需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及的「最后一个没有被匹配的右括号的下标」，为了保持统一，我们在一开始的时候往栈中放入一个值为 -1−1 的元素。\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int n = s.size();\n        stack<int> stk;\n        stk.push(-1);\n        int res = 0;\n        for(int i=0; i<n; ++i){\n            if(s[i] == '(') stk.push(i);\n            else{\n                stk.pop();\n                if(stk.empty()) // 更新「最后一个没有被匹配的右括号的下标」\n                    stk.push(i);\n                else\n                    res = max(res, i-stk.top()); // 以i结尾的有效性括号长度\n            }\n        }\n        return res;\n    }\n};\n```\n\n## 方法3：贪心（LC官方）\n利用两个计数器`l和r`，从左到右遍历字符串，遇到左括号则`l加1`，遇到右括号则`r加1`；当`l和r`相等时更新最长长度，当`r>l时将l和r置0`\n\n这样的做法贪心地考虑了以当前字符下标结尾的有效括号长度，每次当右括号数量多于左括号数量的时候之前的字符我们都扔掉不再考虑，重新从下一个字符开始计算，但这样会漏掉一种情况，就是遍历的时候左括号的数量始终大于右括号的数量，即 (() ，这种时候最长有效括号是求不出来的。\n\n解决的方法也很简单，我们只需要从右往左遍历用类似的方法计算即可，只是这个时候判断条件反了过来：当`r<l时将l和r置0`。\n\n这样我们就能涵盖所有情况从而求解出答案。\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int l = 0, r = 0;\n        int res = 0;\n        for(int i=0; i<s.size(); ++i){\n            if(s[i] == '(') ++l;\n            else ++r;\n            if(l == r) res = max(res, l + r);\n            else if(r > l) l = r = 0;\n        }\n        l = r = 0; // 重置！\n        for(int i=s.size()-1; i>=0; --i){\n            if(s[i] == '(') ++l;\n            else ++r;\n            if(l == r) res = max(res, l + r);\n            else if(l > r) l = r = 0;\n        }\n        return res;\n    }\n};\n```","tags":["算法","动态规划"]},{"title":"目标检测SSD","url":"/2021/11/23/目标检测SSD/","content":"\n> **目标检测SSD**\n\n### 1. 锚框的长和宽\n\n#### 1.1 书上代码解析\ns指的是长宽的缩放比例而非面积的缩放比例，比如s=0.5，则面积就是原图像的0.5^2=0.25倍。r是宽高比，指的是将原图像归一化为正方形后截取的锚框的宽高比；或者说是在原图像的宽高比基础上乘以r，才是锚框的宽高比。锚框的实际宽高比即$\\frac{w}{h}*r$。之所以r=1时你看到的是方形，之后会解释。\n由此，可得以下方程组\n$$\\begin{cases}\nw_0*h_0=s^2*w*h\\\\\n\\frac{w_0}{h_0}=\\frac{w}{h} * r\n\\end{cases}$$\n解得\n$$\n\\begin{cases}\nw_0=s*w*\\sqrt{r}\\\\\nh_0=s*h/\\sqrt{r}\n\\end{cases}\n$$\n$w_0和h_0$分别处以w和h进行归一化，可得\n$$\n\\begin{cases}\nw_0=s*\\sqrt{r} \\\\\nh_0=s/\\sqrt{r}\n\\end{cases}\n$$\n而在代码中我们可以看到：\n\n```\nw0 = torch.cat((size_tensor * torch.sqrt(ratio_tensor[0]),\n                   sizes[0] * torch.sqrt(ratio_tensor[1:])))\\\n                   * in_height / in_width\nh0 = torch.cat((size_tensor / torch.sqrt(ratio_tensor[0]),\n                   sizes[0] / torch.sqrt(ratio_tensor[1:])))\n```\n\n先不看`in_height / in_width`。上面解得的归一化后的公式与代码所写的一模一样。代码中的$w_0$和$h_0$就是锚框归一化后的宽高（此时消除了原图像w和h的影响，可以认为，r所代表的宽高比就是此时锚框的宽高比，r=1时，是一个正方形锚框，也即此时$w_0$和$h_0$的值是一样的）。但是呢，由于我们显示的时候需要乘以图像的实际宽高所以，乘后的锚框实际宽高比就不是1了，所以才要乘以`in_height / in_width`，作用就是抵消乘以实际图像长宽后r会改变的问题，当然这样做存粹是为了显示方便（也让你误以为r是指锚框的宽高比），带来的副作用就是，锚框的实际面积就不再是原始图像的$s^2$。`(￣ε(#￣)。`\n\n由于实际在我们进行目标检测时，特征图长和宽都是相同的，比如(19, 19)、(7, 7)，所以`in_height / in_width`恒等于1，因此对于实际的使用并不会带来副作用。但此时，如果要将锚框显示出来，归一化后的锚框再乘以图像实际长宽后，所显示的锚框的长宽比会改变。如下图所示，特征图宽高是(1, 1)，当r=1，s=0.5时，最终锚框的宽高比并不是r=1，而是$\\frac{w}{h}*r$。即上述代码中`in_height / in_width`这部分失效了。好消息是，面积是原图的$s^2$，又符合定义了。`\\(￣︶￣\\))`\n\n![](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/object%20detection/目标检测SSD-图1.png)\n\n#### 1.2 尝试的改动\n\n所以如果r宽高比的定义按照**原图像的宽高比*r**来定义，那么沐神的代码和书上的公式在**实际使用**时都是没问题的。只是将这个函数作用于特征图**宽高不相同**的实例时（比如为了给观众显示方便，直接作用上面这幅图像），会产生一丢丢歧义：此时的r的定义居然又变回了**锚框的宽高比**。\n\n我们可以尝试来重新定义宽高比r（s定义不变），直接**认定它代表锚框的宽高比**，会有如下公式：\n$$\n\\begin{cases}\n\\frac{w_0}{h_0}=r\\\\\nw_0*h_0 = s^2*w*h\n\\end{cases}\n$$\n解得\n$$\n\\begin{cases}\nw_0=s*\\sqrt{w*h*r}\\\\\nh_0=s*\\sqrt{\\frac{w*h}{r}}\n\\end{cases}\n$$\n$w_0和h_0$分别处以w和h进行归一化，可得\n$$\n\\begin{cases}\nw_0=s*\\sqrt{\\frac{h*r}{w}}\\\\\nh_0=s*\\sqrt{\\frac{w}{r*h}}\n\\end{cases}\\\\\n$$\n这样定义的话，就要求`multibox_prior()`函数要传入原图像的长度和宽度。\n下面实验验证，不论特征图的长宽怎么变，r和s的定义都是一致的。\n\n\n![](https://raw.githubusercontent.com/fkjkkll/OnlineSource/master/Image/object%20detection/目标检测SSD-图2.png)\n\n\n### 2. 锚框偏移\n\n假设$\\hat{g}_j$是某个标签目标，$d_i$是某个anchor，边框回归与Faster-RCNN类似\n回归的偏移相对的是$d_i$的中点和宽高(cx, cy, w, h)\n$$\n\\begin{cases}\n\\hat{g}^{cx}_j = (g^{cx}_j - d^{cx}_i)/d^w_i\\\\\n\\hat{g}^{cy}_j = (g^{cy}_j - d^{cy}_i)/d^h_i\\\\\n\\hat{g}^{cw}_j = log(g^{cw}_j / d^{cw}_i)\\\\\n\\hat{g}^{ch}_j = log(g^{ch}_j / d^{ch}_i)\\\\\n\\end{cases}\\\\\n$$\n解释：\n\n- 激活的锚框（即给分配了某gt的正样本），其与某gt的IOU肯定不低，则其x、y、w、h也肯定差不大，这是前提\n- x、y：做差后分布于零点对称，除以锚框宽或高起到归一化作用，值分布变窄\n- w、h：做除法后用log，可近似线性，且使得结果的分布呈现零点对称，使得网络回归更简单","tags":["目标检测"]},{"title":"C++ priority_queue自定义排序","url":"/2021/10/31/C-priority-queue自定义排序/","content":"\n> **C++ priority_queue自定义排序总结**\n\n### 方法一：函数指针\n\n以下几种都可以，具体可参考《C++ Primer》\n\n```c++\ntypedef int elem;\nbool cmp(elem a, elem b) {\n    return a < b;\n}\npriority_queue<elem, vector<elem>, decltype(&cmp)> q(arr.begin(), arr.end(), cmp);\npriority_queue<elem, vector<elem>, decltype(cmp)*> q(arr.begin(), arr.end(), cmp);\npriority_queue<elem, vector<elem>, bool(*)(elem, elem)> q(arr.begin(), arr.end(), cmp);\n// 构造函数前两个可以不填，但是必须传入cmp\n// 前面模板只是告诉它是一个函数指针bool(*)(elem, elem)，但并没有传入函数地址（实体）\npriority_queue<elem, vector<elem>, bool(*)(elem, elem)> q(cmp);\n```\n\n**对于cmp和&cmp你应该这样理解，cmp是函数的首地址，它的类型是bool(elem,  elem)，&cmp表示一个指向函数cmp这个对象的地址，它的类型是bool(*)(elem, elem)，因此test和&test所代表的地址的值是一样的，但类型不一样！**\n\n### 方法二：重载运算符\n\n```c++\nstruct elem {\n    int a;\n    int b;\n    bool operator<(const elem& another) const {\n        return this->b < another.b;\n    }\n};\npriority_queue<elem, vector<elem>, less<elem>> q;\n```\n注意：operator函数要有const，这是能构成重载的，否则未找到对应函数报错\n\n### 方法三：仿函数\n\n```c++\nstruct elem {\n    int a;\n    int b;\n};\nstruct cmp {\n    bool operator()(const elem& left, const elem& right) {\n        return left.b < right.b;\n    }\n};\npriority_queue<elem, vector<elem>, cmp> q;\npriority_queue<elem, vector<elem>, cmp> q(arr.begin(), arr.end()); // 不需要传入cmp参数\n```\n\n### 方法四：匿名函数（类似仿函数）\n```c++\nauto cmp = [](const item& a, const item& b) {return a.first < b.first; }; // 实例\npriority_queue<item, vector<item>, decltype(cmp)> pq(arr.begin(), arr.end(), cmp); // decltype解析类型，并需要传入实例\n```\n\n","tags":["C/C++"]},{"title":"数组指针与指针数组","url":"/2021/09/12/数组指针与指针数组/","content":"\n\n## 数组指针和指针数组\n`s`的类型是二维数组，但是其本身也是一个一维指针（数组指针），其静态类型是`char(*)[10]`，每次移动是10个char长度也就是10字节。其解引用后静态类型是`char*`，每次移动是1个char长度也就是1字节。\n\n值得注意的是，类似函数指针，`s、*s、&s`其值都是一样的，都是该二维数组首个元素的地址，因此不能将数组名当成是一个值为元素首地址的常规变量！因为永远无法取得其地址。\n\n因此，下面代码中将`s`赋值给双重指针`ps`是完全错误的；双重指针要经过两次间接跳转访问元素：比如`ps`的值为`0x0000ff33`，`*ps`首先跳转到该位置后取其值，比如说那个地址的值为`0x0000eedd`，将`*ps`当成字符串输出时，会再次跳转到地址为`0x0000eedd`的位置取出char，完全乱了。\n\n**而作为对比，数组指针解引用不会跳转，只会修改其步幅跨度**\n```c++\nchar s[][10] = { \"aaa\", \"bbb\", \"ccc\" };\nchar** ps = (char**)s;\ncout << (decltype(*s))*ps << endl;\t// OK 强行改变了类型\ncout << *(char(*)[10])ps << endl;\t// OK 强行改变了类型\ncout << (char(&)[10])*ps << endl;\t// OK 强行改变了类型\ncout << *ps << endl;\t\t\t\t// ERROR! 两次跳转乱了\n```\n\n这里`s`是一个指针数组(确定类型要从内而外，从右向左)，因此可以将其赋给双重指针，他们取char都要经过两次跳转。\n```c++\nconst char* s[] = { \"aaa\", \"bbb\", \"ccc\" };\nchar** ps = (char**)s;\ncout << *ps << endl;\t// OK\n```","tags":["C/C++"]},{"title":"读者写者问题","url":"/2021/08/27/读者写者问题/","content":"\n> **经典读者写者问题**\n\n### 读者写者问题\n\n##### 1、读者优先\n\n```c++\nint readcount=0; \nsemaphore RCSignal=1, fileSrc=1;\n// RCSignal readcount修改互斥量\n// fileSrc 文件资源互斥量：实现读者优先\n\n// 读者进程：\n    P(RCSignal);\n    readcount++;\t\n    if (readcount == 1)\n        P(fileSrc);\n    V(RCSignal);\n    // ...\n    // reading is performed\n    // ...\n    P(RCSignal);\n    readcount--;\n    if (readcount == 0)\n        V(fileSrc);\n    V(RCSignal);\n \n// 写者进程：     \n    P(fileSrc);\n    //...\n    //writing is performed\n    //...\n    V(fileSrc);\n```\n\n##### 2、写者优先\n\n```c++\nint readcount=0, writecount=0; \nsemaphore RCSignal=1, WCSignal=1, read=1, fileSrc;\n// RCSignal readcount修改互斥量\n// WCSignal writecount修改互斥量\n// read 实现写者优先：拦截读者\n// fileSrc 文件资源互斥量：保护剩余读者（拦截写者），以及写者唯一\n\n// 读者进程：\nP(read);\n    P(RCSignal);\n        readcount++;\n        if(readcount == 1 ) \n            P(fileSrc);\n    V(RCSignal);\nV(read);\n    // ...\n    // reading is performed\n    // ...\nP(RCSignal);\n    readcount--;\n    if (readcount == 0 )\n        V(fileSrc);\nV(RCSignal);\n\n// 写者进程：     \nP(WCSingal);\n    writecount++;\n    if (writecount == 1 )\n        P(read);\nV(WCSingal);\nP(fileSrc);\n    // writing is performed\nV(fileSrc);\nP(WCSingal);\n    writecount --;\n    if (writecount == 0)\n        V(read);\nV(WCSingal); \n```\n\n\n##### 参考资料\n\nhttps://www.bilibili.com/video/av21593625\nhttps://blog.csdn.net/c1194758555/article/details/52805918\nhttps://blog.csdn.net/william_munch/article/details/84256690      （有问题？）\n","tags":["OS"]},{"title":"Essential C++ note","url":"/2021/08/05/essential-C-note/","content":">**记录本书（对我来说）的一些重点内容**\n\n### 1 C++编程基础\n1. 初始化方法：构造函数法（constructor syntax）\n\n```c++\n    int var(66);\n    int var2{66}; // ok\n```\n\n2. srand()随机数种子；rand()则产生一个介于0和int所能表示的最大整数；需包含头文件cstdlib\n3. cerr（standard error）代表标准错误设备，与cout唯一区别就是不带缓冲，立即显示于用户终端\n\n### 2 面向过程的编程风格\n1. 使用模板，则声明与定义要放在一起\n2. 函数指针\n\n```c++\n    // 给函数指针赋初值\n    const vector<int>* (*seq_str)(int) = 0;\n    // seq_array是个数组，内放函数指针\n    const vector<int>* (*seq_array[])(int) = {\n        fibon_seq, lucas_seq, pell_seq,\n        triang_seq, square_seq, pent_seq\n    }\n```\n\n3. inline函数的声明和定义都需要放在头文件，声明和定义有一个标明inline即可（在类定义中实现则默认是inline）；其他的函数，则必须是**“定义放在程序代码文件”、“声明放在头文件”**\n4. 多文件共享变量\n\n```c++\n/*\n    变量只能定义一次，但是可以声明多次\n    假定main.cpp func.cpp func.h三个文件\n    1. 在func.cpp有一个int a=1;如果要在main.cpp中使用，要在func.h或main.cpp中写extern int a；\n    2. const object和inline函数一样，是“一次定义”规则下的例外。const object定义只要一出文件外就\n       不可见（意味着可以在多个程序代码中加以定义）。因此如果const int a=1想多文件共享，可以直接写\n       在func.h中，其他的非const object则不可。\n       可参考：https://www.icode9.com/content-1-915590.html\n*/\n```\n\n### 3 泛型编程风格\n1. list不支持iterator的偏移运算（+、-）但是有++和--\n2. 对于标准容器，不确保目标空间大小，可使用iterator inserter用插入操作替代赋值操作\n3. <这章挺多东西，需要结合书本去看>\n\n### 4 基于对象的编程风格\n1. 如果有必要为某个class编写[拷贝构造]，则同样有必要为它编写[赋值操作]\n2. 没有一个const reference class参数可以调用公开接口中的non-const成分\n3. 类中的变量声明为mutable，标明其不会破坏对象的**常量性**（constness），即可在const函数中可以修改它\n4. 当定义class的static function时，不可加上关键字static（同理静态成员变量）\n5. 当类中有静态成员变量时，需要及时在类外进行初始化，否则报错：无法解析的外部命令\n6. 通常情况：**operator*无参表示解引用；有参表示乘法**\n7. friend声明可以出现在类定义任意位置，不受public或private影响\n8. **嵌套类型**（Nested Type），类中可以定义嵌套类型，再用域解析符（例如每个STL容器类都有自己的iterator）\n9. 重载iostream（看书）\n10. 类的函数指针：\n\n```c++\n    void (num_sequence::*pm)(int) = 0;\n    // 如果决定上面一行复杂可以写成：\n    typedef void (num_sequence::*PtrType)(int);\n    PtrType pm = 0;\n    // 成员函数取址要加上class scope限定符和&取地址运算符（不同于一般函数，都不可以省！）\n    PtrType pm = &num_sequence::fibonaci;\n    // 调用，由此要引出pointer to member selection运算符“.*”和\"->*\"\n    (ns.*pm)(pos)\n    (pns->*pm)(pos)\n```\n\n### 5 面向对象编程风格\n1. 纯虚函数：将虚函数赋值为0\n\n```c++\n    virtual void gen_elems(int pos) = 0;\n```\n\n2. 任何类声明了纯虚函数，那么由于其接口不完整（无定义），程序无法为其产生实体。这种类只能作为派生类的子对象使用，而且前提是这些派生类为**所有**虚函数提供确切的定义。\n3. 一般规则：凡基类定义了虚函数，则destructor也要声明为virtual\n4. 一般而言，对象的拷贝构造函数开发者如果未提供，则编译器会自动生成默认的拷贝构造函数。然而以下情况默认的拷贝构造函数会被删除：\n\n```c++\n/*\n    1、存在非静态的const成员变量\n    2、存在非静态的引用成员变量\n    3、存在不能拷贝的成员变量\n    4、存在不能拷贝的基类\n    5、存在用户定义的移动构造函数或移动赋值函数\n*/\n```\n\n5. 在基类的constructor中，派生类的虚函数不允许被调用\n6. static_cast和dynamic_cast，前者无条件转换，后者判断（比如基类的指针是否真的指向了该派生类）是否可以转换为目的类型再进行转换\n\n### 6 以template进行编程\n1. 函数传入一个指针，只能改变指针所指对象的内容，要想改变指针本身（指向）就要传递reference to pointer\n\n```c++\n\tBTnode*& prev // 可以看成BTnode* &prev 或 ((BTnode*)&) prev\n```\n\n2. 模板类声明友元的问题：\n\n```c++\n\t// 下面代码直接运行会报错：无法解析的外部命令\n```\n\n```c++\n    template <typename T>\n    class A {\n    public:\n        A(T t):dy(t) {}\n        T dy;\n\n        friend ostream& operator<<(ostream& os, const A<T>& b);\n\n    private:\n        void func(ostream& os) const{\n            os << dy << endl;\n        }\n    };\n\n    template <typename T>\n    ostream& operator<<(ostream& os, const A<T>& b) {\n        b.func(os);\n        return os;\n    }\n\n    int main() {\n        A<double> a(4.2);\n        cout << a << endl;\n        return 0;\n    }\n```\n```c++\n/*\n    原因：\n    因为\"operator<<\"这个函数的参数T不应该依赖于class的模板参数，友元本来是可以访问类的所有数据成员的(该模板类的int、double、string对象)，你这样依赖的话，放到外部表名该参数T是属于类内部本身，解决方案是为了更好的支持友元，我们一般单独给友元一个模板参数\n    1、类中友元声明改为（意义不明不过能用，但是其下绿波浪线提示函数未定义）（不推荐）\n    friend ostream& operator<< <T>(ostream& os, const A<T>& b);\n    2、类中友元声明改为（S不同于T）（推荐）\n    template <typename S>\n    friend ostream& operator<<(ostream& os, const A<S>& b);\n*/\n```\n\n3. 非类型参数\n\n```c++\n/*\n    1、这类参数在模板内部都是常量值\n    2、只允许传入整形、指针和引用这三类\n    3、调用非类型参数的实参必须为常量表达式（必须在编译时能计算出结果的）\n*/\n```\n\n### 7 异常处理\n1. 重新抛出时，只需写下关键字throw即可。它只能出现于catch子句中\n2. 局部资源管理，在易发生异常后释放资源是一件风险很大的事情。虽然可以通过try catch处理，但是释放资源的代码要出现两次，不好。这就引出了resource acquisition is initialization(RAII)策略，即初始化阶段进行资源请求。说人话就是，在构造函数中请求所有资源，在析构函数中释放所有资源：C++保证，在异常处理机制终结某个函数之前，所有局部对象的destructor都会被调用。或者使用智能指针例如：unique_ptr、shared_ptr等。\n3. ptext = new vector<string>; 经过以下几个步骤（异常出现，余下不会执行，会沿着调用链抛出）\n\n```c++\n/*\n    // 可能会reorder哦~\n    1、分配足够的空间\n    2、将vector<string> default constructor应用于heap对象之上\n    3、将对象地址设置给ptext\n*/\n```\n\n\n\n\n\n","tags":["C/C++"]},{"title":"Hexo说明","url":"/2021/06/28/Hexo说明/","content":"\n> **Hexo相关说明**\n\n## 安装Hexo\n\n[安装hexo](https://blog.csdn.net/guixinchn/article/details/107787660)\n\n## Hexo基本语法\n\nhexo n 我的博客 == hexo new 我的博客 //新建文章\nhexo g == hexo generate //生成\nhexo s == hexo server //启动服务预览\nhexo d == hexo deploy //部署\n\nhexo server //Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s //静态模式\nhexo server -p 5000 //更改端口\nhexo server -i 192.168.1.1 //自定义 IP\nhexo clean //清除缓存，若是网页正常情况下可以忽略这条命令\n\n### Hexo相关\n\n1. 自动展开设置1：[显示部分摘要](https://blog.csdn.net/yueyue200830/article/details/104470646)\n2. 自动展开设置2：[显示部分摘要](https://www.zhihu.com/question/394167076)\n3. hexo显示公式乱码问题：[公式乱码问题](https://www.cnblogs.com/zhyantao/p/10424874.html)\n4. [如何在另一台电脑使用hexo更新博客](https://www.cnblogs.com/study-everyday/p/8902136.html)\n\n### Github相关\n如果无法deploy到Github，此时打开命令行输入`ping github.com`又失败，则可能是梯子的原因，无法进行DNS，即使关掉梯子也不行。此时可以手动在电脑的hosts文件里添加到Github的域名到ip映射，具体操作如下：\n1. 在[IP查询网页](https://ipaddress.com/website/github.com)搜索github，找到github的网站地址\n2. 进入`C:\\Windows\\System32\\drivers\\etc`修改hosts\n3. 由于需要权限所以**以管理员模式**打开cmd，cd到hosts，然后输入`notepad hosts`即可进行修改添加，只需插入`IP www.github.com和IP github.com`保存即可\n\n### 主题相关\n1. [NEXT常用配置](http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/)\n2. [背景图片修改问题](https://blog.csdn.net/qq_52116176/article/details/109406842)\n3. [tags无法显示问题](https://www.zhihu.com/question/29017171)\n4. [next动画速度修改](https://blog.csdn.net/Domino_b/article/details/81704118)\n5. [数学公式问题](https://blog.csdn.net/weixin_45511189/article/details/115798563)\n6. 代码复制功能：去主题的_config.yml修改`codeblock`下的`copy_button`改为`true`即可","tags":["Others"]},{"title":"Bitcpy","url":"/2021/06/24/Bitcpy/","content":"\n> **两种bitcpy的实现方式**\n\n### 1. 显示数据bits\n\n```C++\n#define HALF_WORD   uint16_t\n#define WORD        uint32_t\nvoid showBits(void* d, int len) {\n    int bytes = len / 8;\n    unsigned char* p = (unsigned char*)d;\n    for (int i = 0; i < bytes; i++) {\n        unsigned char tmp = 0x80;\n        for (int j = 0; j < 8; j++) {\n            if (tmp & *p)\n                printf(\"1\");\n            else\n                printf(\"0\");\n            tmp >>= 1;\n        }\n        printf(\" \");\n        ++p;\n    }\n    printf(\"\\n\");\n}\n```\n\n### 2. bitcpy 算术方式\n\n**拷贝方式是从单个字节的低位开始拷贝，进位式拷贝。**\n\n```C++\nint bitcopy(void* to, unsigned int tOfs, int tCnt, const void* from, unsigned int fOfs, int fCnt) {\n    int BitsOfHalfWord = sizeof(HALF_WORD) * 8;\n    // align data and offset to HALF_WORD\n    to = (void*)((intptr_t)to + (tOfs / BitsOfHalfWord) * sizeof(HALF_WORD));\n    from = (void*)((intptr_t)from + (fOfs / BitsOfHalfWord) * sizeof(HALF_WORD));\n    fOfs %= BitsOfHalfWord;\n    tOfs %= BitsOfHalfWord;\n\n    int NbrOfCopiedBits = 0, bCnt = (fCnt < tCnt) ? fCnt : tCnt;\n    WORD rMask, wMask;\n    WORD temp, * _to = (WORD*)to, * _from = (WORD*)from;\n    while (bCnt > 0) {\n        // update counter\n        int BitsToCopy = (bCnt < BitsOfHalfWord) ? bCnt : BitsOfHalfWord;\n        bCnt -= BitsToCopy;\n        NbrOfCopiedBits += BitsToCopy;\n        // mask reading from '_from' and mask writing to '_to'\n        rMask = (((WORD)-1) << fOfs) ^ (((WORD)-1) << (fOfs + BitsToCopy));\n        wMask = (((WORD)-1) << tOfs) ^ (((WORD)-1) << (tOfs + BitsToCopy));\n        showBits(&rMask, 32);\n        showBits(&wMask, 32);\n        temp = (*_from & rMask) >> fOfs << tOfs;\n        *_to &= ~wMask;\n        *_to |= temp;\n        printf(\"%d bit(s) copied\\n\", BitsToCopy);\n        // increase data pointer if copy is not completed\n        if (BitsToCopy == BitsOfHalfWord) {\n            _to = (WORD*)((intptr_t)_to + sizeof(HALF_WORD));\n            _from = (WORD*)((intptr_t)_from + sizeof(HALF_WORD));\n        }\n        showBits(to, 64);\n    }\n    return NbrOfCopiedBits;\n}\n```\n\n### 3. bitcpy 物理方式\n**物理左移**\n\n```C++\nWORD shiftLeft(WORD w, int len) {\n    unsigned char* s = (unsigned char*)&w;\n    while (len--) {\n        *(s) <<= 1;\n        for (int i = 1; i < 4; i++) {\n            if (*(s + i) == 0)\n                continue;\n            if (*(s + i) & 0x80)\n                *(s + i - 1) |= 1;\n            *(s + i) <<= 1;\n        }\n    }\n    return w;\n}\n```\n**物理右移**\n\n```C++\nWORD shiftRight(WORD w, int len) {\n    unsigned char* s = (unsigned char*)&w;\n    while (len--) {\n        *(s+3) >>= 1;\n        for (int i = 2; i >= 0; i--) {\n            if (*(s + i) == 0)\n                continue;\n            if (*(s + i) & 1)\n                *(s + i + 1) |= 0x80;\n            *(s + i) >>= 1;\n        }\n    }\n    return w;\n}\n```\n**拷贝方式是按照实际的物理bit位进行顺序拷贝的**\n\n```C++\nint bitcpy(void* to, unsigned int tOfs, const void* from, unsigned int fOfs, int bCnt) {\n    int BitsOfHalfWord = sizeof(HALF_WORD) * 8;\n    // 将数据和偏置对其“半字”\n    // 指针视为intptr_t，加1则前进一个Byte，且更安全（适用于将指针进行算术运算时使用）\n    to = (void*)((intptr_t)to + (tOfs / BitsOfHalfWord) * sizeof(HALF_WORD));\n    from = (void*)((intptr_t)from + (fOfs / BitsOfHalfWord) * sizeof(HALF_WORD));\n    fOfs %= BitsOfHalfWord;\n    tOfs %= BitsOfHalfWord;\n    int NbrOfCopiedBits = 0;\n    WORD rMask, wMask;\n    WORD temp;\n    WORD *_to = (WORD*)to;\n    WORD *_from = (WORD*)from;\n    while (bCnt > 0) {\n        // 更新\n        int BitsToCopy = (bCnt < BitsOfHalfWord) ? bCnt : BitsOfHalfWord;\n        bCnt -= BitsToCopy;\n        NbrOfCopiedBits += BitsToCopy;\n        // 源与目标的遮罩\n        rMask = shiftRight((WORD)-1, fOfs) ^ shiftRight((WORD)-1, fOfs + BitsToCopy);\n        wMask = shiftRight((WORD)-1, tOfs) ^ shiftRight((WORD)-1, tOfs + BitsToCopy);\n        temp = (*_from & rMask);\n        temp = shiftLeft(temp, fOfs);\n        temp = shiftRight(temp, tOfs);\n        *_to &= ~wMask;\t// 先清理此部分\n        *_to |= temp;\t// 在“拷贝”进来\n        // 拷贝未完成情况下，跟进指针\n        if (BitsToCopy == BitsOfHalfWord) {\n            _to = (WORD*)((intptr_t)_to + sizeof(HALF_WORD));\n            _from = (WORD*)((intptr_t)_from + sizeof(HALF_WORD));\n        }\n    }\n    return NbrOfCopiedBits;\n}\n```","tags":["C/C++"]}]